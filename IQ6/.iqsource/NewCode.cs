using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Web.Mvc;
using IQ6.Core;
using OfficeOpenXml.Style;
using OfficeOpenXml;
using System.IO;

namespace FTL { 

	
public partial class Inv_InvRouteFrom : 
	DataFieldSelectBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route From";}
		set { } 
	}

	public string DFName=> "InvRouteFrom";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteFrom").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteFrom").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvRouteFrom(Inv Parent) : 
		base(Parent, "InvRouteFrom"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvRouteFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteFrom").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteFrom").First().Value(new Inv());
		
		
			return  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 100;
	}
	public string GetControlName() {
		return "InvRouteFromValue";
	}
	public string GetDFName() {
		return "InvRouteFrom";
	}
	public string GetTitle() {
		return "Route From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvRouteFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvRouteFrom/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvRouteFrom'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvRouteFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvRouteFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvRouteFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvRouteFrom", "@InvRouteFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvRouteFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvRouteFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvRouteTo : 
	DataFieldSelectBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route To";}
		set { } 
	}

	public string DFName=> "InvRouteTo";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteTo").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteTo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvRouteTo(Inv Parent) : 
		base(Parent, "InvRouteTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvRouteToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteTo").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvRouteTo").First().Value(new Inv());
		
		
			return  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 101;
	}
	public string GetControlName() {
		return "InvRouteToValue";
	}
	public string GetDFName() {
		return "InvRouteTo";
	}
	public string GetTitle() {
		return "Route To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvRouteTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvRouteTo/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvRouteTo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvRouteTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvRouteTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvRouteTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvRouteTo", "@InvRouteTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvRouteTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvRouteTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvFerryName : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Ferry Name";}
		set { } 
	}

	public string DFName=> "InvFerryName";

	
	public Inv_InvFerryName(Inv Parent) : 
		base(Parent, "InvFerryName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Inv_InvFerryNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFerryName").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFerryName").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 102;
	}
	public string GetControlName() {
		return "InvFerryNameValue";
	}
	public string GetDFName() {
		return "InvFerryName";
	}
	public string GetTitle() {
		return "Ferry Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvFerryName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvFerryName/?RecId=[[RecId]]',$(this));\" data-bound-name='InvFerryName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvFerryName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvFerryName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvFerryName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvFerryName", "@InvFerryName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvFerryName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvFerryName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvFerryDate : 
	DateDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Ferry Date";}
		set { } 
	}

	public string DFName=> "InvFerryDate";

	
	public Inv_InvFerryDate(Inv Parent) : 
		base(Parent, "InvFerryDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Inv_InvFerryDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFerryDate").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFerryDate").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 103;
	}
	public string GetControlName() {
		return "InvFerryDateValue";
	}
	public string GetDFName() {
		return "InvFerryDate";
	}
	public string GetTitle() {
		return "Ferry Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvFerryDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Inv/SaveInvFerryDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='InvFerryDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvFerryDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvFerryDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvFerryDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvFerryDate", "@InvFerryDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvFerryDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvFerryDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvFerryTime : 
	TimeDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Ferry Time";}
		set { } 
	}

	public string DFName=> "InvFerryTime";

	
	public Inv_InvFerryTime(Inv Parent) : 
		base(Parent, "InvFerryTime"
			,"HH:mm"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Inv_InvFerryTimeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFerryTime").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFerryTime").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 104;
	}
	public string GetControlName() {
		return "InvFerryTimeValue";
	}
	public string GetDFName() {
		return "InvFerryTime";
	}
	public string GetTitle() {
		return "Ferry Time";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvFerryTime.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvFerryTime/?RecId=[[RecId]]',$(this));\" data-bound-name='InvFerryTime' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvFerryTime.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvFerryTime";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvFerryTime")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvFerryTime", "@InvFerryTime", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvFerryTime", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvFerryTime", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvTo : 
	DataFieldAutoCompleteSingleBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice To";}
		set { } 
	}

	public string DFName=> "InvTo";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTo").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvTo(Inv Parent) : 
		base(Parent, "InvTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTo").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTo").First().Value(new Inv());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 105;
	}
	public string GetControlName() {
		return "InvToValue";
	}
	public string GetDFName() {
		return "InvTo";
	}
	public string GetTitle() {
		return "Invoice To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Inv/AutoCompleteInvTo/' onchange=\"javascript:IQAutoSave('/Inv/SaveInvTo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='InvTo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Inv/AutoCompleteInvTo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvTo", "@InvTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Inv_InvDesc : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Description";}
		set { } 
	}

	public string DFName=> "InvDesc";

	
	public Inv_InvDesc(Inv Parent) : 
		base(Parent, "InvDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Inv_InvDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvDesc").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvDesc").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 106;
	}
	public string GetControlName() {
		return "InvDescValue";
	}
	public string GetDFName() {
		return "InvDesc";
	}
	public string GetTitle() {
		return "Invoice Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvDesc/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='InvDesc'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvDesc", "@InvDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvNet : 
	FormattableDataFieldBase<double,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Net Amount";}
		set { } 
	}

	public string DFName=> "InvNet";

	
	public Inv_InvNet(Inv Parent) : 
		base(Parent, "InvNet"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Inv_InvNetFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNet").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNet").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 107;
	}
	public string GetControlName() {
		return "InvNetValue";
	}
	public string GetDFName() {
		return "InvNet";
	}
	public string GetTitle() {
		return "Net Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvNet.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvNet/?RecId=[[RecId]]',$(this));\" data-bound-name='InvNet' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvNet.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvNet";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvNet")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvNet", "@InvNet", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvNet", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvNet", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvVAT : 
	FormattableDataFieldBase<double,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Amount";}
		set { } 
	}

	public string DFName=> "InvVAT";

	
	public Inv_InvVAT(Inv Parent) : 
		base(Parent, "InvVAT"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Inv_InvVATFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvVAT").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvVAT").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 108;
	}
	public string GetControlName() {
		return "InvVATValue";
	}
	public string GetDFName() {
		return "InvVAT";
	}
	public string GetTitle() {
		return "VAT Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvVAT.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvVAT/?RecId=[[RecId]]',$(this));\" data-bound-name='InvVAT' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvVAT.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvVAT";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvVAT")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvVAT", "@InvVAT", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvVAT", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvVAT", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvTotal : 
	FormattableDataFieldBase<double,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Total";}
		set { } 
	}

	public string DFName=> "InvTotal";

	
	public Inv_InvTotal(Inv Parent) : 
		base(Parent, "InvTotal"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Inv_InvTotalFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTotal").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTotal").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 109;
	}
	public string GetControlName() {
		return "InvTotalValue";
	}
	public string GetDFName() {
		return "InvTotal";
	}
	public string GetTitle() {
		return "Invoice Total";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvTotal.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvTotal/?RecId=[[RecId]]',$(this));\" data-bound-name='InvTotal' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvTotal.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvTotal";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvTotal")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvTotal", "@InvTotal", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvTotal", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvTotal", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvNote1 : 
	DataFieldSelectBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comment 1";}
		set { } 
	}

	public string DFName=> "InvNote1";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote1").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote1").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvNote1(Inv Parent) : 
		base(Parent, "InvNote1"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvNote1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote1").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote1").First().Value(new Inv());
		
		
			return  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 110;
	}
	public string GetControlName() {
		return "InvNote1Value";
	}
	public string GetDFName() {
		return "InvNote1";
	}
	public string GetTitle() {
		return "Comment 1";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvNote1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvNote1/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvNote1'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvNote1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvNote1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvNote1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvNote1", "@InvNote1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvNote1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvNote1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvNote2 : 
	DataFieldSelectBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comment 2";}
		set { } 
	}

	public string DFName=> "InvNote2";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote2").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote2").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvNote2(Inv Parent) : 
		base(Parent, "InvNote2"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvNote2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote2").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote2").First().Value(new Inv());
		
		
			return  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 111;
	}
	public string GetControlName() {
		return "InvNote2Value";
	}
	public string GetDFName() {
		return "InvNote2";
	}
	public string GetTitle() {
		return "Comment 2";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvNote2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvNote2/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvNote2'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvNote2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvNote2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvNote2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvNote2", "@InvNote2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvNote2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvNote2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvNote3 : 
	DataFieldSelectBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comment 3";}
		set { } 
	}

	public string DFName=> "InvNote3";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote3").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote3").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvNote3(Inv Parent) : 
		base(Parent, "InvNote3"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvNote3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote3").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvNote3").First().Value(new Inv());
		
		
			return  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 112;
	}
	public string GetControlName() {
		return "InvNote3Value";
	}
	public string GetDFName() {
		return "InvNote3";
	}
	public string GetTitle() {
		return "Comment 3";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvNote3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvNote3/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvNote3'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvNote3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvNote3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvNote3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvNote3", "@InvNote3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvNote3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvNote3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvComment_InvCId : 
	FormattableDataFieldBase<int,InvComment>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Inv Comment ID";}
		set { } 
	}

	public string DFName=> "InvCId";

	
	public InvComment_InvCId(InvComment Parent) : 
		base(Parent, "InvCId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class InvComment_InvCIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvComment>().OnDataSource.Where(f=> f.Key == "InvCId").Any()) 
			return DS.GetManager<InvComment>().OnDataSource.Where(f=> f.Key == "InvCId").First().Value(new InvComment());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 115;
	}
	public string GetControlName() {
		return "InvCIdValue";
	}
	public string GetDFName() {
		return "InvCId";
	}
	public string GetTitle() {
		return "Inv Comment ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvComment ds;
					ds = (InvComment)dsI;
		 
		
		return ds.InvCId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvComment ds;
				ds = (InvComment)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvComment/SaveInvCId/?RecId=[[RecId]]',$(this));\" data-bound-name='InvCId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvCId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvCId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvCId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvCId", "@InvCId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvCId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvComment").GetFieldOperators("InvCId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvComment_InvCName : 
	DataFieldBase<string,InvComment>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Inv Comment";}
		set { } 
	}

	public string DFName=> "InvCName";

	
	public InvComment_InvCName(InvComment Parent) : 
		base(Parent, "InvCName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class InvComment_InvCNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvComment>().OnDataSource.Where(f=> f.Key == "InvCName").Any()) 
			return DS.GetManager<InvComment>().OnDataSource.Where(f=> f.Key == "InvCName").First().Value(new InvComment());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 116;
	}
	public string GetControlName() {
		return "InvCNameValue";
	}
	public string GetDFName() {
		return "InvCName";
	}
	public string GetTitle() {
		return "Inv Comment";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvComment ds;
					ds = (InvComment)dsI;
		 
		
		return ds.InvCName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvComment ds;
				ds = (InvComment)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/InvComment/SaveInvCName/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='InvCName'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvCName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvCName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvCName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvCName", "@InvCName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvCName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvComment").GetFieldOperators("InvCName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLInvNo : 
	FormattableDataFieldBase<int,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Number";}
		set { } 
	}

	public string DFName=> "InvLInvNo";

	
	public InvLine_InvLInvNo(InvLine Parent) : 
		base(Parent, "InvLInvNo"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class InvLine_InvLInvNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLInvNo").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLInvNo").First().Value(new InvLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 117;
	}
	public string GetControlName() {
		return "InvLInvNoValue";
	}
	public string GetDFName() {
		return "InvLInvNo";
	}
	public string GetTitle() {
		return "Invoice Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLInvNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLInvNo/?RecId=[[RecId]]',$(this));\" data-bound-name='InvLInvNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLInvNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLInvNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLInvNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLInvNo", "@InvLInvNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLInvNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLInvNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLLineNo : 
	FormattableDataFieldBase<int,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Number";}
		set { } 
	}

	public string DFName=> "InvLLineNo";

	
	public InvLine_InvLLineNo(InvLine Parent) : 
		base(Parent, "InvLLineNo"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class InvLine_InvLLineNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLLineNo").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLLineNo").First().Value(new InvLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 118;
	}
	public string GetControlName() {
		return "InvLLineNoValue";
	}
	public string GetDFName() {
		return "InvLLineNo";
	}
	public string GetTitle() {
		return "Line Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLLineNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLLineNo/?RecId=[[RecId]]',$(this));\" data-bound-name='InvLLineNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLLineNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLLineNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLLineNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLLineNo", "@InvLLineNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLLineNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLLineNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLDesc : 
	DataFieldBase<string,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "InvLDesc";

	
	public InvLine_InvLDesc(InvLine Parent) : 
		base(Parent, "InvLDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class InvLine_InvLDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLDesc").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLDesc").First().Value(new InvLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 119;
	}
	public string GetControlName() {
		return "InvLDescValue";
	}
	public string GetDFName() {
		return "InvLDesc";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLDesc/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='InvLDesc'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLDesc", "@InvLDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLVATCode : 
	DataFieldSelectBase<int,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Code";}
		set { } 
	}

	public string DFName=> "InvLVATCode";

		public string GetDataSource() {
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATCode").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATCode").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT VATId AS KeyValue, VATName AS Description FROM VATCodes UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public InvLine_InvLVATCode(InvLine Parent) : 
		base(Parent, "InvLVATCode"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class InvLine_InvLVATCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATCode").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATCode").First().Value(new InvLine());
		
		
			return  "SELECT VATId AS KeyValue, VATName AS Description FROM VATCodes UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 120;
	}
	public string GetControlName() {
		return "InvLVATCodeValue";
	}
	public string GetDFName() {
		return "InvLVATCode";
	}
	public string GetTitle() {
		return "VAT Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLVATCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLVATCode/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvLVATCode'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLVATCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLVATCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLVATCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLVATCode", "@InvLVATCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLVATCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLVATCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLVATRate : 
	DataFieldBase<double,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Rate";}
		set { } 
	}

	public string DFName=> "InvLVATRate";

	
	public InvLine_InvLVATRate(InvLine Parent) : 
		base(Parent, "InvLVATRate"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class InvLine_InvLVATRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATRate").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATRate").First().Value(new InvLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 121;
	}
	public string GetControlName() {
		return "InvLVATRateValue";
	}
	public string GetDFName() {
		return "InvLVATRate";
	}
	public string GetTitle() {
		return "VAT Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLVATRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLVATRate/?RecId=[[RecId]]',$(this));\" data-bound-name='InvLVATRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLVATRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLVATRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLVATRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLVATRate", "@InvLVATRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLVATRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLVATRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLAmt : 
	FormattableDataFieldBase<double,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Amount";}
		set { } 
	}

	public string DFName=> "InvLAmt";

	
	public InvLine_InvLAmt(InvLine Parent) : 
		base(Parent, "InvLAmt"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class InvLine_InvLAmtFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLAmt").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLAmt").First().Value(new InvLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 122;
	}
	public string GetControlName() {
		return "InvLAmtValue";
	}
	public string GetDFName() {
		return "InvLAmt";
	}
	public string GetTitle() {
		return "Line Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLAmt.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLAmt/?RecId=[[RecId]]',$(this));\" data-bound-name='InvLAmt' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLAmt.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLAmt";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLAmt")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLAmt", "@InvLAmt", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLAmt", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLAmt", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLVATAmt : 
	FormattableDataFieldBase<double,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Amount";}
		set { } 
	}

	public string DFName=> "InvLVATAmt";

	
	public InvLine_InvLVATAmt(InvLine Parent) : 
		base(Parent, "InvLVATAmt"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class InvLine_InvLVATAmtFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATAmt").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLVATAmt").First().Value(new InvLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 123;
	}
	public string GetControlName() {
		return "InvLVATAmtValue";
	}
	public string GetDFName() {
		return "InvLVATAmt";
	}
	public string GetTitle() {
		return "VAT Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLVATAmt.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLVATAmt/?RecId=[[RecId]]',$(this));\" data-bound-name='InvLVATAmt' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLVATAmt.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLVATAmt";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLVATAmt")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLVATAmt", "@InvLVATAmt", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLVATAmt", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLVATAmt", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLTotal : 
	FormattableDataFieldBase<double,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Total";}
		set { } 
	}

	public string DFName=> "InvLTotal";

	
	public InvLine_InvLTotal(InvLine Parent) : 
		base(Parent, "InvLTotal"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class InvLine_InvLTotalFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLTotal").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLTotal").First().Value(new InvLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 124;
	}
	public string GetControlName() {
		return "InvLTotalValue";
	}
	public string GetDFName() {
		return "InvLTotal";
	}
	public string GetTitle() {
		return "Line Total";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLTotal.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLTotal/?RecId=[[RecId]]',$(this));\" data-bound-name='InvLTotal' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLTotal.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLTotal";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLTotal")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLTotal", "@InvLTotal", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLTotal", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLTotal", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class VATCodes_VATCode : 
	DataFieldBase<string,VATCodes>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Code";}
		set { } 
	}

	public string DFName=> "VATCode";

	
	public VATCodes_VATCode(VATCodes Parent) : 
		base(Parent, "VATCode"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class VATCodes_VATCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATCode").Any()) 
			return DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATCode").First().Value(new VATCodes());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 125;
	}
	public string GetControlName() {
		return "VATCodeValue";
	}
	public string GetDFName() {
		return "VATCode";
	}
	public string GetTitle() {
		return "VAT Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		VATCodes ds;
					ds = (VATCodes)dsI;
		 
		
		return ds.VATCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		VATCodes ds;
				ds = (VATCodes)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/VATCodes/SaveVATCode/?RecId=[[RecId]]',$(this));\" data-bound-name='VATCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.VATCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "VATCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "VATCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "VATCode", "@VATCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "VATCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("VATCodes").GetFieldOperators("VATCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class VATCodes_VATName : 
	DataFieldBase<string,VATCodes>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "VATName";

	
	public VATCodes_VATName(VATCodes Parent) : 
		base(Parent, "VATName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class VATCodes_VATNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATName").Any()) 
			return DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATName").First().Value(new VATCodes());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 126;
	}
	public string GetControlName() {
		return "VATNameValue";
	}
	public string GetDFName() {
		return "VATName";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		VATCodes ds;
					ds = (VATCodes)dsI;
		 
		
		return ds.VATName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		VATCodes ds;
				ds = (VATCodes)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/VATCodes/SaveVATName/?RecId=[[RecId]]',$(this));\" data-bound-name='VATName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.VATName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "VATName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "VATName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "VATName", "@VATName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "VATName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("VATCodes").GetFieldOperators("VATName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class VATCodes_VATRate : 
	DataFieldBase<double,VATCodes>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Rate";}
		set { } 
	}

	public string DFName=> "VATRate";

	
	public VATCodes_VATRate(VATCodes Parent) : 
		base(Parent, "VATRate"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class VATCodes_VATRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATRate").Any()) 
			return DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATRate").First().Value(new VATCodes());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 127;
	}
	public string GetControlName() {
		return "VATRateValue";
	}
	public string GetDFName() {
		return "VATRate";
	}
	public string GetTitle() {
		return "VAT Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		VATCodes ds;
					ds = (VATCodes)dsI;
		 
		
		return ds.VATRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		VATCodes ds;
				ds = (VATCodes)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/VATCodes/SaveVATRate/?RecId=[[RecId]]',$(this));\" data-bound-name='VATRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.VATRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "VATRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "VATRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "VATRate", "@VATRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "VATRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("VATCodes").GetFieldOperators("VATRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvDate : 
	DateDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Date";}
		set { } 
	}

	public string DFName=> "InvDate";

	
	public Inv_InvDate(Inv Parent) : 
		base(Parent, "InvDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Inv_InvDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvDate").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvDate").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 128;
	}
	public string GetControlName() {
		return "InvDateValue";
	}
	public string GetDFName() {
		return "InvDate";
	}
	public string GetTitle() {
		return "Invoice Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Inv/SaveInvDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='InvDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvDate", "@InvDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOId : 
	FormattableDataFieldBase<int,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "UK Order ID";}
		set { } 
	}

	public string DFName=> "UKOId";

	
	public UKOrder_UKOId(UKOrder Parent) : 
		base(Parent, "UKOId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class UKOrder_UKOIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOId").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOId").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 129;
	}
	public string GetControlName() {
		return "UKOIdValue";
	}
	public string GetDFName() {
		return "UKOId";
	}
	public string GetTitle() {
		return "UK Order ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOId/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOId", "@UKOId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOCollDate : 
	DateDataFieldBase<UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection Date";}
		set { } 
	}

	public string DFName=> "UKOCollDate";

	
	public UKOrder_UKOCollDate(UKOrder Parent) : 
		base(Parent, "UKOCollDate"
			,"ddd dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKOCollDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCollDate").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCollDate").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 130;
	}
	public string GetControlName() {
		return "UKOCollDateValue";
	}
	public string GetDFName() {
		return "UKOCollDate";
	}
	public string GetTitle() {
		return "Collection Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOCollDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='ddd DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOCollDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='UKOCollDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOCollDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOCollDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOCollDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOCollDate", "@UKOCollDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOCollDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOCollDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOCustRef : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Customer Ref";}
		set { } 
	}

	public string DFName=> "UKOCustRef";

	
	public UKOrder_UKOCustRef(UKOrder Parent) : 
		base(Parent, "UKOCustRef"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKOCustRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCustRef").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCustRef").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 131;
	}
	public string GetControlName() {
		return "UKOCustRefValue";
	}
	public string GetDFName() {
		return "UKOCustRef";
	}
	public string GetTitle() {
		return "Customer Ref";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOCustRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOCustRef/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOCustRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOCustRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOCustRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOCustRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOCustRef", "@UKOCustRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOCustRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOCustRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOCust : 
	DataFieldAutoCompleteSingleBase<int,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Customer Name";}
		set { } 
	}

	public string DFName=> "UKOCust";

		public string GetDataSource() {
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCust").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCust").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public UKOrder_UKOCust(UKOrder Parent) : 
		base(Parent, "UKOCust"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class UKOrder_UKOCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCust").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCust").First().Value(new UKOrder());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 132;
	}
	public string GetControlName() {
		return "UKOCustValue";
	}
	public string GetDFName() {
		return "UKOCust";
	}
	public string GetTitle() {
		return "Customer Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/UKOrder/AutoCompleteUKOCust/' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOCust/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='UKOCust'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/UKOrder/AutoCompleteUKOCust/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOCust", "@UKOCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class UKOrder_UKOCollFrom : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection From";}
		set { } 
	}

	public string DFName=> "UKOCollFrom";

	
	public UKOrder_UKOCollFrom(UKOrder Parent) : 
		base(Parent, "UKOCollFrom"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKOCollFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCollFrom").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCollFrom").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 133;
	}
	public string GetControlName() {
		return "UKOCollFromValue";
	}
	public string GetDFName() {
		return "UKOCollFrom";
	}
	public string GetTitle() {
		return "Collection From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOCollFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOCollFrom/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOCollFrom' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOCollFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOCollFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOCollFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOCollFrom", "@UKOCollFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOCollFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOCollFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKODelTo : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery To";}
		set { } 
	}

	public string DFName=> "UKODelTo";

	
	public UKOrder_UKODelTo(UKOrder Parent) : 
		base(Parent, "UKODelTo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKODelToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKODelTo").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKODelTo").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 134;
	}
	public string GetControlName() {
		return "UKODelToValue";
	}
	public string GetDFName() {
		return "UKODelTo";
	}
	public string GetTitle() {
		return "Delivery To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKODelTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKODelTo/?RecId=[[RecId]]',$(this));\" data-bound-name='UKODelTo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKODelTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKODelTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKODelTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKODelTo", "@UKODelTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKODelTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKODelTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKODesc : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "UKODesc";

	
	public UKOrder_UKODesc(UKOrder Parent) : 
		base(Parent, "UKODesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKODescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKODesc").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKODesc").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 135;
	}
	public string GetControlName() {
		return "UKODescValue";
	}
	public string GetDFName() {
		return "UKODesc";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKODesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKODesc/?RecId=[[RecId]]',$(this));\" data-bound-name='UKODesc' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKODesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKODesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKODesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKODesc", "@UKODesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKODesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKODesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOQty : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Quantity";}
		set { } 
	}

	public string DFName=> "UKOQty";

	
	public UKOrder_UKOQty(UKOrder Parent) : 
		base(Parent, "UKOQty"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKOQtyFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOQty").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOQty").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 136;
	}
	public string GetControlName() {
		return "UKOQtyValue";
	}
	public string GetDFName() {
		return "UKOQty";
	}
	public string GetTitle() {
		return "Quantity";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOQty.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOQty/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOQty' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOQty.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOQty";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOQty")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOQty", "@UKOQty", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOQty", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOQty", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOTransp : 
	DataFieldAutoCompleteSingleBase<int,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Haulier Name";}
		set { } 
	}

	public string DFName=> "UKOTransp";

		public string GetDataSource() {
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOTransp").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOTransp").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public UKOrder_UKOTransp(UKOrder Parent) : 
		base(Parent, "UKOTransp"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class UKOrder_UKOTranspFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOTransp").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOTransp").First().Value(new UKOrder());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 137;
	}
	public string GetControlName() {
		return "UKOTranspValue";
	}
	public string GetDFName() {
		return "UKOTransp";
	}
	public string GetTitle() {
		return "Haulier Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOTransp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/UKOrder/AutoCompleteUKOTransp/' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOTransp/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='UKOTransp'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOTransp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOTransp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/UKOrder/AutoCompleteUKOTransp/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOTransp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOTransp", "@UKOTransp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOTransp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOTransp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class UKOrder_UKOChargeCust : 
	FormattableDataFieldBase<double,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Charge Customer";}
		set { } 
	}

	public string DFName=> "UKOChargeCust";

	
	public UKOrder_UKOChargeCust(UKOrder Parent) : 
		base(Parent, "UKOChargeCust"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class UKOrder_UKOChargeCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOChargeCust").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOChargeCust").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 138;
	}
	public string GetControlName() {
		return "UKOChargeCustValue";
	}
	public string GetDFName() {
		return "UKOChargeCust";
	}
	public string GetTitle() {
		return "Charge Customer";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOChargeCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOChargeCust/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOChargeCust' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOChargeCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOChargeCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOChargeCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOChargeCust", "@UKOChargeCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOChargeCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOChargeCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOFTLCost : 
	FormattableDataFieldBase<double,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Cost to FTL";}
		set { } 
	}

	public string DFName=> "UKOFTLCost";

	
	public UKOrder_UKOFTLCost(UKOrder Parent) : 
		base(Parent, "UKOFTLCost"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class UKOrder_UKOFTLCostFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOFTLCost").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOFTLCost").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 139;
	}
	public string GetControlName() {
		return "UKOFTLCostValue";
	}
	public string GetDFName() {
		return "UKOFTLCost";
	}
	public string GetTitle() {
		return "Cost to FTL";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOFTLCost.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOFTLCost/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOFTLCost' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOFTLCost.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOFTLCost";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOFTLCost")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOFTLCost", "@UKOFTLCost", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOFTLCost", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOFTLCost", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKODelProof : 
	BoolDataFieldBase<UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Proof of Delivery";}
		set { } 
	}

	public string DFName=> "UKODelProof";

	
	public UKOrder_UKODelProof(UKOrder Parent) : 
		base(Parent, "UKODelProof"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class UKOrder_UKODelProofFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKODelProof").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKODelProof").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 140;
	}
	public string GetControlName() {
		return "UKODelProofValue";
	}
	public string GetDFName() {
		return "UKODelProof";
	}
	public string GetTitle() {
		return "Proof of Delivery";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKODelProof.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKODelProof/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='UKODelProof' [[Val]] /><input type = 'hidden' data-bound-name='UKODelProof' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKODelProof.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKODelProof";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "UKODelProof")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKODelProof", "@UKODelProof", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKODelProof", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKODelProof", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOJobNo : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "UKOJobNo";

	
	public UKOrder_UKOJobNo(UKOrder Parent) : 
		base(Parent, "UKOJobNo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class UKOrder_UKOJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOJobNo").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOJobNo").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 141;
	}
	public string GetControlName() {
		return "UKOJobNoValue";
	}
	public string GetDFName() {
		return "UKOJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOJobNo/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOJobNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOJobNo", "@UKOJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKONotes : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comments";}
		set { } 
	}

	public string DFName=> "UKONotes";

	
	public UKOrder_UKONotes(UKOrder Parent) : 
		base(Parent, "UKONotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKONotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKONotes").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKONotes").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 142;
	}
	public string GetControlName() {
		return "UKONotesValue";
	}
	public string GetDFName() {
		return "UKONotes";
	}
	public string GetTitle() {
		return "Comments";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKONotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKONotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='UKONotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKONotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKONotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKONotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKONotes", "@UKONotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKONotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKONotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContMainContact : 
	BoolDataFieldBase<Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Main Contact";}
		set { } 
	}

	public string DFName=> "ContMainContact";

	
	public Contact_ContMainContact(Contact Parent) : 
		base(Parent, "ContMainContact"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Contact_ContMainContactFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContMainContact").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContMainContact").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 143;
	}
	public string GetControlName() {
		return "ContMainContactValue";
	}
	public string GetDFName() {
		return "ContMainContact";
	}
	public string GetTitle() {
		return "Main Contact";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContMainContact.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Contact/SaveContMainContact/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='ContMainContact' [[Val]] /><input type = 'hidden' data-bound-name='ContMainContact' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContMainContact.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContMainContact";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "ContMainContact")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContMainContact", "@ContMainContact", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContMainContact", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContMainContact", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdNotes : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Notes";}
		set { } 
	}

	public string DFName=> "OrdNotes";

	
	public Orders_OrdNotes(Orders Parent) : 
		base(Parent, "OrdNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdNotes").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdNotes").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 149;
	}
	public string GetControlName() {
		return "OrdNotesValue";
	}
	public string GetDFName() {
		return "OrdNotes";
	}
	public string GetTitle() {
		return "Order Notes";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='OrdNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdNotes", "@OrdNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustLang : 
	DataFieldSelectBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Language";}
		set { } 
	}

	public string DFName=> "CustLang";

		public string GetDataSource() {
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustLang").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustLang").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.CustLangAsQuery();		}
		return _DataSource;

	}
    
	public Customer_CustLang(Customer Parent) : 
		base(Parent, "CustLang"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Customer_CustLangFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustLang").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustLang").First().Value(new Customer());
		
		
			return DSUtil.CustLangAsQuery();	}

	public int GetFieldUniqueId() {
		return 150;
	}
	public string GetControlName() {
		return "CustLangValue";
	}
	public string GetDFName() {
		return "CustLang";
	}
	public string GetTitle() {
		return "Language";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustLang.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustLang/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CustLang'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustLang.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustLang";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustLang")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustLang", "@CustLang", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustLang", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustLang", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdJobNo : 
	DataFieldAutoCompleteSingleBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "OrdJobNo";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJobNo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJobNo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdJobNo(Orders Parent) : 
		base(Parent, "OrdJobNo"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJobNo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJobNo").First().Value(new Orders());
		
		
			return  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 155;
	}
	public string GetControlName() {
		return "OrdJobNoValue";
	}
	public string GetDFName() {
		return "OrdJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Orders/AutoCompleteOrdJobNo/' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdJobNo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='OrdJobNo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Orders/AutoCompleteOrdJobNo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdJobNo", "@OrdJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Orders_OrdJobLetter : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Letter";}
		set { } 
	}

	public string DFName=> "OrdJobLetter";

	
	public Orders_OrdJobLetter(Orders Parent) : 
		base(Parent, "OrdJobLetter"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdJobLetterFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJobLetter").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJobLetter").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 156;
	}
	public string GetControlName() {
		return "OrdJobLetterValue";
	}
	public string GetDFName() {
		return "OrdJobLetter";
	}
	public string GetTitle() {
		return "Job Letter";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdJobLetter.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdJobLetter/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdJobLetter' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdJobLetter.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdJobLetter";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdJobLetter")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdJobLetter", "@OrdJobLetter", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdJobLetter", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdJobLetter", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvPrintBatch : 
	FormattableDataFieldBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Print Batch No";}
		set { } 
	}

	public string DFName=> "InvPrintBatch";

	
	public Inv_InvPrintBatch(Inv Parent) : 
		base(Parent, "InvPrintBatch"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Inv_InvPrintBatchFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvPrintBatch").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvPrintBatch").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 157;
	}
	public string GetControlName() {
		return "InvPrintBatchValue";
	}
	public string GetDFName() {
		return "InvPrintBatch";
	}
	public string GetTitle() {
		return "Print Batch No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvPrintBatch.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvPrintBatch/?RecId=[[RecId]]',$(this));\" data-bound-name='InvPrintBatch' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvPrintBatch.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvPrintBatch";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvPrintBatch")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvPrintBatch", "@InvPrintBatch", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvPrintBatch", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvPrintBatch", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLDelPoint : 
	DataFieldSelectBase<int,JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Point";}
		set { } 
	}

	public string DFName=> "JobLDelPoint";

		public string GetDataSource() {
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelPoint").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelPoint").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.JobLDelPointAsQuery();		}
		return _DataSource;

	}
    
	public JobLine_JobLDelPoint(JobLine Parent) : 
		base(Parent, "JobLDelPoint"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class JobLine_JobLDelPointFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelPoint").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelPoint").First().Value(new JobLine());
		
		
			return DSUtil.JobLDelPointAsQuery();	}

	public int GetFieldUniqueId() {
		return 158;
	}
	public string GetControlName() {
		return "JobLDelPointValue";
	}
	public string GetDFName() {
		return "JobLDelPoint";
	}
	public string GetTitle() {
		return "Delivery Point";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLDelPoint.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLDelPoint/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='JobLDelPoint'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLDelPoint.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLDelPoint";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLDelPoint")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLDelPoint", "@JobLDelPoint", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLDelPoint", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLDelPoint", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLDelDate : 
	DateDataFieldBase<JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Date";}
		set { } 
	}

	public string DFName=> "JobLDelDate";

	
	public JobLine_JobLDelDate(JobLine Parent) : 
		base(Parent, "JobLDelDate"
			,"ddd dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobLine_JobLDelDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelDate").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelDate").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 159;
	}
	public string GetControlName() {
		return "JobLDelDateValue";
	}
	public string GetDFName() {
		return "JobLDelDate";
	}
	public string GetTitle() {
		return "Delivery Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLDelDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='ddd DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLDelDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='JobLDelDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLDelDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLDelDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLDelDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLDelDate", "@JobLDelDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLDelDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLDelDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLDelTime : 
	TimeDataFieldBase<JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Time";}
		set { } 
	}

	public string DFName=> "JobLDelTime";

	
	public JobLine_JobLDelTime(JobLine Parent) : 
		base(Parent, "JobLDelTime"
			,"HH:mm"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobLine_JobLDelTimeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelTime").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelTime").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 160;
	}
	public string GetControlName() {
		return "JobLDelTimeValue";
	}
	public string GetDFName() {
		return "JobLDelTime";
	}
	public string GetTitle() {
		return "Delivery Time";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLDelTime.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLDelTime/?RecId=[[RecId]]',$(this));\" data-bound-name='JobLDelTime' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLDelTime.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLDelTime";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLDelTime")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLDelTime", "@JobLDelTime", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLDelTime", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLDelTime", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLDelRef : 
	DataFieldBase<string,JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Ref";}
		set { } 
	}

	public string DFName=> "JobLDelRef";

	
	public JobLine_JobLDelRef(JobLine Parent) : 
		base(Parent, "JobLDelRef"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobLine_JobLDelRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelRef").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLDelRef").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 161;
	}
	public string GetControlName() {
		return "JobLDelRefValue";
	}
	public string GetDFName() {
		return "JobLDelRef";
	}
	public string GetTitle() {
		return "Delivery Ref";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLDelRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLDelRef/?RecId=[[RecId]]',$(this));\" data-bound-name='JobLDelRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLDelRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLDelRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLDelRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLDelRef", "@JobLDelRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLDelRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLDelRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvJobLetter : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Letter";}
		set { } 
	}

	public string DFName=> "InvJobLetter";

	
	public Inv_InvJobLetter(Inv Parent) : 
		base(Parent, "InvJobLetter"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Inv_InvJobLetterFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvJobLetter").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvJobLetter").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 162;
	}
	public string GetControlName() {
		return "InvJobLetterValue";
	}
	public string GetDFName() {
		return "InvJobLetter";
	}
	public string GetTitle() {
		return "Job Letter";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvJobLetter.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvJobLetter/?RecId=[[RecId]]',$(this));\" data-bound-name='InvJobLetter' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvJobLetter.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvJobLetter";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvJobLetter")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvJobLetter", "@InvJobLetter", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvJobLetter", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvJobLetter", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobCost_JobCJobNo : 
	DataFieldSelectBase<int,JobCost>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "JobCJobNo";

		public string GetDataSource() {
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCJobNo").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCJobNo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public JobCost_JobCJobNo(JobCost Parent) : 
		base(Parent, "JobCJobNo"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class JobCost_JobCJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCJobNo").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCJobNo").First().Value(new JobCost());
		
		
			return  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 163;
	}
	public string GetControlName() {
		return "JobCJobNoValue";
	}
	public string GetDFName() {
		return "JobCJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobCost ds;
					ds = (JobCost)dsI;
		 
		
		return ds.JobCJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobCost ds;
				ds = (JobCost)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/JobCost/SaveJobCJobNo/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='JobCJobNo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCJobNo", "@JobCJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobCost").GetFieldOperators("JobCJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobCost_JobCServProvId : 
	FormattableDataFieldBase<int,JobCost>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Service Provider Id";}
		set { } 
	}

	public string DFName=> "JobCServProvId";

	
	public JobCost_JobCServProvId(JobCost Parent) : 
		base(Parent, "JobCServProvId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class JobCost_JobCServProvIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCServProvId").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCServProvId").First().Value(new JobCost());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 164;
	}
	public string GetControlName() {
		return "JobCServProvIdValue";
	}
	public string GetDFName() {
		return "JobCServProvId";
	}
	public string GetTitle() {
		return "Service Provider Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobCost ds;
					ds = (JobCost)dsI;
		 
		
		return ds.JobCServProvId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobCost ds;
				ds = (JobCost)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobCost/SaveJobCServProvId/?RecId=[[RecId]]',$(this));\" data-bound-name='JobCServProvId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCServProvId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCServProvId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCServProvId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCServProvId", "@JobCServProvId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCServProvId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobCost").GetFieldOperators("JobCServProvId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobCost_JobCServProv : 
	DataFieldAutoCompleteSingleBase<int,JobCost>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Service Provider";}
		set { } 
	}

	public string DFName=> "JobCServProv";

		public string GetDataSource() {
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCServProv").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCServProv").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public JobCost_JobCServProv(JobCost Parent) : 
		base(Parent, "JobCServProv"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class JobCost_JobCServProvFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCServProv").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCServProv").First().Value(new JobCost());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 165;
	}
	public string GetControlName() {
		return "JobCServProvValue";
	}
	public string GetDFName() {
		return "JobCServProv";
	}
	public string GetTitle() {
		return "Service Provider";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobCost ds;
					ds = (JobCost)dsI;
		 
		
		return ds.JobCServProv.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobCost ds;
				ds = (JobCost)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/JobCost/AutoCompleteJobCServProv/' onchange=\"javascript:IQAutoSave('/JobCost/SaveJobCServProv/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='JobCServProv'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCServProv.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCServProv";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/JobCost/AutoCompleteJobCServProv/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCServProv")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCServProv", "@JobCServProv", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCServProv", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobCost").GetFieldOperators("JobCServProv", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class JobCost_JobCDesc : 
	DataFieldBase<string,JobCost>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "JobCDesc";

	
	public JobCost_JobCDesc(JobCost Parent) : 
		base(Parent, "JobCDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobCost_JobCDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCDesc").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCDesc").First().Value(new JobCost());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 166;
	}
	public string GetControlName() {
		return "JobCDescValue";
	}
	public string GetDFName() {
		return "JobCDesc";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobCost ds;
					ds = (JobCost)dsI;
		 
		
		return ds.JobCDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobCost ds;
				ds = (JobCost)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobCost/SaveJobCDesc/?RecId=[[RecId]]',$(this));\" data-bound-name='JobCDesc' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCDesc", "@JobCDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobCost").GetFieldOperators("JobCDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobCost_JobCInvAmt : 
	FormattableDataFieldBase<double,JobCost>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Amount";}
		set { } 
	}

	public string DFName=> "JobCInvAmt";

	
	public JobCost_JobCInvAmt(JobCost Parent) : 
		base(Parent, "JobCInvAmt"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class JobCost_JobCInvAmtFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCInvAmt").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCInvAmt").First().Value(new JobCost());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 167;
	}
	public string GetControlName() {
		return "JobCInvAmtValue";
	}
	public string GetDFName() {
		return "JobCInvAmt";
	}
	public string GetTitle() {
		return "Invoice Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobCost ds;
					ds = (JobCost)dsI;
		 
		
		return ds.JobCInvAmt.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobCost ds;
				ds = (JobCost)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobCost/SaveJobCInvAmt/?RecId=[[RecId]]',$(this));\" data-bound-name='JobCInvAmt' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCInvAmt.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCInvAmt";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCInvAmt")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCInvAmt", "@JobCInvAmt", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCInvAmt", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobCost").GetFieldOperators("JobCInvAmt", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobCost_JobCInvNo : 
	DataFieldBase<string,JobCost>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Number";}
		set { } 
	}

	public string DFName=> "JobCInvNo";

	
	public JobCost_JobCInvNo(JobCost Parent) : 
		base(Parent, "JobCInvNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobCost_JobCInvNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCInvNo").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCInvNo").First().Value(new JobCost());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 168;
	}
	public string GetControlName() {
		return "JobCInvNoValue";
	}
	public string GetDFName() {
		return "JobCInvNo";
	}
	public string GetTitle() {
		return "Invoice Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobCost ds;
					ds = (JobCost)dsI;
		 
		
		return ds.JobCInvNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobCost ds;
				ds = (JobCost)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobCost/SaveJobCInvNo/?RecId=[[RecId]]',$(this));\" data-bound-name='JobCInvNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCInvNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCInvNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCInvNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCInvNo", "@JobCInvNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCInvNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobCost").GetFieldOperators("JobCInvNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobCost_JobCInvDate : 
	DateDataFieldBase<JobCost>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Date";}
		set { } 
	}

	public string DFName=> "JobCInvDate";

	
	public JobCost_JobCInvDate(JobCost Parent) : 
		base(Parent, "JobCInvDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobCost_JobCInvDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCInvDate").Any()) 
			return DS.GetManager<JobCost>().OnDataSource.Where(f=> f.Key == "JobCInvDate").First().Value(new JobCost());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 169;
	}
	public string GetControlName() {
		return "JobCInvDateValue";
	}
	public string GetDFName() {
		return "JobCInvDate";
	}
	public string GetTitle() {
		return "Invoice Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobCost ds;
					ds = (JobCost)dsI;
		 
		
		return ds.JobCInvDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobCost ds;
				ds = (JobCost)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/JobCost/SaveJobCInvDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='JobCInvDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCInvDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCInvDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCInvDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCInvDate", "@JobCInvDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCInvDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobCost").GetFieldOperators("JobCInvDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvLine_InvLChargeType : 
	DataFieldSelectBase<string,InvLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Charge Type";}
		set { } 
	}

	public string DFName=> "InvLChargeType";

		public string GetDataSource() {
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLChargeType").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLChargeType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.InvLChargeTypeAsQuery();		}
		return _DataSource;

	}
    
	public InvLine_InvLChargeType(InvLine Parent) : 
		base(Parent, "InvLChargeType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class InvLine_InvLChargeTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLChargeType").Any()) 
			return DS.GetManager<InvLine>().OnDataSource.Where(f=> f.Key == "InvLChargeType").First().Value(new InvLine());
		
		
			return DSUtil.InvLChargeTypeAsQuery();	}

	public int GetFieldUniqueId() {
		return 170;
	}
	public string GetControlName() {
		return "InvLChargeTypeValue";
	}
	public string GetDFName() {
		return "InvLChargeType";
	}
	public string GetTitle() {
		return "Charge Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvLine ds;
					ds = (InvLine)dsI;
		 
		
		return ds.InvLChargeType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvLine ds;
				ds = (InvLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/InvLine/SaveInvLChargeType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvLChargeType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvLChargeType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvLChargeType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvLChargeType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvLChargeType", "@InvLChargeType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvLChargeType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvLine").GetFieldOperators("InvLChargeType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvToExport : 
	BoolDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Send to Dover";}
		set { } 
	}

	public string DFName=> "InvToExport";

	
	public Inv_InvToExport(Inv Parent) : 
		base(Parent, "InvToExport"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Inv_InvToExportFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvToExport").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvToExport").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 171;
	}
	public string GetControlName() {
		return "InvToExportValue";
	}
	public string GetDFName() {
		return "InvToExport";
	}
	public string GetTitle() {
		return "Send to Dover";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvToExport.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Inv/SaveInvToExport/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='InvToExport' [[Val]] /><input type = 'hidden' data-bound-name='InvToExport' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvToExport.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvToExport";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "InvToExport")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvToExport", "@InvToExport", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvToExport", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvToExport", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvExported : 
	BoolDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sent to Dover";}
		set { } 
	}

	public string DFName=> "InvExported";

	
	public Inv_InvExported(Inv Parent) : 
		base(Parent, "InvExported"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("False");
				    }
}


public partial class Inv_InvExportedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvExported").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvExported").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 172;
	}
	public string GetControlName() {
		return "InvExportedValue";
	}
	public string GetDFName() {
		return "InvExported";
	}
	public string GetTitle() {
		return "Sent to Dover";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvExported.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Inv/SaveInvExported/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='InvExported' [[Val]] /><input type = 'hidden' data-bound-name='InvExported' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvExported.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvExported";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "InvExported")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvExported", "@InvExported", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvExported", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvExported", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvCustOrd : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Order No";}
		set { } 
	}

	public string DFName=> "InvCustOrd";

	
	public Inv_InvCustOrd(Inv Parent) : 
		base(Parent, "InvCustOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Inv_InvCustOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvCustOrd").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvCustOrd").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 174;
	}
	public string GetControlName() {
		return "InvCustOrdValue";
	}
	public string GetDFName() {
		return "InvCustOrd";
	}
	public string GetTitle() {
		return "Client Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvCustOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvCustOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='InvCustOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvCustOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvCustOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvCustOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvCustOrd", "@InvCustOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvCustOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvCustOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvToId : 
	FormattableDataFieldBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice To ID";}
		set { } 
	}

	public string DFName=> "InvToId";

	
	public Inv_InvToId(Inv Parent) : 
		base(Parent, "InvToId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Inv_InvToIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvToId").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvToId").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 175;
	}
	public string GetControlName() {
		return "InvToIdValue";
	}
	public string GetDFName() {
		return "InvToId";
	}
	public string GetTitle() {
		return "Invoice To ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvToId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvToId/?RecId=[[RecId]]',$(this));\" data-bound-name='InvToId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvToId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvToId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvToId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvToId", "@InvToId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvToId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvToId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdInvoiced : 
	BoolDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoiced";}
		set { } 
	}

	public string DFName=> "OrdInvoiced";

	
	public Orders_OrdInvoiced(Orders Parent) : 
		base(Parent, "OrdInvoiced"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("False");
				    }
}


public partial class Orders_OrdInvoicedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdInvoiced").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdInvoiced").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 176;
	}
	public string GetControlName() {
		return "OrdInvoicedValue";
	}
	public string GetDFName() {
		return "OrdInvoiced";
	}
	public string GetTitle() {
		return "Invoiced";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdInvoiced.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Orders/SaveOrdInvoiced/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='OrdInvoiced' [[Val]] /><input type = 'hidden' data-bound-name='OrdInvoiced' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdInvoiced.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdInvoiced";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "OrdInvoiced")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdInvoiced", "@OrdInvoiced", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdInvoiced", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdInvoiced", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdFreightInv : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Freight Inv";}
		set { } 
	}

	public string DFName=> "OrdFreightInv";

	
	public Orders_OrdFreightInv(Orders Parent) : 
		base(Parent, "OrdFreightInv"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdFreightInvFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdFreightInv").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdFreightInv").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 177;
	}
	public string GetControlName() {
		return "OrdFreightInvValue";
	}
	public string GetDFName() {
		return "OrdFreightInv";
	}
	public string GetTitle() {
		return "Freight Inv";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdFreightInv.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdFreightInv/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='OrdFreightInv'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdFreightInv.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdFreightInv";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdFreightInv")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdFreightInv", "@OrdFreightInv", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdFreightInv", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdFreightInv", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSId : 
	FormattableDataFieldBase<int,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Certificate Number";}
		set { } 
	}

	public string DFName=> "CSId";

	
	public CertShip_CSId(CertShip Parent) : 
		base(Parent, "CSId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CertShip_CSIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSId").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSId").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 178;
	}
	public string GetControlName() {
		return "CSIdValue";
	}
	public string GetDFName() {
		return "CSId";
	}
	public string GetTitle() {
		return "Certificate Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSId/?RecId=[[RecId]]',$(this));\" data-bound-name='CSId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSId", "@CSId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSJobNo : 
	DataFieldAutoCompleteSingleBase<int,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "CSJobNo";

		public string GetDataSource() {
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSJobNo").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSJobNo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public CertShip_CSJobNo(CertShip Parent) : 
		base(Parent, "CSJobNo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CertShip_CSJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSJobNo").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSJobNo").First().Value(new CertShip());
		
		
			return  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 179;
	}
	public string GetControlName() {
		return "CSJobNoValue";
	}
	public string GetDFName() {
		return "CSJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/CertShip/AutoCompleteCSJobNo/' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSJobNo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='CSJobNo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/CertShip/AutoCompleteCSJobNo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSJobNo", "@CSJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class CertShip_CSJobLetter : 
	DataFieldBase<string,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Letter";}
		set { } 
	}

	public string DFName=> "CSJobLetter";

	
	public CertShip_CSJobLetter(CertShip Parent) : 
		base(Parent, "CSJobLetter"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSJobLetterFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSJobLetter").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSJobLetter").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 180;
	}
	public string GetControlName() {
		return "CSJobLetterValue";
	}
	public string GetDFName() {
		return "CSJobLetter";
	}
	public string GetTitle() {
		return "Job Letter";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSJobLetter.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSJobLetter/?RecId=[[RecId]]',$(this));\" data-bound-name='CSJobLetter' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSJobLetter.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSJobLetter";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSJobLetter")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSJobLetter", "@CSJobLetter", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSJobLetter", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSJobLetter", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSOrder : 
	DataFieldAutoCompleteSingleBase<int,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "CSOrder";

		public string GetDataSource() {
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSOrder").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSOrder").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT OrdId AS KeyValue, Cast(OrdId AS varchar(100)) AS Description FROM Orders UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CertShip_CSOrder(CertShip Parent) : 
		base(Parent, "CSOrder"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CertShip_CSOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSOrder").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSOrder").First().Value(new CertShip());
		
		
			return  "SELECT OrdId AS KeyValue, Cast(OrdId AS varchar(100)) AS Description FROM Orders UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 181;
	}
	public string GetControlName() {
		return "CSOrderValue";
	}
	public string GetDFName() {
		return "CSOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/CertShip/AutoCompleteCSOrder/' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSOrder/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='CSOrder'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/CertShip/AutoCompleteCSOrder/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSOrder", "@CSOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class CertShip_CSCust : 
	DataFieldAutoCompleteSingleBase<int,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client";}
		set { } 
	}

	public string DFName=> "CSCust";

		public string GetDataSource() {
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSCust").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSCust").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CertShip_CSCust(CertShip Parent) : 
		base(Parent, "CSCust"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CertShip_CSCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSCust").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSCust").First().Value(new CertShip());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 182;
	}
	public string GetControlName() {
		return "CSCustValue";
	}
	public string GetDFName() {
		return "CSCust";
	}
	public string GetTitle() {
		return "Client";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/CertShip/AutoCompleteCSCust/' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSCust/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='CSCust'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/CertShip/AutoCompleteCSCust/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSCust", "@CSCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class CertShip_CSCustOrd : 
	DataFieldBase<string,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Order No";}
		set { } 
	}

	public string DFName=> "CSCustOrd";

	
	public CertShip_CSCustOrd(CertShip Parent) : 
		base(Parent, "CSCustOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSCustOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSCustOrd").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSCustOrd").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 183;
	}
	public string GetControlName() {
		return "CSCustOrdValue";
	}
	public string GetDFName() {
		return "CSCustOrd";
	}
	public string GetTitle() {
		return "Client Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSCustOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSCustOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='CSCustOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSCustOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSCustOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSCustOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSCustOrd", "@CSCustOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSCustOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSCustOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSDelPoint : 
	DataFieldAutoCompleteSingleBase<int,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Point";}
		set { } 
	}

	public string DFName=> "CSDelPoint";

		public string GetDataSource() {
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSDelPoint").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSDelPoint").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CertShip_CSDelPoint(CertShip Parent) : 
		base(Parent, "CSDelPoint"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CertShip_CSDelPointFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSDelPoint").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSDelPoint").First().Value(new CertShip());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 184;
	}
	public string GetControlName() {
		return "CSDelPointValue";
	}
	public string GetDFName() {
		return "CSDelPoint";
	}
	public string GetTitle() {
		return "Delivery Point";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSDelPoint.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/CertShip/AutoCompleteCSDelPoint/' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSDelPoint/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='CSDelPoint'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSDelPoint.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSDelPoint";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/CertShip/AutoCompleteCSDelPoint/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSDelPoint")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSDelPoint", "@CSDelPoint", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSDelPoint", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSDelPoint", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class CertShip_CSGoodsDesc : 
	DataFieldBase<string,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Goods Desc";}
		set { } 
	}

	public string DFName=> "CSGoodsDesc";

	
	public CertShip_CSGoodsDesc(CertShip Parent) : 
		base(Parent, "CSGoodsDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSGoodsDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSGoodsDesc").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSGoodsDesc").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 185;
	}
	public string GetControlName() {
		return "CSGoodsDescValue";
	}
	public string GetDFName() {
		return "CSGoodsDesc";
	}
	public string GetTitle() {
		return "Goods Desc";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSGoodsDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSGoodsDesc/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CSGoodsDesc'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSGoodsDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSGoodsDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSGoodsDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSGoodsDesc", "@CSGoodsDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSGoodsDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSGoodsDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSWeight : 
	DataFieldBase<string,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Weight";}
		set { } 
	}

	public string DFName=> "CSWeight";

	
	public CertShip_CSWeight(CertShip Parent) : 
		base(Parent, "CSWeight"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSWeightFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSWeight").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSWeight").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 186;
	}
	public string GetControlName() {
		return "CSWeightValue";
	}
	public string GetDFName() {
		return "CSWeight";
	}
	public string GetTitle() {
		return "Weight";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSWeight.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSWeight/?RecId=[[RecId]]',$(this));\" data-bound-name='CSWeight' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSWeight.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSWeight";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSWeight")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSWeight", "@CSWeight", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSWeight", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSWeight", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSVehicle : 
	DataFieldBase<string,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Vehicle";}
		set { } 
	}

	public string DFName=> "CSVehicle";

	
	public CertShip_CSVehicle(CertShip Parent) : 
		base(Parent, "CSVehicle"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSVehicleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSVehicle").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSVehicle").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 187;
	}
	public string GetControlName() {
		return "CSVehicleValue";
	}
	public string GetDFName() {
		return "CSVehicle";
	}
	public string GetTitle() {
		return "Vehicle";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSVehicle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSVehicle/?RecId=[[RecId]]',$(this));\" data-bound-name='CSVehicle' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSVehicle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSVehicle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSVehicle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSVehicle", "@CSVehicle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSVehicle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSVehicle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSRoute : 
	DataFieldBase<string,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route";}
		set { } 
	}

	public string DFName=> "CSRoute";

	
	public CertShip_CSRoute(CertShip Parent) : 
		base(Parent, "CSRoute"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSRouteFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSRoute").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSRoute").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 188;
	}
	public string GetControlName() {
		return "CSRouteValue";
	}
	public string GetDFName() {
		return "CSRoute";
	}
	public string GetTitle() {
		return "Route";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSRoute.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSRoute/?RecId=[[RecId]]',$(this));\" data-bound-name='CSRoute' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSRoute.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSRoute";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSRoute")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSRoute", "@CSRoute", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSRoute", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSRoute", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSShip : 
	DataFieldBase<string,CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Ship";}
		set { } 
	}

	public string DFName=> "CSShip";

	
	public CertShip_CSShip(CertShip Parent) : 
		base(Parent, "CSShip"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSShipFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSShip").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSShip").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 189;
	}
	public string GetControlName() {
		return "CSShipValue";
	}
	public string GetDFName() {
		return "CSShip";
	}
	public string GetTitle() {
		return "Ship";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSShip.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSShip/?RecId=[[RecId]]',$(this));\" data-bound-name='CSShip' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSShip.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSShip";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSShip")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSShip", "@CSShip", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSShip", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSShip", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSDate : 
	DateDataFieldBase<CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date";}
		set { } 
	}

	public string DFName=> "CSDate";

	
	public CertShip_CSDate(CertShip Parent) : 
		base(Parent, "CSDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSDate").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSDate").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 190;
	}
	public string GetControlName() {
		return "CSDateValue";
	}
	public string GetDFName() {
		return "CSDate";
	}
	public string GetTitle() {
		return "Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='CSDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSDate", "@CSDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CertShip_CSTime : 
	TimeDataFieldBase<CertShip>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Time";}
		set { } 
	}

	public string DFName=> "CSTime";

	
	public CertShip_CSTime(CertShip Parent) : 
		base(Parent, "CSTime"
			,"HH:mm"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CertShip_CSTimeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSTime").Any()) 
			return DS.GetManager<CertShip>().OnDataSource.Where(f=> f.Key == "CSTime").First().Value(new CertShip());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 191;
	}
	public string GetControlName() {
		return "CSTimeValue";
	}
	public string GetDFName() {
		return "CSTime";
	}
	public string GetTitle() {
		return "Time";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CertShip ds;
					ds = (CertShip)dsI;
		 
		
		return ds.CSTime.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CertShip ds;
				ds = (CertShip)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CertShip/SaveCSTime/?RecId=[[RecId]]',$(this));\" data-bound-name='CSTime' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CSTime.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CSTime";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CSTime")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CSTime", "@CSTime", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CSTime", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CertShip").GetFieldOperators("CSTime", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdTimeAvail : 
	TimeDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Time Available";}
		set { } 
	}

	public string DFName=> "OrdTimeAvail";

	
	public Orders_OrdTimeAvail(Orders Parent) : 
		base(Parent, "OrdTimeAvail"
			,"HH:mm"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdTimeAvailFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdTimeAvail").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdTimeAvail").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 192;
	}
	public string GetControlName() {
		return "OrdTimeAvailValue";
	}
	public string GetDFName() {
		return "OrdTimeAvail";
	}
	public string GetTitle() {
		return "Time Available";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdTimeAvail.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdTimeAvail/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdTimeAvail' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdTimeAvail.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdTimeAvail";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdTimeAvail")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdTimeAvail", "@OrdTimeAvail", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdTimeAvail", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdTimeAvail", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustSendStatus : 
	BoolDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Send Status";}
		set { } 
	}

	public string DFName=> "CustSendStatus";

	
	public Customer_CustSendStatus(Customer Parent) : 
		base(Parent, "CustSendStatus"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Customer_CustSendStatusFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustSendStatus").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustSendStatus").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 193;
	}
	public string GetControlName() {
		return "CustSendStatusValue";
	}
	public string GetDFName() {
		return "CustSendStatus";
	}
	public string GetTitle() {
		return "Send Status";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustSendStatus.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Customer/SaveCustSendStatus/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CustSendStatus' [[Val]] /><input type = 'hidden' data-bound-name='CustSendStatus' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustSendStatus.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustSendStatus";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CustSendStatus")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustSendStatus", "@CustSendStatus", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustSendStatus", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustSendStatus", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOWeight : 
	DataFieldBase<string,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Weight";}
		set { } 
	}

	public string DFName=> "UKOWeight";

	
	public UKOrder_UKOWeight(UKOrder Parent) : 
		base(Parent, "UKOWeight"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class UKOrder_UKOWeightFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOWeight").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOWeight").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 194;
	}
	public string GetControlName() {
		return "UKOWeightValue";
	}
	public string GetDFName() {
		return "UKOWeight";
	}
	public string GetTitle() {
		return "Weight";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOWeight.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOWeight/?RecId=[[RecId]]',$(this));\" data-bound-name='UKOWeight' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOWeight.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOWeight";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOWeight")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOWeight", "@UKOWeight", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOWeight", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOWeight", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDutyInv : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Duty Inv";}
		set { } 
	}

	public string DFName=> "OrdDutyInv";

	
	public Orders_OrdDutyInv(Orders Parent) : 
		base(Parent, "OrdDutyInv"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdDutyInvFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDutyInv").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDutyInv").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 195;
	}
	public string GetControlName() {
		return "OrdDutyInvValue";
	}
	public string GetDFName() {
		return "OrdDutyInv";
	}
	public string GetTitle() {
		return "Duty Inv";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDutyInv.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDutyInv/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdDutyInv' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDutyInv.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDutyInv";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDutyInv")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDutyInv", "@OrdDutyInv", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDutyInv", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDutyInv", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobAccMonth : 
	DataFieldSelectBase<int,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Accounting Month";}
		set { } 
	}

	public string DFName=> "JobAccMonth";

		public string GetDataSource() {
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobAccMonth").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobAccMonth").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.JobAccMonthAsQuery();		}
		return _DataSource;

	}
    
	public Job_JobAccMonth(Job Parent) : 
		base(Parent, "JobAccMonth"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Job_JobAccMonthFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobAccMonth").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobAccMonth").First().Value(new Job());
		
		
			return DSUtil.JobAccMonthAsQuery();	}

	public int GetFieldUniqueId() {
		return 196;
	}
	public string GetControlName() {
		return "JobAccMonthValue";
	}
	public string GetDFName() {
		return "JobAccMonth";
	}
	public string GetTitle() {
		return "Accounting Month";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobAccMonth.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Job/SaveJobAccMonth/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='JobAccMonth'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobAccMonth.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobAccMonth";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobAccMonth")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobAccMonth", "@JobAccMonth", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobAccMonth", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobAccMonth", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvImpExp : 
	DataFieldSelectBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Import or Export";}
		set { } 
	}

	public string DFName=> "InvImpExp";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvImpExp").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvImpExp").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.InvImpExpAsQuery();		}
		return _DataSource;

	}
    
	public Inv_InvImpExp(Inv Parent) : 
		base(Parent, "InvImpExp"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvImpExpFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvImpExp").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvImpExp").First().Value(new Inv());
		
		
			return DSUtil.InvImpExpAsQuery();	}

	public int GetFieldUniqueId() {
		return 199;
	}
	public string GetControlName() {
		return "InvImpExpValue";
	}
	public string GetDFName() {
		return "InvImpExp";
	}
	public string GetTitle() {
		return "Import or Export";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvImpExp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvImpExp/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvImpExp'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvImpExp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvImpExp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvImpExp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvImpExp", "@InvImpExp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvImpExp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvImpExp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustFTLNotes : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "In House Notes";}
		set { } 
	}

	public string DFName=> "CustFTLNotes";

	
	public Customer_CustFTLNotes(Customer Parent) : 
		base(Parent, "CustFTLNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustFTLNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustFTLNotes").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustFTLNotes").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 200;
	}
	public string GetControlName() {
		return "CustFTLNotesValue";
	}
	public string GetDFName() {
		return "CustFTLNotes";
	}
	public string GetTitle() {
		return "In House Notes";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustFTLNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustFTLNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CustFTLNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustFTLNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustFTLNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustFTLNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustFTLNotes", "@CustFTLNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustFTLNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustFTLNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNId : 
	FormattableDataFieldBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Number";}
		set { } 
	}

	public string DFName=> "CNId";

	
	public CN_CNId(CN Parent) : 
		base(Parent, "CNId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CN_CNIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNId").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNId").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 201;
	}
	public string GetControlName() {
		return "CNIdValue";
	}
	public string GetDFName() {
		return "CNId";
	}
	public string GetTitle() {
		return "Credit Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNId/?RecId=[[RecId]]',$(this));\" data-bound-name='CNId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNId", "@CNId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNImpExp : 
	DataFieldSelectBase<string,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Import or Export";}
		set { } 
	}

	public string DFName=> "CNImpExp";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNImpExp").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNImpExp").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return "select 0 as KeyValue, '' as [Description]";		}
		return _DataSource;

	}
    
	public CN_CNImpExp(CN Parent) : 
		base(Parent, "CNImpExp"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNImpExpFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNImpExp").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNImpExp").First().Value(new CN());
		
		
			return "select 0 as KeyValue, '' as [Description]";	}

	public int GetFieldUniqueId() {
		return 202;
	}
	public string GetControlName() {
		return "CNImpExpValue";
	}
	public string GetDFName() {
		return "CNImpExp";
	}
	public string GetTitle() {
		return "Import or Export";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNImpExp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CN/SaveCNImpExp/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNImpExp'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNImpExp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNImpExp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNImpExp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNImpExp", "@CNImpExp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNImpExp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNImpExp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNJobNo : 
	DataFieldAutoCompleteSingleBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "CNJobNo";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNJobNo").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNJobNo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public CN_CNJobNo(CN Parent) : 
		base(Parent, "CNJobNo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNJobNo").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNJobNo").First().Value(new CN());
		
		
			return  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 203;
	}
	public string GetControlName() {
		return "CNJobNoValue";
	}
	public string GetDFName() {
		return "CNJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/CN/AutoCompleteCNJobNo/' onchange=\"javascript:IQAutoSave('/CN/SaveCNJobNo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='CNJobNo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/CN/AutoCompleteCNJobNo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNJobNo", "@CNJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class CN_CNOrder : 
	DataFieldAutoCompleteSingleBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "CNOrder";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNOrder").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNOrder").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT OrdId AS KeyValue, Cast(OrdId AS varchar(100)) AS Description FROM Orders UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CN_CNOrder(CN Parent) : 
		base(Parent, "CNOrder"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNOrder").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNOrder").First().Value(new CN());
		
		
			return  "SELECT OrdId AS KeyValue, Cast(OrdId AS varchar(100)) AS Description FROM Orders UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 204;
	}
	public string GetControlName() {
		return "CNOrderValue";
	}
	public string GetDFName() {
		return "CNOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/CN/AutoCompleteCNOrder/' onchange=\"javascript:IQAutoSave('/CN/SaveCNOrder/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='CNOrder'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/CN/AutoCompleteCNOrder/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNOrder", "@CNOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class CN_CNVehicle : 
	DataFieldBase<string,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Vehicle";}
		set { } 
	}

	public string DFName=> "CNVehicle";

	
	public CN_CNVehicle(CN Parent) : 
		base(Parent, "CNVehicle"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CN_CNVehicleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNVehicle").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNVehicle").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 205;
	}
	public string GetControlName() {
		return "CNVehicleValue";
	}
	public string GetDFName() {
		return "CNVehicle";
	}
	public string GetTitle() {
		return "Vehicle";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNVehicle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNVehicle/?RecId=[[RecId]]',$(this));\" data-bound-name='CNVehicle' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNVehicle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNVehicle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNVehicle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNVehicle", "@CNVehicle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNVehicle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNVehicle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNTrailer : 
	DataFieldBase<string,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Trailer";}
		set { } 
	}

	public string DFName=> "CNTrailer";

	
	public CN_CNTrailer(CN Parent) : 
		base(Parent, "CNTrailer"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CN_CNTrailerFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTrailer").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTrailer").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 206;
	}
	public string GetControlName() {
		return "CNTrailerValue";
	}
	public string GetDFName() {
		return "CNTrailer";
	}
	public string GetTitle() {
		return "Trailer";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNTrailer.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNTrailer/?RecId=[[RecId]]',$(this));\" data-bound-name='CNTrailer' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNTrailer.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNTrailer";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNTrailer")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNTrailer", "@CNTrailer", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNTrailer", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNTrailer", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNRouteFrom : 
	DataFieldSelectBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route From";}
		set { } 
	}

	public string DFName=> "CNRouteFrom";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteFrom").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteFrom").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CN_CNRouteFrom(CN Parent) : 
		base(Parent, "CNRouteFrom"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNRouteFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteFrom").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteFrom").First().Value(new CN());
		
		
			return  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 207;
	}
	public string GetControlName() {
		return "CNRouteFromValue";
	}
	public string GetDFName() {
		return "CNRouteFrom";
	}
	public string GetTitle() {
		return "Route From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNRouteFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CN/SaveCNRouteFrom/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNRouteFrom'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNRouteFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNRouteFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNRouteFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNRouteFrom", "@CNRouteFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNRouteFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNRouteFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNRouteTo : 
	DataFieldSelectBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route To";}
		set { } 
	}

	public string DFName=> "CNRouteTo";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteTo").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteTo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CN_CNRouteTo(CN Parent) : 
		base(Parent, "CNRouteTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNRouteToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteTo").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNRouteTo").First().Value(new CN());
		
		
			return  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 208;
	}
	public string GetControlName() {
		return "CNRouteToValue";
	}
	public string GetDFName() {
		return "CNRouteTo";
	}
	public string GetTitle() {
		return "Route To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNRouteTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CN/SaveCNRouteTo/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNRouteTo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNRouteTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNRouteTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNRouteTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNRouteTo", "@CNRouteTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNRouteTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNRouteTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNTo : 
	DataFieldAutoCompleteSingleBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit To";}
		set { } 
	}

	public string DFName=> "CNTo";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTo").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CN_CNTo(CN Parent) : 
		base(Parent, "CNTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTo").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTo").First().Value(new CN());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 209;
	}
	public string GetControlName() {
		return "CNToValue";
	}
	public string GetDFName() {
		return "CNTo";
	}
	public string GetTitle() {
		return "Credit To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/CN/AutoCompleteCNTo/' onchange=\"javascript:IQAutoSave('/CN/SaveCNTo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='CNTo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/CN/AutoCompleteCNTo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNTo", "@CNTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Customer_CustSortCode : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sort Code";}
		set { } 
	}

	public string DFName=> "CustSortCode";

	
	public Customer_CustSortCode(Customer Parent) : 
		base(Parent, "CustSortCode"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustSortCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustSortCode").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustSortCode").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 21;
	}
	public string GetControlName() {
		return "CustSortCodeValue";
	}
	public string GetDFName() {
		return "CustSortCode";
	}
	public string GetTitle() {
		return "Sort Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustSortCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustSortCode/?RecId=[[RecId]]',$(this));\" data-bound-name='CustSortCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustSortCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustSortCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustSortCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustSortCode", "@CustSortCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustSortCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustSortCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNToId : 
	FormattableDataFieldBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit To ID";}
		set { } 
	}

	public string DFName=> "CNToId";

	
	public CN_CNToId(CN Parent) : 
		base(Parent, "CNToId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class CN_CNToIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNToId").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNToId").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 210;
	}
	public string GetControlName() {
		return "CNToIdValue";
	}
	public string GetDFName() {
		return "CNToId";
	}
	public string GetTitle() {
		return "Credit To ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNToId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNToId/?RecId=[[RecId]]',$(this));\" data-bound-name='CNToId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNToId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNToId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNToId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNToId", "@CNToId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNToId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNToId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNDesc : 
	DataFieldBase<string,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Description";}
		set { } 
	}

	public string DFName=> "CNDesc";

	
	public CN_CNDesc(CN Parent) : 
		base(Parent, "CNDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CN_CNDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNDesc").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNDesc").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 211;
	}
	public string GetControlName() {
		return "CNDescValue";
	}
	public string GetDFName() {
		return "CNDesc";
	}
	public string GetTitle() {
		return "Credit Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CN/SaveCNDesc/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CNDesc'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNDesc", "@CNDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNNet : 
	FormattableDataFieldBase<double,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Net Amount";}
		set { } 
	}

	public string DFName=> "CNNet";

	
	public CN_CNNet(CN Parent) : 
		base(Parent, "CNNet"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CN_CNNetFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNet").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNet").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 212;
	}
	public string GetControlName() {
		return "CNNetValue";
	}
	public string GetDFName() {
		return "CNNet";
	}
	public string GetTitle() {
		return "Net Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNNet.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNNet/?RecId=[[RecId]]',$(this));\" data-bound-name='CNNet' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNNet.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNNet";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNNet")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNNet", "@CNNet", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNNet", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNNet", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNVAT : 
	FormattableDataFieldBase<double,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Amount";}
		set { } 
	}

	public string DFName=> "CNVAT";

	
	public CN_CNVAT(CN Parent) : 
		base(Parent, "CNVAT"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CN_CNVATFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNVAT").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNVAT").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 213;
	}
	public string GetControlName() {
		return "CNVATValue";
	}
	public string GetDFName() {
		return "CNVAT";
	}
	public string GetTitle() {
		return "VAT Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNVAT.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNVAT/?RecId=[[RecId]]',$(this));\" data-bound-name='CNVAT' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNVAT.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNVAT";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNVAT")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNVAT", "@CNVAT", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNVAT", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNVAT", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNTotal : 
	FormattableDataFieldBase<double,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Total";}
		set { } 
	}

	public string DFName=> "CNTotal";

	
	public CN_CNTotal(CN Parent) : 
		base(Parent, "CNTotal"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CN_CNTotalFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTotal").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNTotal").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 214;
	}
	public string GetControlName() {
		return "CNTotalValue";
	}
	public string GetDFName() {
		return "CNTotal";
	}
	public string GetTitle() {
		return "Credit Total";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNTotal.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNTotal/?RecId=[[RecId]]',$(this));\" data-bound-name='CNTotal' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNTotal.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNTotal";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNTotal")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNTotal", "@CNTotal", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNTotal", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNTotal", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNNote1 : 
	DataFieldSelectBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comment 1";}
		set { } 
	}

	public string DFName=> "CNNote1";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote1").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote1").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CN_CNNote1(CN Parent) : 
		base(Parent, "CNNote1"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNNote1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote1").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote1").First().Value(new CN());
		
		
			return  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 215;
	}
	public string GetControlName() {
		return "CNNote1Value";
	}
	public string GetDFName() {
		return "CNNote1";
	}
	public string GetTitle() {
		return "Comment 1";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNNote1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CN/SaveCNNote1/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNNote1'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNNote1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNNote1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNNote1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNNote1", "@CNNote1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNNote1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNNote1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNNote2 : 
	DataFieldSelectBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comment 2";}
		set { } 
	}

	public string DFName=> "CNNote2";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote2").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote2").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CN_CNNote2(CN Parent) : 
		base(Parent, "CNNote2"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNNote2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote2").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNNote2").First().Value(new CN());
		
		
			return  "SELECT InvCId AS KeyValue, InvCName AS Description FROM InvComment UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 216;
	}
	public string GetControlName() {
		return "CNNote2Value";
	}
	public string GetDFName() {
		return "CNNote2";
	}
	public string GetTitle() {
		return "Comment 2";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNNote2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CN/SaveCNNote2/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNNote2'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNNote2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNNote2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNNote2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNNote2", "@CNNote2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNNote2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNNote2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNDate : 
	DateDataFieldBase<CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Date";}
		set { } 
	}

	public string DFName=> "CNDate";

	
	public CN_CNDate(CN Parent) : 
		base(Parent, "CNDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CN_CNDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNDate").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNDate").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 217;
	}
	public string GetControlName() {
		return "CNDateValue";
	}
	public string GetDFName() {
		return "CNDate";
	}
	public string GetTitle() {
		return "Credit Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/CN/SaveCNDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='CNDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNDate", "@CNDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNPrintBatch : 
	FormattableDataFieldBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Print Batch No";}
		set { } 
	}

	public string DFName=> "CNPrintBatch";

	
	public CN_CNPrintBatch(CN Parent) : 
		base(Parent, "CNPrintBatch"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class CN_CNPrintBatchFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNPrintBatch").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNPrintBatch").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 218;
	}
	public string GetControlName() {
		return "CNPrintBatchValue";
	}
	public string GetDFName() {
		return "CNPrintBatch";
	}
	public string GetTitle() {
		return "Print Batch No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNPrintBatch.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNPrintBatch/?RecId=[[RecId]]',$(this));\" data-bound-name='CNPrintBatch' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNPrintBatch.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNPrintBatch";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNPrintBatch")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNPrintBatch", "@CNPrintBatch", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNPrintBatch", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNPrintBatch", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNJobLetter : 
	DataFieldBase<string,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Letter";}
		set { } 
	}

	public string DFName=> "CNJobLetter";

	
	public CN_CNJobLetter(CN Parent) : 
		base(Parent, "CNJobLetter"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CN_CNJobLetterFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNJobLetter").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNJobLetter").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 219;
	}
	public string GetControlName() {
		return "CNJobLetterValue";
	}
	public string GetDFName() {
		return "CNJobLetter";
	}
	public string GetTitle() {
		return "Job Letter";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNJobLetter.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNJobLetter/?RecId=[[RecId]]',$(this));\" data-bound-name='CNJobLetter' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNJobLetter.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNJobLetter";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNJobLetter")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNJobLetter", "@CNJobLetter", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNJobLetter", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNJobLetter", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustType : 
	DataFieldSelectBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Type";}
		set { } 
	}

	public string DFName=> "CustType";

		public string GetDataSource() {
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustType").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.CustTypeAsQuery();		}
		return _DataSource;

	}
    
	public Customer_CustType(Customer Parent) : 
		base(Parent, "CustType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Customer_CustTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustType").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustType").First().Value(new Customer());
		
		
			return DSUtil.CustTypeAsQuery();	}

	public int GetFieldUniqueId() {
		return 22;
	}
	public string GetControlName() {
		return "CustTypeValue";
	}
	public string GetDFName() {
		return "CustType";
	}
	public string GetTitle() {
		return "Client Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CustType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustType", "@CustType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNToExport : 
	BoolDataFieldBase<CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Send to Dover";}
		set { } 
	}

	public string DFName=> "CNToExport";

	
	public CN_CNToExport(CN Parent) : 
		base(Parent, "CNToExport"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class CN_CNToExportFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNToExport").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNToExport").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 220;
	}
	public string GetControlName() {
		return "CNToExportValue";
	}
	public string GetDFName() {
		return "CNToExport";
	}
	public string GetTitle() {
		return "Send to Dover";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNToExport.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/CN/SaveCNToExport/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CNToExport' [[Val]] /><input type = 'hidden' data-bound-name='CNToExport' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNToExport.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNToExport";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CNToExport")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNToExport", "@CNToExport", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNToExport", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNToExport", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNExported : 
	BoolDataFieldBase<CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sent to Dover";}
		set { } 
	}

	public string DFName=> "CNExported";

	
	public CN_CNExported(CN Parent) : 
		base(Parent, "CNExported"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class CN_CNExportedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNExported").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNExported").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 221;
	}
	public string GetControlName() {
		return "CNExportedValue";
	}
	public string GetDFName() {
		return "CNExported";
	}
	public string GetTitle() {
		return "Sent to Dover";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNExported.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/CN/SaveCNExported/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CNExported' [[Val]] /><input type = 'hidden' data-bound-name='CNExported' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNExported.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNExported";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CNExported")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNExported", "@CNExported", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNExported", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNExported", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNCustOrd : 
	DataFieldBase<string,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Order No";}
		set { } 
	}

	public string DFName=> "CNCustOrd";

	
	public CN_CNCustOrd(CN Parent) : 
		base(Parent, "CNCustOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CN_CNCustOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNCustOrd").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNCustOrd").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 222;
	}
	public string GetControlName() {
		return "CNCustOrdValue";
	}
	public string GetDFName() {
		return "CNCustOrd";
	}
	public string GetTitle() {
		return "Client Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNCustOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNCustOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='CNCustOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNCustOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNCustOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNCustOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNCustOrd", "@CNCustOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNCustOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNCustOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLNo : 
	FormattableDataFieldBase<int,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Number";}
		set { } 
	}

	public string DFName=> "CNLNo";

	
	public CNLine_CNLNo(CNLine Parent) : 
		base(Parent, "CNLNo"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CNLine_CNLNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLNo").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLNo").First().Value(new CNLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 223;
	}
	public string GetControlName() {
		return "CNLNoValue";
	}
	public string GetDFName() {
		return "CNLNo";
	}
	public string GetTitle() {
		return "Credit Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLNo/?RecId=[[RecId]]',$(this));\" data-bound-name='CNLNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLNo", "@CNLNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLLineNo : 
	FormattableDataFieldBase<int,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Number";}
		set { } 
	}

	public string DFName=> "CNLLineNo";

	
	public CNLine_CNLLineNo(CNLine Parent) : 
		base(Parent, "CNLLineNo"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class CNLine_CNLLineNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLLineNo").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLLineNo").First().Value(new CNLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 224;
	}
	public string GetControlName() {
		return "CNLLineNoValue";
	}
	public string GetDFName() {
		return "CNLLineNo";
	}
	public string GetTitle() {
		return "Line Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLLineNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLLineNo/?RecId=[[RecId]]',$(this));\" data-bound-name='CNLLineNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLLineNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLLineNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLLineNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLLineNo", "@CNLLineNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLLineNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLLineNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLDesc : 
	DataFieldBase<string,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "CNLDesc";

	
	public CNLine_CNLDesc(CNLine Parent) : 
		base(Parent, "CNLDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class CNLine_CNLDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLDesc").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLDesc").First().Value(new CNLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 225;
	}
	public string GetControlName() {
		return "CNLDescValue";
	}
	public string GetDFName() {
		return "CNLDesc";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLDesc/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CNLDesc'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLDesc", "@CNLDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLVATCode : 
	DataFieldSelectBase<int,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Code";}
		set { } 
	}

	public string DFName=> "CNLVATCode";

		public string GetDataSource() {
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATCode").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATCode").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT VATId AS KeyValue, VATName AS Description FROM VATCodes UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public CNLine_CNLVATCode(CNLine Parent) : 
		base(Parent, "CNLVATCode"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CNLine_CNLVATCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATCode").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATCode").First().Value(new CNLine());
		
		
			return  "SELECT VATId AS KeyValue, VATName AS Description FROM VATCodes UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 226;
	}
	public string GetControlName() {
		return "CNLVATCodeValue";
	}
	public string GetDFName() {
		return "CNLVATCode";
	}
	public string GetTitle() {
		return "VAT Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLVATCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLVATCode/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNLVATCode'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLVATCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLVATCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLVATCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLVATCode", "@CNLVATCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLVATCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLVATCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLVATRate : 
	DataFieldBase<double,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Rate";}
		set { } 
	}

	public string DFName=> "CNLVATRate";

	
	public CNLine_CNLVATRate(CNLine Parent) : 
		base(Parent, "CNLVATRate"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class CNLine_CNLVATRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATRate").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATRate").First().Value(new CNLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 227;
	}
	public string GetControlName() {
		return "CNLVATRateValue";
	}
	public string GetDFName() {
		return "CNLVATRate";
	}
	public string GetTitle() {
		return "VAT Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLVATRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLVATRate/?RecId=[[RecId]]',$(this));\" data-bound-name='CNLVATRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLVATRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLVATRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLVATRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLVATRate", "@CNLVATRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLVATRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLVATRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLAmt : 
	FormattableDataFieldBase<double,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Amount";}
		set { } 
	}

	public string DFName=> "CNLAmt";

	
	public CNLine_CNLAmt(CNLine Parent) : 
		base(Parent, "CNLAmt"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class CNLine_CNLAmtFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLAmt").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLAmt").First().Value(new CNLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 228;
	}
	public string GetControlName() {
		return "CNLAmtValue";
	}
	public string GetDFName() {
		return "CNLAmt";
	}
	public string GetTitle() {
		return "Line Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLAmt.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLAmt/?RecId=[[RecId]]',$(this));\" data-bound-name='CNLAmt' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLAmt.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLAmt";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLAmt")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLAmt", "@CNLAmt", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLAmt", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLAmt", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLVATAmt : 
	FormattableDataFieldBase<double,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Amount";}
		set { } 
	}

	public string DFName=> "CNLVATAmt";

	
	public CNLine_CNLVATAmt(CNLine Parent) : 
		base(Parent, "CNLVATAmt"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CNLine_CNLVATAmtFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATAmt").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLVATAmt").First().Value(new CNLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 229;
	}
	public string GetControlName() {
		return "CNLVATAmtValue";
	}
	public string GetDFName() {
		return "CNLVATAmt";
	}
	public string GetTitle() {
		return "VAT Amount";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLVATAmt.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLVATAmt/?RecId=[[RecId]]',$(this));\" data-bound-name='CNLVATAmt' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLVATAmt.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLVATAmt";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLVATAmt")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLVATAmt", "@CNLVATAmt", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLVATAmt", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLVATAmt", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustVATNo : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Number";}
		set { } 
	}

	public string DFName=> "CustVATNo";

	
	public Customer_CustVATNo(Customer Parent) : 
		base(Parent, "CustVATNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustVATNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustVATNo").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustVATNo").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 23;
	}
	public string GetControlName() {
		return "CustVATNoValue";
	}
	public string GetDFName() {
		return "CustVATNo";
	}
	public string GetTitle() {
		return "VAT Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustVATNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustVATNo/?RecId=[[RecId]]',$(this));\" data-bound-name='CustVATNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustVATNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustVATNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustVATNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustVATNo", "@CustVATNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustVATNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustVATNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLTotal : 
	FormattableDataFieldBase<double,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Total";}
		set { } 
	}

	public string DFName=> "CNLTotal";

	
	public CNLine_CNLTotal(CNLine Parent) : 
		base(Parent, "CNLTotal"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class CNLine_CNLTotalFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLTotal").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLTotal").First().Value(new CNLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 230;
	}
	public string GetControlName() {
		return "CNLTotalValue";
	}
	public string GetDFName() {
		return "CNLTotal";
	}
	public string GetTitle() {
		return "Line Total";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLTotal.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLTotal/?RecId=[[RecId]]',$(this));\" data-bound-name='CNLTotal' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLTotal.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLTotal";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLTotal")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLTotal", "@CNLTotal", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLTotal", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLTotal", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CNLine_CNLChargeType : 
	DataFieldSelectBase<string,CNLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Charge Type";}
		set { } 
	}

	public string DFName=> "CNLChargeType";

		public string GetDataSource() {
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLChargeType").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLChargeType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return "select 0 as KeyValue, '' as [Description]";		}
		return _DataSource;

	}
    
	public CNLine_CNLChargeType(CNLine Parent) : 
		base(Parent, "CNLChargeType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CNLine_CNLChargeTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLChargeType").Any()) 
			return DS.GetManager<CNLine>().OnDataSource.Where(f=> f.Key == "CNLChargeType").First().Value(new CNLine());
		
		
			return "select 0 as KeyValue, '' as [Description]";	}

	public int GetFieldUniqueId() {
		return 231;
	}
	public string GetControlName() {
		return "CNLChargeTypeValue";
	}
	public string GetDFName() {
		return "CNLChargeType";
	}
	public string GetTitle() {
		return "Charge Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CNLine ds;
					ds = (CNLine)dsI;
		 
		
		return ds.CNLChargeType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CNLine ds;
				ds = (CNLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CNLine/SaveCNLChargeType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNLChargeType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNLChargeType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNLChargeType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNLChargeType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNLChargeType", "@CNLChargeType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNLChargeType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CNLine").GetFieldOperators("CNLChargeType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvId : 
	FormattableDataFieldBase<int,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Driver ID";}
		set { } 
	}

	public string DFName=> "DrvId";

	
	public Driver_DrvId(Driver Parent) : 
		base(Parent, "DrvId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Driver_DrvIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvId").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvId").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 232;
	}
	public string GetControlName() {
		return "DrvIdValue";
	}
	public string GetDFName() {
		return "DrvId";
	}
	public string GetTitle() {
		return "Driver ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvId/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvId", "@DrvId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvName : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Driver Name";}
		set { } 
	}

	public string DFName=> "DrvName";

	
	public Driver_DrvName(Driver Parent) : 
		base(Parent, "DrvName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvName").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvName").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 233;
	}
	public string GetControlName() {
		return "DrvNameValue";
	}
	public string GetDFName() {
		return "DrvName";
	}
	public string GetTitle() {
		return "Driver Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvName/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvName", "@DrvName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvVehicle : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Vehicle Assigned To";}
		set { } 
	}

	public string DFName=> "DrvVehicle";

	
	public Driver_DrvVehicle(Driver Parent) : 
		base(Parent, "DrvVehicle"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvVehicleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvVehicle").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvVehicle").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 234;
	}
	public string GetControlName() {
		return "DrvVehicleValue";
	}
	public string GetDFName() {
		return "DrvVehicle";
	}
	public string GetTitle() {
		return "Vehicle Assigned To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvVehicle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvVehicle/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvVehicle' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvVehicle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvVehicle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvVehicle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvVehicle", "@DrvVehicle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvVehicle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvVehicle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustDANNo : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "DAN Number";}
		set { } 
	}

	public string DFName=> "CustDANNo";

	
	public Customer_CustDANNo(Customer Parent) : 
		base(Parent, "CustDANNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustDANNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDANNo").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDANNo").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 24;
	}
	public string GetControlName() {
		return "CustDANNoValue";
	}
	public string GetDFName() {
		return "CustDANNo";
	}
	public string GetTitle() {
		return "DAN Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustDANNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustDANNo/?RecId=[[RecId]]',$(this));\" data-bound-name='CustDANNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustDANNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustDANNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustDANNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustDANNo", "@CustDANNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustDANNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustDANNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOInvoiced : 
	BoolDataFieldBase<UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoiced";}
		set { } 
	}

	public string DFName=> "UKOInvoiced";

	
	public UKOrder_UKOInvoiced(UKOrder Parent) : 
		base(Parent, "UKOInvoiced"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class UKOrder_UKOInvoicedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOInvoiced").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOInvoiced").First().Value(new UKOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 240;
	}
	public string GetControlName() {
		return "UKOInvoicedValue";
	}
	public string GetDFName() {
		return "UKOInvoiced";
	}
	public string GetTitle() {
		return "Invoiced";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOInvoiced.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOInvoiced/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='UKOInvoiced' [[Val]] /><input type = 'hidden' data-bound-name='UKOInvoiced' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOInvoiced.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOInvoiced";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "UKOInvoiced")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOInvoiced", "@UKOInvoiced", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOInvoiced", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOInvoiced", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobChecked : 
	BoolDataFieldBase<Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Checked";}
		set { } 
	}

	public string DFName=> "JobChecked";

	
	public Job_JobChecked(Job Parent) : 
		base(Parent, "JobChecked"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Job_JobCheckedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobChecked").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobChecked").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 241;
	}
	public string GetControlName() {
		return "JobCheckedValue";
	}
	public string GetDFName() {
		return "JobChecked";
	}
	public string GetTitle() {
		return "Checked";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobChecked.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Job/SaveJobChecked/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='JobChecked' [[Val]] /><input type = 'hidden' data-bound-name='JobChecked' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobChecked.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobChecked";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "JobChecked")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobChecked", "@JobChecked", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobChecked", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobChecked", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvAddr : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Inv Co Address1";}
		set { } 
	}

	public string DFName=> "InvAddr";

	
	public Inv_InvAddr(Inv Parent) : 
		base(Parent, "InvAddr"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Inv_InvAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvAddr").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvAddr").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 242;
	}
	public string GetControlName() {
		return "InvAddrValue";
	}
	public string GetDFName() {
		return "InvAddr";
	}
	public string GetTitle() {
		return "Inv Co Address1";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvAddr/?RecId=[[RecId]]',$(this));\" data-bound-name='InvAddr' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvAddr", "@InvAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvTown : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Inv Co Town";}
		set { } 
	}

	public string DFName=> "InvTown";

	
	public Inv_InvTown(Inv Parent) : 
		base(Parent, "InvTown"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Inv_InvTownFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTown").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTown").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 243;
	}
	public string GetControlName() {
		return "InvTownValue";
	}
	public string GetDFName() {
		return "InvTown";
	}
	public string GetTitle() {
		return "Inv Co Town";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvTown.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvTown/?RecId=[[RecId]]',$(this));\" data-bound-name='InvTown' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvTown.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvTown";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvTown")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvTown", "@InvTown", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvTown", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvTown", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvPC : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Inv Co Postcode";}
		set { } 
	}

	public string DFName=> "InvPC";

	
	public Inv_InvPC(Inv Parent) : 
		base(Parent, "InvPC"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Inv_InvPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvPC").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvPC").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 244;
	}
	public string GetControlName() {
		return "InvPCValue";
	}
	public string GetDFName() {
		return "InvPC";
	}
	public string GetTitle() {
		return "Inv Co Postcode";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvPC/?RecId=[[RecId]]',$(this));\" data-bound-name='InvPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvPC", "@InvPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdPriceAllowed : 
	FormattableDataFieldBase<double,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Price Allowed";}
		set { } 
	}

	public string DFName=> "OrdPriceAllowed";

	
	public Orders_OrdPriceAllowed(Orders Parent) : 
		base(Parent, "OrdPriceAllowed"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Orders_OrdPriceAllowedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdPriceAllowed").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdPriceAllowed").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 245;
	}
	public string GetControlName() {
		return "OrdPriceAllowedValue";
	}
	public string GetDFName() {
		return "OrdPriceAllowed";
	}
	public string GetTitle() {
		return "Price Allowed";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdPriceAllowed.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdPriceAllowed/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdPriceAllowed' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdPriceAllowed.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdPriceAllowed";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdPriceAllowed")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdPriceAllowed", "@OrdPriceAllowed", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdPriceAllowed", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdPriceAllowed", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdReqdChanged : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Reqd Changed";}
		set { } 
	}

	public string DFName=> "OrdReqdChanged";

	
	public Orders_OrdReqdChanged(Orders Parent) : 
		base(Parent, "OrdReqdChanged"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdReqdChangedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdReqdChanged").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdReqdChanged").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 246;
	}
	public string GetControlName() {
		return "OrdReqdChangedValue";
	}
	public string GetDFName() {
		return "OrdReqdChanged";
	}
	public string GetTitle() {
		return "Reqd Changed";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdReqdChanged.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdReqdChanged/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdReqdChanged' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdReqdChanged.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdReqdChanged";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdReqdChanged")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdReqdChanged", "@OrdReqdChanged", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdReqdChanged", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdReqdChanged", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdAvailChanged : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Available Changed";}
		set { } 
	}

	public string DFName=> "OrdAvailChanged";

	
	public Orders_OrdAvailChanged(Orders Parent) : 
		base(Parent, "OrdAvailChanged"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdAvailChangedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAvailChanged").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAvailChanged").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 247;
	}
	public string GetControlName() {
		return "OrdAvailChangedValue";
	}
	public string GetDFName() {
		return "OrdAvailChanged";
	}
	public string GetTitle() {
		return "Available Changed";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdAvailChanged.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdAvailChanged/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdAvailChanged' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdAvailChanged.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdAvailChanged";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdAvailChanged")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdAvailChanged", "@OrdAvailChanged", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdAvailChanged", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdAvailChanged", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCollChanged : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collected Changed";}
		set { } 
	}

	public string DFName=> "OrdCollChanged";

	
	public Orders_OrdCollChanged(Orders Parent) : 
		base(Parent, "OrdCollChanged"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdCollChangedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollChanged").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollChanged").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 248;
	}
	public string GetControlName() {
		return "OrdCollChangedValue";
	}
	public string GetDFName() {
		return "OrdCollChanged";
	}
	public string GetTitle() {
		return "Collected Changed";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCollChanged.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCollChanged/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCollChanged' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCollChanged.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCollChanged";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCollChanged")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCollChanged", "@OrdCollChanged", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCollChanged", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCollChanged", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDelChanged : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivered Changed";}
		set { } 
	}

	public string DFName=> "OrdDelChanged";

	
	public Orders_OrdDelChanged(Orders Parent) : 
		base(Parent, "OrdDelChanged"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdDelChangedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelChanged").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelChanged").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 249;
	}
	public string GetControlName() {
		return "OrdDelChangedValue";
	}
	public string GetDFName() {
		return "OrdDelChanged";
	}
	public string GetTitle() {
		return "Delivered Changed";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDelChanged.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDelChanged/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdDelChanged' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDelChanged.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDelChanged";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDelChanged")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDelChanged", "@OrdDelChanged", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDelChanged", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDelChanged", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustBondCode : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "REDS / Bond Code";}
		set { } 
	}

	public string DFName=> "CustBondCode";

	
	public Customer_CustBondCode(Customer Parent) : 
		base(Parent, "CustBondCode"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustBondCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustBondCode").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustBondCode").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 25;
	}
	public string GetControlName() {
		return "CustBondCodeValue";
	}
	public string GetDFName() {
		return "CustBondCode";
	}
	public string GetTitle() {
		return "REDS / Bond Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustBondCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustBondCode/?RecId=[[RecId]]',$(this));\" data-bound-name='CustBondCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustBondCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustBondCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustBondCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustBondCode", "@CustBondCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustBondCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustBondCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustOnFTrack : 
	BoolDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "On FreightTrack";}
		set { } 
	}

	public string DFName=> "CustOnFTrack";

	
	public Customer_CustOnFTrack(Customer Parent) : 
		base(Parent, "CustOnFTrack"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("False");
				    }
}


public partial class Customer_CustOnFTrackFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustOnFTrack").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustOnFTrack").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 250;
	}
	public string GetControlName() {
		return "CustOnFTrackValue";
	}
	public string GetDFName() {
		return "CustOnFTrack";
	}
	public string GetTitle() {
		return "On FreightTrack";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustOnFTrack.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Customer/SaveCustOnFTrack/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CustOnFTrack' [[Val]] /><input type = 'hidden' data-bound-name='CustOnFTrack' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustOnFTrack.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustOnFTrack";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CustOnFTrack")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustOnFTrack", "@CustOnFTrack", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustOnFTrack", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustOnFTrack", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNDutyCN : 
	BoolDataFieldBase<CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Duty CN";}
		set { } 
	}

	public string DFName=> "CNDutyCN";

	
	public CN_CNDutyCN(CN Parent) : 
		base(Parent, "CNDutyCN"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class CN_CNDutyCNFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNDutyCN").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNDutyCN").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 251;
	}
	public string GetControlName() {
		return "CNDutyCNValue";
	}
	public string GetDFName() {
		return "CNDutyCN";
	}
	public string GetTitle() {
		return "Duty CN";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNDutyCN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/CN/SaveCNDutyCN/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CNDutyCN' [[Val]] /><input type = 'hidden' data-bound-name='CNDutyCN' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNDutyCN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNDutyCN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CNDutyCN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNDutyCN", "@CNDutyCN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNDutyCN", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNDutyCN", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvCurr : 
	DataFieldSelectBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Currency";}
		set { } 
	}

	public string DFName=> "InvCurr";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvCurr").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvCurr").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return "select 0 as KeyValue, '' as [Description]";		}
		return _DataSource;

	}
    
	public Inv_InvCurr(Inv Parent) : 
		base(Parent, "InvCurr"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("1");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvCurrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvCurr").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvCurr").First().Value(new Inv());
		
		
			return "select 0 as KeyValue, '' as [Description]";	}

	public int GetFieldUniqueId() {
		return 252;
	}
	public string GetControlName() {
		return "InvCurrValue";
	}
	public string GetDFName() {
		return "InvCurr";
	}
	public string GetTitle() {
		return "Currency";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvCurr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvCurr/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvCurr'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvCurr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvCurr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvCurr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvCurr", "@InvCurr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvCurr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvCurr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvExchRate : 
	FormattableDataFieldBase<double,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Exchange Rate";}
		set { } 
	}

	public string DFName=> "InvExchRate";

	
	public Inv_InvExchRate(Inv Parent) : 
		base(Parent, "InvExchRate"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("1");
				    }
}


public partial class Inv_InvExchRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvExchRate").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvExchRate").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 253;
	}
	public string GetControlName() {
		return "InvExchRateValue";
	}
	public string GetDFName() {
		return "InvExchRate";
	}
	public string GetTitle() {
		return "Exchange Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvExchRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvExchRate/?RecId=[[RecId]]',$(this));\" data-bound-name='InvExchRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvExchRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvExchRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvExchRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvExchRate", "@InvExchRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvExchRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvExchRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ExchRate_ExRId : 
	FormattableDataFieldBase<int,ExchRate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Period Rate ID";}
		set { } 
	}

	public string DFName=> "ExRId";

	
	public ExchRate_ExRId(ExchRate Parent) : 
		base(Parent, "ExRId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class ExchRate_ExRIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRId").Any()) 
			return DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRId").First().Value(new ExchRate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 254;
	}
	public string GetControlName() {
		return "ExRIdValue";
	}
	public string GetDFName() {
		return "ExRId";
	}
	public string GetTitle() {
		return "Period Rate ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ExchRate ds;
					ds = (ExchRate)dsI;
		 
		
		return ds.ExRId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ExchRate ds;
				ds = (ExchRate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ExchRate/SaveExRId/?RecId=[[RecId]]',$(this));\" data-bound-name='ExRId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ExRId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ExRId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ExRId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ExRId", "@ExRId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ExRId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ExchRate").GetFieldOperators("ExRId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ExchRate_ExRName : 
	DataFieldBase<string,ExchRate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Period Rate";}
		set { } 
	}

	public string DFName=> "ExRName";

	
	public ExchRate_ExRName(ExchRate Parent) : 
		base(Parent, "ExRName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ExchRate_ExRNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRName").Any()) 
			return DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRName").First().Value(new ExchRate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 255;
	}
	public string GetControlName() {
		return "ExRNameValue";
	}
	public string GetDFName() {
		return "ExRName";
	}
	public string GetTitle() {
		return "Period Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ExchRate ds;
					ds = (ExchRate)dsI;
		 
		
		return ds.ExRName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ExchRate ds;
				ds = (ExchRate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ExchRate/SaveExRName/?RecId=[[RecId]]',$(this));\" data-bound-name='ExRName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ExRName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ExRName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ExRName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ExRName", "@ExRName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ExRName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ExchRate").GetFieldOperators("ExRName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ExchRate_ExRRate : 
	FormattableDataFieldBase<double,ExchRate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Rate";}
		set { } 
	}

	public string DFName=> "ExRRate";

	
	public ExchRate_ExRRate(ExchRate Parent) : 
		base(Parent, "ExRRate"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ExchRate_ExRRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRRate").Any()) 
			return DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRRate").First().Value(new ExchRate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 256;
	}
	public string GetControlName() {
		return "ExRRateValue";
	}
	public string GetDFName() {
		return "ExRRate";
	}
	public string GetTitle() {
		return "Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ExchRate ds;
					ds = (ExchRate)dsI;
		 
		
		return ds.ExRRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ExchRate ds;
				ds = (ExchRate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ExchRate/SaveExRRate/?RecId=[[RecId]]',$(this));\" data-bound-name='ExRRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ExRRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ExRRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ExRRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ExRRate", "@ExRRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ExRRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ExchRate").GetFieldOperators("ExRRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNCurr : 
	DataFieldSelectBase<int,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Currency";}
		set { } 
	}

	public string DFName=> "CNCurr";

		public string GetDataSource() {
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNCurr").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNCurr").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return "select 0 as KeyValue, '' as [Description]";		}
		return _DataSource;

	}
    
	public CN_CNCurr(CN Parent) : 
		base(Parent, "CNCurr"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("1");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class CN_CNCurrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNCurr").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNCurr").First().Value(new CN());
		
		
			return "select 0 as KeyValue, '' as [Description]";	}

	public int GetFieldUniqueId() {
		return 257;
	}
	public string GetControlName() {
		return "CNCurrValue";
	}
	public string GetDFName() {
		return "CNCurr";
	}
	public string GetTitle() {
		return "Currency";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNCurr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/CN/SaveCNCurr/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CNCurr'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNCurr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNCurr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNCurr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNCurr", "@CNCurr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNCurr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNCurr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class CN_CNExchRate : 
	FormattableDataFieldBase<double,CN>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Exchange Rate";}
		set { } 
	}

	public string DFName=> "CNExchRate";

	
	public CN_CNExchRate(CN Parent) : 
		base(Parent, "CNExchRate"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("1");
				    }
}


public partial class CN_CNExchRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNExchRate").Any()) 
			return DS.GetManager<CN>().OnDataSource.Where(f=> f.Key == "CNExchRate").First().Value(new CN());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 258;
	}
	public string GetControlName() {
		return "CNExchRateValue";
	}
	public string GetDFName() {
		return "CNExchRate";
	}
	public string GetTitle() {
		return "Exchange Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		CN ds;
					ds = (CN)dsI;
		 
		
		return ds.CNExchRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		CN ds;
				ds = (CN)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/CN/SaveCNExchRate/?RecId=[[RecId]]',$(this));\" data-bound-name='CNExchRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CNExchRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CNExchRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CNExchRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CNExchRate", "@CNExchRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CNExchRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("CN").GetFieldOperators("CNExchRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlFleetNo : 
	DataFieldBase<string,Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Fleet Number";}
		set { } 
	}

	public string DFName=> "TrlFleetNo";

	
	public Trailer_TrlFleetNo(Trailer Parent) : 
		base(Parent, "TrlFleetNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Trailer_TrlFleetNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlFleetNo").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlFleetNo").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 259;
	}
	public string GetControlName() {
		return "TrlFleetNoValue";
	}
	public string GetDFName() {
		return "TrlFleetNo";
	}
	public string GetTitle() {
		return "Fleet Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlFleetNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlFleetNo/?RecId=[[RecId]]',$(this));\" data-bound-name='TrlFleetNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlFleetNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlFleetNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlFleetNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlFleetNo", "@TrlFleetNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlFleetNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlFleetNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustIntrastat : 
	BoolDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Intrastat";}
		set { } 
	}

	public string DFName=> "CustIntrastat";

	
	public Customer_CustIntrastat(Customer Parent) : 
		base(Parent, "CustIntrastat"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Customer_CustIntrastatFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustIntrastat").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustIntrastat").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 26;
	}
	public string GetControlName() {
		return "CustIntrastatValue";
	}
	public string GetDFName() {
		return "CustIntrastat";
	}
	public string GetTitle() {
		return "Intrastat";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustIntrastat.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Customer/SaveCustIntrastat/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CustIntrastat' [[Val]] /><input type = 'hidden' data-bound-name='CustIntrastat' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustIntrastat.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustIntrastat";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CustIntrastat")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustIntrastat", "@CustIntrastat", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustIntrastat", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustIntrastat", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlLastServ : 
	DateDataFieldBase<Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Last Service";}
		set { } 
	}

	public string DFName=> "TrlLastServ";

	
	public Trailer_TrlLastServ(Trailer Parent) : 
		base(Parent, "TrlLastServ"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Trailer_TrlLastServFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlLastServ").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlLastServ").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 260;
	}
	public string GetControlName() {
		return "TrlLastServValue";
	}
	public string GetDFName() {
		return "TrlLastServ";
	}
	public string GetTitle() {
		return "Last Service";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlLastServ.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlLastServ/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='TrlLastServ' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlLastServ.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlLastServ";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlLastServ")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlLastServ", "@TrlLastServ", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlLastServ", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlLastServ", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlNextServDue : 
	DateDataFieldBase<Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Next Service Due";}
		set { } 
	}

	public string DFName=> "TrlNextServDue";

	
	public Trailer_TrlNextServDue(Trailer Parent) : 
		base(Parent, "TrlNextServDue"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Trailer_TrlNextServDueFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlNextServDue").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlNextServDue").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 261;
	}
	public string GetControlName() {
		return "TrlNextServDueValue";
	}
	public string GetDFName() {
		return "TrlNextServDue";
	}
	public string GetTitle() {
		return "Next Service Due";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlNextServDue.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlNextServDue/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='TrlNextServDue' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlNextServDue.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlNextServDue";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlNextServDue")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlNextServDue", "@TrlNextServDue", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlNextServDue", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlNextServDue", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlDaysRem : 
	FormattableDataFieldBase<int,Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Days Remaining";}
		set { } 
	}

	public string DFName=> "TrlDaysRem";

	
	public Trailer_TrlDaysRem(Trailer Parent) : 
		base(Parent, "TrlDaysRem"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Trailer_TrlDaysRemFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlDaysRem").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlDaysRem").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 262;
	}
	public string GetControlName() {
		return "TrlDaysRemValue";
	}
	public string GetDFName() {
		return "TrlDaysRem";
	}
	public string GetTitle() {
		return "Days Remaining";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlDaysRem.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlDaysRem/?RecId=[[RecId]]',$(this));\" data-bound-name='TrlDaysRem' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlDaysRem.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlDaysRem";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlDaysRem")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlDaysRem", "@TrlDaysRem", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlDaysRem", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlDaysRem", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlLastMOT : 
	DateDataFieldBase<Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Last MOT";}
		set { } 
	}

	public string DFName=> "TrlLastMOT";

	
	public Trailer_TrlLastMOT(Trailer Parent) : 
		base(Parent, "TrlLastMOT"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Trailer_TrlLastMOTFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlLastMOT").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlLastMOT").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 263;
	}
	public string GetControlName() {
		return "TrlLastMOTValue";
	}
	public string GetDFName() {
		return "TrlLastMOT";
	}
	public string GetTitle() {
		return "Last MOT";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlLastMOT.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlLastMOT/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='TrlLastMOT' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlLastMOT.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlLastMOT";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlLastMOT")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlLastMOT", "@TrlLastMOT", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlLastMOT", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlLastMOT", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlNextMOTDue : 
	DateDataFieldBase<Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Next MOT Due";}
		set { } 
	}

	public string DFName=> "TrlNextMOTDue";

	
	public Trailer_TrlNextMOTDue(Trailer Parent) : 
		base(Parent, "TrlNextMOTDue"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Trailer_TrlNextMOTDueFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlNextMOTDue").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlNextMOTDue").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 264;
	}
	public string GetControlName() {
		return "TrlNextMOTDueValue";
	}
	public string GetDFName() {
		return "TrlNextMOTDue";
	}
	public string GetTitle() {
		return "Next MOT Due";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlNextMOTDue.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlNextMOTDue/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='TrlNextMOTDue' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlNextMOTDue.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlNextMOTDue";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlNextMOTDue")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlNextMOTDue", "@TrlNextMOTDue", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlNextMOTDue", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlNextMOTDue", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlStatus : 
	DataFieldBase<string,Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Status";}
		set { } 
	}

	public string DFName=> "TrlStatus";

	
	public Trailer_TrlStatus(Trailer Parent) : 
		base(Parent, "TrlStatus"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Trailer_TrlStatusFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlStatus").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlStatus").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 265;
	}
	public string GetControlName() {
		return "TrlStatusValue";
	}
	public string GetDFName() {
		return "TrlStatus";
	}
	public string GetTitle() {
		return "Status";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlStatus.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlStatus/?RecId=[[RecId]]',$(this));\" data-bound-name='TrlStatus' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlStatus.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlStatus";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlStatus")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlStatus", "@TrlStatus", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlStatus", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlStatus", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlNotes : 
	DataFieldBase<string,Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comments";}
		set { } 
	}

	public string DFName=> "TrlNotes";

	
	public Trailer_TrlNotes(Trailer Parent) : 
		base(Parent, "TrlNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Trailer_TrlNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlNotes").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlNotes").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 266;
	}
	public string GetControlName() {
		return "TrlNotesValue";
	}
	public string GetDFName() {
		return "TrlNotes";
	}
	public string GetTitle() {
		return "Comments";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='TrlNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlNotes", "@TrlNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdTescoRef : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Tesco Ref";}
		set { } 
	}

	public string DFName=> "OrdTescoRef";

	
	public Orders_OrdTescoRef(Orders Parent) : 
		base(Parent, "OrdTescoRef"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdTescoRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdTescoRef").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdTescoRef").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 267;
	}
	public string GetControlName() {
		return "OrdTescoRefValue";
	}
	public string GetDFName() {
		return "OrdTescoRef";
	}
	public string GetTitle() {
		return "Tesco Ref";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdTescoRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdTescoRef/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdTescoRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdTescoRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdTescoRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdTescoRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdTescoRef", "@OrdTescoRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdTescoRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdTescoRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvTescoRef : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Tesco Ref";}
		set { } 
	}

	public string DFName=> "InvTescoRef";

	
	public Inv_InvTescoRef(Inv Parent) : 
		base(Parent, "InvTescoRef"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Inv_InvTescoRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTescoRef").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTescoRef").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 268;
	}
	public string GetControlName() {
		return "InvTescoRefValue";
	}
	public string GetDFName() {
		return "InvTescoRef";
	}
	public string GetTitle() {
		return "Tesco Ref";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvTescoRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvTescoRef/?RecId=[[RecId]]',$(this));\" data-bound-name='InvTescoRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvTescoRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvTescoRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvTescoRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvTescoRef", "@InvTescoRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvTescoRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvTescoRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvBelongsPInv : 
	FormattableDataFieldBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Belongs to P Inv";}
		set { } 
	}

	public string DFName=> "InvBelongsPInv";

	
	public Inv_InvBelongsPInv(Inv Parent) : 
		base(Parent, "InvBelongsPInv"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Inv_InvBelongsPInvFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvBelongsPInv").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvBelongsPInv").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 269;
	}
	public string GetControlName() {
		return "InvBelongsPInvValue";
	}
	public string GetDFName() {
		return "InvBelongsPInv";
	}
	public string GetTitle() {
		return "Belongs to P Inv";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvBelongsPInv.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvBelongsPInv/?RecId=[[RecId]]',$(this));\" data-bound-name='InvBelongsPInv' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvBelongsPInv.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvBelongsPInv";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvBelongsPInv")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvBelongsPInv", "@InvBelongsPInv", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvBelongsPInv", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvBelongsPInv", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCurr : 
	DataFieldSelectBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Currency";}
		set { } 
	}

	public string DFName=> "CustCurr";

		public string GetDataSource() {
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCurr").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCurr").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.CustCurrAsQuery();		}
		return _DataSource;

	}
    
	public Customer_CustCurr(Customer Parent) : 
		base(Parent, "CustCurr"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Customer_CustCurrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCurr").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCurr").First().Value(new Customer());
		
		
			return DSUtil.CustCurrAsQuery();	}

	public int GetFieldUniqueId() {
		return 27;
	}
	public string GetControlName() {
		return "CustCurrValue";
	}
	public string GetDFName() {
		return "CustCurr";
	}
	public string GetTitle() {
		return "Currency";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCurr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCurr/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CustCurr'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCurr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCurr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCurr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCurr", "@CustCurr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCurr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCurr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvISPInv : 
	BoolDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Is Period Invoice";}
		set { } 
	}

	public string DFName=> "InvISPInv";

	
	public Inv_InvISPInv(Inv Parent) : 
		base(Parent, "InvISPInv"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Inv_InvISPInvFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvISPInv").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvISPInv").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 270;
	}
	public string GetControlName() {
		return "InvISPInvValue";
	}
	public string GetDFName() {
		return "InvISPInv";
	}
	public string GetTitle() {
		return "Is Period Invoice";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvISPInv.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Inv/SaveInvISPInv/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='InvISPInv' [[Val]] /><input type = 'hidden' data-bound-name='InvISPInv' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvISPInv.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvISPInv";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "InvISPInv")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvISPInv", "@InvISPInv", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvISPInv", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvISPInv", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class PeriodInv_PInvId : 
	FormattableDataFieldBase<int,PeriodInv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Period Inv No";}
		set { } 
	}

	public string DFName=> "PInvId";

	
	public PeriodInv_PInvId(PeriodInv Parent) : 
		base(Parent, "PInvId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class PeriodInv_PInvIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<PeriodInv>().OnDataSource.Where(f=> f.Key == "PInvId").Any()) 
			return DS.GetManager<PeriodInv>().OnDataSource.Where(f=> f.Key == "PInvId").First().Value(new PeriodInv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 271;
	}
	public string GetControlName() {
		return "PInvIdValue";
	}
	public string GetDFName() {
		return "PInvId";
	}
	public string GetTitle() {
		return "Period Inv No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		PeriodInv ds;
					ds = (PeriodInv)dsI;
		 
		
		return ds.PInvId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		PeriodInv ds;
				ds = (PeriodInv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/PeriodInv/SavePInvId/?RecId=[[RecId]]',$(this));\" data-bound-name='PInvId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.PInvId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "PInvId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "PInvId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "PInvId", "@PInvId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "PInvId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("PeriodInv").GetFieldOperators("PInvId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class PeriodInv_PInvName : 
	FormattableDataFieldBase<int,PeriodInv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Include Invoice";}
		set { } 
	}

	public string DFName=> "PInvName";

	
	public PeriodInv_PInvName(PeriodInv Parent) : 
		base(Parent, "PInvName"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class PeriodInv_PInvNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<PeriodInv>().OnDataSource.Where(f=> f.Key == "PInvName").Any()) 
			return DS.GetManager<PeriodInv>().OnDataSource.Where(f=> f.Key == "PInvName").First().Value(new PeriodInv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 272;
	}
	public string GetControlName() {
		return "PInvNameValue";
	}
	public string GetDFName() {
		return "PInvName";
	}
	public string GetTitle() {
		return "Include Invoice";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		PeriodInv ds;
					ds = (PeriodInv)dsI;
		 
		
		return ds.PInvName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		PeriodInv ds;
				ds = (PeriodInv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/PeriodInv/SavePInvName/?RecId=[[RecId]]',$(this));\" data-bound-name='PInvName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.PInvName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "PInvName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "PInvName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "PInvName", "@PInvName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "PInvName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("PeriodInv").GetFieldOperators("PInvName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvSDate : 
	DataFieldSelectBase<int,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Start Date";}
		set { } 
	}

	public string DFName=> "DrvSDate";

		public string GetDataSource() {
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvSDate").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvSDate").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT WkId AS KeyValue, WkSDateText AS Description FROM Week UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public Driver_DrvSDate(Driver Parent) : 
		base(Parent, "DrvSDate"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Driver_DrvSDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvSDate").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvSDate").First().Value(new Driver());
		
		
			return  "SELECT WkId AS KeyValue, WkSDateText AS Description FROM Week UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 273;
	}
	public string GetControlName() {
		return "DrvSDateValue";
	}
	public string GetDFName() {
		return "DrvSDate";
	}
	public string GetTitle() {
		return "Start Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvSDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvSDate/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='DrvSDate'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvSDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvSDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvSDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvSDate", "@DrvSDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvSDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvSDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DriverHrs_DrvHDriver : 
	DataFieldAutoCompleteSingleBase<int,DriverHrs>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Driver";}
		set { } 
	}

	public string DFName=> "DrvHDriver";

		public string GetDataSource() {
		if(DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHDriver").Any()) 
			return DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHDriver").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT DrvId AS KeyValue, DrvName AS Description FROM Driver UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public DriverHrs_DrvHDriver(DriverHrs Parent) : 
		base(Parent, "DrvHDriver"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class DriverHrs_DrvHDriverFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHDriver").Any()) 
			return DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHDriver").First().Value(new DriverHrs());
		
		
			return  "SELECT DrvId AS KeyValue, DrvName AS Description FROM Driver UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 276;
	}
	public string GetControlName() {
		return "DrvHDriverValue";
	}
	public string GetDFName() {
		return "DrvHDriver";
	}
	public string GetTitle() {
		return "Driver";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DriverHrs ds;
					ds = (DriverHrs)dsI;
		 
		
		return ds.DrvHDriver.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DriverHrs ds;
				ds = (DriverHrs)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/DriverHrs/AutoCompleteDrvHDriver/' onchange=\"javascript:IQAutoSave('/DriverHrs/SaveDrvHDriver/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='DrvHDriver'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvHDriver.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvHDriver";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/DriverHrs/AutoCompleteDrvHDriver/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvHDriver")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvHDriver", "@DrvHDriver", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvHDriver", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DriverHrs").GetFieldOperators("DrvHDriver", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class DriverHrs_DrvHWk : 
	DataFieldSelectBase<int,DriverHrs>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Week";}
		set { } 
	}

	public string DFName=> "DrvHWk";

		public string GetDataSource() {
		if(DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHWk").Any()) 
			return DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHWk").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT WkId AS KeyValue, WkSDateText AS Description FROM Week UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public DriverHrs_DrvHWk(DriverHrs Parent) : 
		base(Parent, "DrvHWk"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class DriverHrs_DrvHWkFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHWk").Any()) 
			return DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHWk").First().Value(new DriverHrs());
		
		
			return  "SELECT WkId AS KeyValue, WkSDateText AS Description FROM Week UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 277;
	}
	public string GetControlName() {
		return "DrvHWkValue";
	}
	public string GetDFName() {
		return "DrvHWk";
	}
	public string GetTitle() {
		return "Week";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DriverHrs ds;
					ds = (DriverHrs)dsI;
		 
		
		return ds.DrvHWk.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DriverHrs ds;
				ds = (DriverHrs)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/DriverHrs/SaveDrvHWk/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='DrvHWk'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvHWk.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvHWk";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvHWk")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvHWk", "@DrvHWk", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvHWk", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DriverHrs").GetFieldOperators("DrvHWk", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DriverHrs_DrvHHrs : 
	FormattableDataFieldBase<double,DriverHrs>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Hours";}
		set { } 
	}

	public string DFName=> "DrvHHrs";

	
	public DriverHrs_DrvHHrs(DriverHrs Parent) : 
		base(Parent, "DrvHHrs"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class DriverHrs_DrvHHrsFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHHrs").Any()) 
			return DS.GetManager<DriverHrs>().OnDataSource.Where(f=> f.Key == "DrvHHrs").First().Value(new DriverHrs());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 278;
	}
	public string GetControlName() {
		return "DrvHHrsValue";
	}
	public string GetDFName() {
		return "DrvHHrs";
	}
	public string GetTitle() {
		return "Hours";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DriverHrs ds;
					ds = (DriverHrs)dsI;
		 
		
		return ds.DrvHHrs.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DriverHrs ds;
				ds = (DriverHrs)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/DriverHrs/SaveDrvHHrs/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvHHrs' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvHHrs.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvHHrs";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvHHrs")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvHHrs", "@DrvHHrs", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvHHrs", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DriverHrs").GetFieldOperators("DrvHHrs", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Week_WkId : 
	FormattableDataFieldBase<int,Week>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Week ID";}
		set { } 
	}

	public string DFName=> "WkId";

	
	public Week_WkId(Week Parent) : 
		base(Parent, "WkId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Week_WkIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkId").Any()) 
			return DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkId").First().Value(new Week());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 279;
	}
	public string GetControlName() {
		return "WkIdValue";
	}
	public string GetDFName() {
		return "WkId";
	}
	public string GetTitle() {
		return "Week ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Week ds;
					ds = (Week)dsI;
		 
		
		return ds.WkId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Week ds;
				ds = (Week)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Week/SaveWkId/?RecId=[[RecId]]',$(this));\" data-bound-name='WkId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WkId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WkId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WkId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WkId", "@WkId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WkId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Week").GetFieldOperators("WkId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustRates : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Rates";}
		set { } 
	}

	public string DFName=> "CustRates";

	
	public Customer_CustRates(Customer Parent) : 
		base(Parent, "CustRates"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustRatesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustRates").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustRates").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 28;
	}
	public string GetControlName() {
		return "CustRatesValue";
	}
	public string GetDFName() {
		return "CustRates";
	}
	public string GetTitle() {
		return "Rates";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustRates.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "[[Val]]";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustRates.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustRates";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustRates")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustRates", "@CustRates", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustRates", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustRates", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Week_WkSDate : 
	DateDataFieldBase<Week>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Week Start (Mon)";}
		set { } 
	}

	public string DFName=> "WkSDate";

	
	public Week_WkSDate(Week Parent) : 
		base(Parent, "WkSDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Week_WkSDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkSDate").Any()) 
			return DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkSDate").First().Value(new Week());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 280;
	}
	public string GetControlName() {
		return "WkSDateValue";
	}
	public string GetDFName() {
		return "WkSDate";
	}
	public string GetTitle() {
		return "Week Start (Mon)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Week ds;
					ds = (Week)dsI;
		 
		
		return ds.WkSDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Week ds;
				ds = (Week)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Week/SaveWkSDate/?RecId=[[RecId]]',$(this));\" data-bound-name='WkSDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WkSDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WkSDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WkSDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WkSDate", "@WkSDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WkSDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Week").GetFieldOperators("WkSDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Week_WkEDate : 
	DateDataFieldBase<Week>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Week End (Sun)";}
		set { } 
	}

	public string DFName=> "WkEDate";

	
	public Week_WkEDate(Week Parent) : 
		base(Parent, "WkEDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Week_WkEDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkEDate").Any()) 
			return DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkEDate").First().Value(new Week());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 281;
	}
	public string GetControlName() {
		return "WkEDateValue";
	}
	public string GetDFName() {
		return "WkEDate";
	}
	public string GetTitle() {
		return "Week End (Sun)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Week ds;
					ds = (Week)dsI;
		 
		
		return ds.WkEDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Week ds;
				ds = (Week)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Week/SaveWkEDate/?RecId=[[RecId]]',$(this));\" data-bound-name='WkEDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WkEDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WkEDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WkEDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WkEDate", "@WkEDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WkEDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Week").GetFieldOperators("WkEDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvActive : 
	BoolDataFieldBase<Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Active";}
		set { } 
	}

	public string DFName=> "DrvActive";

	
	public Driver_DrvActive(Driver Parent) : 
		base(Parent, "DrvActive"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("True");
				    }
}


public partial class Driver_DrvActiveFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvActive").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvActive").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 282;
	}
	public string GetControlName() {
		return "DrvActiveValue";
	}
	public string GetDFName() {
		return "DrvActive";
	}
	public string GetTitle() {
		return "Active";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvActive.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Driver/SaveDrvActive/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='DrvActive' [[Val]] /><input type = 'hidden' data-bound-name='DrvActive' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvActive.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvActive";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "DrvActive")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvActive", "@DrvActive", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvActive", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvActive", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Week_WkBelongsTo : 
	FormattableDataFieldBase<int,Week>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Belongs to Period";}
		set { } 
	}

	public string DFName=> "WkBelongsTo";

	
	public Week_WkBelongsTo(Week Parent) : 
		base(Parent, "WkBelongsTo"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Week_WkBelongsToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkBelongsTo").Any()) 
			return DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkBelongsTo").First().Value(new Week());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 284;
	}
	public string GetControlName() {
		return "WkBelongsToValue";
	}
	public string GetDFName() {
		return "WkBelongsTo";
	}
	public string GetTitle() {
		return "Belongs to Period";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Week ds;
					ds = (Week)dsI;
		 
		
		return ds.WkBelongsTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Week ds;
				ds = (Week)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Week/SaveWkBelongsTo/?RecId=[[RecId]]',$(this));\" data-bound-name='WkBelongsTo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WkBelongsTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WkBelongsTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WkBelongsTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WkBelongsTo", "@WkBelongsTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WkBelongsTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Week").GetFieldOperators("WkBelongsTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustDelZone : 
	DataFieldSelectBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Zone";}
		set { } 
	}

	public string DFName=> "CustDelZone";

		public string GetDataSource() {
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDelZone").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDelZone").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT DelZId AS KeyValue, DelZName AS Description FROM DelZone UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Customer_CustDelZone(Customer Parent) : 
		base(Parent, "CustDelZone"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Customer_CustDelZoneFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDelZone").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDelZone").First().Value(new Customer());
		
		
			return  "SELECT DelZId AS KeyValue, DelZName AS Description FROM DelZone UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 287;
	}
	public string GetControlName() {
		return "CustDelZoneValue";
	}
	public string GetDFName() {
		return "CustDelZone";
	}
	public string GetTitle() {
		return "Delivery Zone";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustDelZone.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustDelZone/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CustDelZone'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustDelZone.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustDelZone";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustDelZone")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustDelZone", "@CustDelZone", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustDelZone", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustDelZone", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCreatedBy : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Created By";}
		set { } 
	}

	public string DFName=> "OrdCreatedBy";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCreatedBy").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCreatedBy").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdCreatedBy(Orders Parent) : 
		base(Parent, "OrdCreatedBy"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdCreatedByFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCreatedBy").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCreatedBy").First().Value(new Orders());
		
		
			return  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 288;
	}
	public string GetControlName() {
		return "OrdCreatedByValue";
	}
	public string GetDFName() {
		return "OrdCreatedBy";
	}
	public string GetTitle() {
		return "Created By";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCreatedBy.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCreatedBy/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdCreatedBy'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCreatedBy.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCreatedBy";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCreatedBy")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCreatedBy", "@OrdCreatedBy", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCreatedBy", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCreatedBy", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobCreatedBy : 
	DataFieldSelectBase<int,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Created By";}
		set { } 
	}

	public string DFName=> "JobCreatedBy";

		public string GetDataSource() {
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobCreatedBy").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobCreatedBy").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Job_JobCreatedBy(Job Parent) : 
		base(Parent, "JobCreatedBy"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Job_JobCreatedByFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobCreatedBy").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobCreatedBy").First().Value(new Job());
		
		
			return  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 289;
	}
	public string GetControlName() {
		return "JobCreatedByValue";
	}
	public string GetDFName() {
		return "JobCreatedBy";
	}
	public string GetTitle() {
		return "Created By";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobCreatedBy.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Job/SaveJobCreatedBy/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='JobCreatedBy'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobCreatedBy.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobCreatedBy";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobCreatedBy")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobCreatedBy", "@JobCreatedBy", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobCreatedBy", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobCreatedBy", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustGenNotes : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "General Notes";}
		set { } 
	}

	public string DFName=> "CustGenNotes";

	
	public Customer_CustGenNotes(Customer Parent) : 
		base(Parent, "CustGenNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustGenNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustGenNotes").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustGenNotes").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 29;
	}
	public string GetControlName() {
		return "CustGenNotesValue";
	}
	public string GetDFName() {
		return "CustGenNotes";
	}
	public string GetTitle() {
		return "General Notes";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustGenNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustGenNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CustGenNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustGenNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustGenNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustGenNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustGenNotes", "@CustGenNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustGenNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustGenNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class UKOrder_UKOCreatedBy : 
	DataFieldSelectBase<int,UKOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Created By";}
		set { } 
	}

	public string DFName=> "UKOCreatedBy";

		public string GetDataSource() {
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCreatedBy").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCreatedBy").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public UKOrder_UKOCreatedBy(UKOrder Parent) : 
		base(Parent, "UKOCreatedBy"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class UKOrder_UKOCreatedByFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCreatedBy").Any()) 
			return DS.GetManager<UKOrder>().OnDataSource.Where(f=> f.Key == "UKOCreatedBy").First().Value(new UKOrder());
		
		
			return  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 290;
	}
	public string GetControlName() {
		return "UKOCreatedByValue";
	}
	public string GetDFName() {
		return "UKOCreatedBy";
	}
	public string GetTitle() {
		return "Created By";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		UKOrder ds;
					ds = (UKOrder)dsI;
		 
		
		return ds.UKOCreatedBy.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		UKOrder ds;
				ds = (UKOrder)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/UKOrder/SaveUKOCreatedBy/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='UKOCreatedBy'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.UKOCreatedBy.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "UKOCreatedBy";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "UKOCreatedBy")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "UKOCreatedBy", "@UKOCreatedBy", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "UKOCreatedBy", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("UKOrder").GetFieldOperators("UKOCreatedBy", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCreatedBy : 
	DataFieldSelectBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Created By";}
		set { } 
	}

	public string DFName=> "CustCreatedBy";

		public string GetDataSource() {
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCreatedBy").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCreatedBy").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Customer_CustCreatedBy(Customer Parent) : 
		base(Parent, "CustCreatedBy"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Customer_CustCreatedByFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCreatedBy").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCreatedBy").First().Value(new Customer());
		
		
			return  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 291;
	}
	public string GetControlName() {
		return "CustCreatedByValue";
	}
	public string GetDFName() {
		return "CustCreatedBy";
	}
	public string GetTitle() {
		return "Created By";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCreatedBy.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCreatedBy/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CustCreatedBy'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCreatedBy.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCreatedBy";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCreatedBy")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCreatedBy", "@CustCreatedBy", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCreatedBy", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCreatedBy", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvBatch_InvBId : 
	FormattableDataFieldBase<int,InvBatch>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Batch Number";}
		set { } 
	}

	public string DFName=> "InvBId";

	
	public InvBatch_InvBId(InvBatch Parent) : 
		base(Parent, "InvBId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class InvBatch_InvBIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBId").Any()) 
			return DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBId").First().Value(new InvBatch());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 292;
	}
	public string GetControlName() {
		return "InvBIdValue";
	}
	public string GetDFName() {
		return "InvBId";
	}
	public string GetTitle() {
		return "Batch Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvBatch ds;
					ds = (InvBatch)dsI;
		 
		
		return ds.InvBId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvBatch ds;
				ds = (InvBatch)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvBatch/SaveInvBId/?RecId=[[RecId]]',$(this));\" data-bound-name='InvBId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvBId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvBId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvBId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvBId", "@InvBId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvBId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvBatch").GetFieldOperators("InvBId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvBatch_InvBType : 
	DataFieldSelectBase<int,InvBatch>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Type";}
		set { } 
	}

	public string DFName=> "InvBType";

		public string GetDataSource() {
		if(DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBType").Any()) 
			return DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.InvBTypeAsQuery();		}
		return _DataSource;

	}
    
	public InvBatch_InvBType(InvBatch Parent) : 
		base(Parent, "InvBType"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class InvBatch_InvBTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBType").Any()) 
			return DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBType").First().Value(new InvBatch());
		
		
			return DSUtil.InvBTypeAsQuery();	}

	public int GetFieldUniqueId() {
		return 293;
	}
	public string GetControlName() {
		return "InvBTypeValue";
	}
	public string GetDFName() {
		return "InvBType";
	}
	public string GetTitle() {
		return "Invoice Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvBatch ds;
					ds = (InvBatch)dsI;
		 
		
		return ds.InvBType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvBatch ds;
				ds = (InvBatch)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/InvBatch/SaveInvBType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvBType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvBType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvBType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvBType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvBType", "@InvBType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvBType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvBatch").GetFieldOperators("InvBType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvBatch_InvBPrintedOn : 
	DateDataFieldBase<InvBatch>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Printed On";}
		set { } 
	}

	public string DFName=> "InvBPrintedOn";

	
	public InvBatch_InvBPrintedOn(InvBatch Parent) : 
		base(Parent, "InvBPrintedOn"
			,"dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class InvBatch_InvBPrintedOnFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBPrintedOn").Any()) 
			return DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBPrintedOn").First().Value(new InvBatch());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 294;
	}
	public string GetControlName() {
		return "InvBPrintedOnValue";
	}
	public string GetDFName() {
		return "InvBPrintedOn";
	}
	public string GetTitle() {
		return "Printed On";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvBatch ds;
					ds = (InvBatch)dsI;
		 
		
		return ds.InvBPrintedOn.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvBatch ds;
				ds = (InvBatch)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvBatch/SaveInvBPrintedOn/?RecId=[[RecId]]',$(this));\" data-bound-name='InvBPrintedOn' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvBPrintedOn.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvBPrintedOn";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvBPrintedOn")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvBPrintedOn", "@InvBPrintedOn", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvBPrintedOn", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvBatch").GetFieldOperators("InvBPrintedOn", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvBatch_InvBExportedDate : 
	DateDataFieldBase<InvBatch>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sent to Dover On";}
		set { } 
	}

	public string DFName=> "InvBExportedDate";

	
	public InvBatch_InvBExportedDate(InvBatch Parent) : 
		base(Parent, "InvBExportedDate"
			,"dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class InvBatch_InvBExportedDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBExportedDate").Any()) 
			return DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBExportedDate").First().Value(new InvBatch());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 295;
	}
	public string GetControlName() {
		return "InvBExportedDateValue";
	}
	public string GetDFName() {
		return "InvBExportedDate";
	}
	public string GetTitle() {
		return "Sent to Dover On";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvBatch ds;
					ds = (InvBatch)dsI;
		 
		
		return ds.InvBExportedDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvBatch ds;
				ds = (InvBatch)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/InvBatch/SaveInvBExportedDate/?RecId=[[RecId]]',$(this));\" data-bound-name='InvBExportedDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvBExportedDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvBExportedDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvBExportedDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvBExportedDate", "@InvBExportedDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvBExportedDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvBatch").GetFieldOperators("InvBExportedDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class InvBatch_InvBExported : 
	BoolDataFieldBase<InvBatch>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sent";}
		set { } 
	}

	public string DFName=> "InvBExported";

	
	public InvBatch_InvBExported(InvBatch Parent) : 
		base(Parent, "InvBExported"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class InvBatch_InvBExportedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBExported").Any()) 
			return DS.GetManager<InvBatch>().OnDataSource.Where(f=> f.Key == "InvBExported").First().Value(new InvBatch());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 296;
	}
	public string GetControlName() {
		return "InvBExportedValue";
	}
	public string GetDFName() {
		return "InvBExported";
	}
	public string GetTitle() {
		return "Sent";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		InvBatch ds;
					ds = (InvBatch)dsI;
		 
		
		return ds.InvBExported.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		InvBatch ds;
				ds = (InvBatch)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/InvBatch/SaveInvBExported/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='InvBExported' [[Val]] /><input type = 'hidden' data-bound-name='InvBExported' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvBExported.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvBExported";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "InvBExported")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvBExported", "@InvBExported", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvBExported", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("InvBatch").GetFieldOperators("InvBExported", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContId : 
	FormattableDataFieldBase<int,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Contact ID";}
		set { } 
	}

	public string DFName=> "ContId";

	
	public Contact_ContId(Contact Parent) : 
		base(Parent, "ContId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Contact_ContIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContId").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContId").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 30;
	}
	public string GetControlName() {
		return "ContIdValue";
	}
	public string GetDFName() {
		return "ContId";
	}
	public string GetTitle() {
		return "Contact ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContId/?RecId=[[RecId]]',$(this));\" data-bound-name='ContId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContId", "@ContId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContFN : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Forename";}
		set { } 
	}

	public string DFName=> "ContFN";

	
	public Contact_ContFN(Contact Parent) : 
		base(Parent, "ContFN"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Contact_ContFNFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContFN").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContFN").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 31;
	}
	public string GetControlName() {
		return "ContFNValue";
	}
	public string GetDFName() {
		return "ContFN";
	}
	public string GetTitle() {
		return "Forename";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContFN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContFN/?RecId=[[RecId]]',$(this));\" data-bound-name='ContFN' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContFN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContFN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContFN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContFN", "@ContFN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContFN", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContFN", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class PackageType_PackId : 
	FormattableDataFieldBase<int,PackageType>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Package Type ID";}
		set { } 
	}

	public string DFName=> "PackId";

	
	public PackageType_PackId(PackageType Parent) : 
		base(Parent, "PackId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class PackageType_PackIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<PackageType>().OnDataSource.Where(f=> f.Key == "PackId").Any()) 
			return DS.GetManager<PackageType>().OnDataSource.Where(f=> f.Key == "PackId").First().Value(new PackageType());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 318;
	}
	public string GetControlName() {
		return "PackIdValue";
	}
	public string GetDFName() {
		return "PackId";
	}
	public string GetTitle() {
		return "Package Type ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		PackageType ds;
					ds = (PackageType)dsI;
		 
		
		return ds.PackId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		PackageType ds;
				ds = (PackageType)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/PackageType/SavePackId/?RecId=[[RecId]]',$(this));\" data-bound-name='PackId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.PackId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "PackId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "PackId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "PackId", "@PackId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "PackId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("PackageType").GetFieldOperators("PackId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class PackageType_PackName : 
	DataFieldBase<string,PackageType>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Package Type";}
		set { } 
	}

	public string DFName=> "PackName";

	
	public PackageType_PackName(PackageType Parent) : 
		base(Parent, "PackName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class PackageType_PackNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<PackageType>().OnDataSource.Where(f=> f.Key == "PackName").Any()) 
			return DS.GetManager<PackageType>().OnDataSource.Where(f=> f.Key == "PackName").First().Value(new PackageType());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 319;
	}
	public string GetControlName() {
		return "PackNameValue";
	}
	public string GetDFName() {
		return "PackName";
	}
	public string GetTitle() {
		return "Package Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		PackageType ds;
					ds = (PackageType)dsI;
		 
		
		return ds.PackName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		PackageType ds;
				ds = (PackageType)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/PackageType/SavePackName/?RecId=[[RecId]]',$(this));\" data-bound-name='PackName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.PackName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "PackName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "PackName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "PackName", "@PackName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "PackName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("PackageType").GetFieldOperators("PackName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContSN : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Surname";}
		set { } 
	}

	public string DFName=> "ContSN";

	
	public Contact_ContSN(Contact Parent) : 
		base(Parent, "ContSN"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Contact_ContSNFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContSN").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContSN").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 32;
	}
	public string GetControlName() {
		return "ContSNValue";
	}
	public string GetDFName() {
		return "ContSN";
	}
	public string GetTitle() {
		return "Surname";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContSN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContSN/?RecId=[[RecId]]',$(this));\" data-bound-name='ContSN' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContSN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContSN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContSN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContSN", "@ContSN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContSN", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContSN", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class BottleSize_BSzId : 
	FormattableDataFieldBase<int,BottleSize>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Size ID";}
		set { } 
	}

	public string DFName=> "BSzId";

	
	public BottleSize_BSzId(BottleSize Parent) : 
		base(Parent, "BSzId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class BottleSize_BSzIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<BottleSize>().OnDataSource.Where(f=> f.Key == "BSzId").Any()) 
			return DS.GetManager<BottleSize>().OnDataSource.Where(f=> f.Key == "BSzId").First().Value(new BottleSize());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 320;
	}
	public string GetControlName() {
		return "BSzIdValue";
	}
	public string GetDFName() {
		return "BSzId";
	}
	public string GetTitle() {
		return "Size ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		BottleSize ds;
					ds = (BottleSize)dsI;
		 
		
		return ds.BSzId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		BottleSize ds;
				ds = (BottleSize)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/BottleSize/SaveBSzId/?RecId=[[RecId]]',$(this));\" data-bound-name='BSzId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.BSzId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "BSzId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "BSzId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "BSzId", "@BSzId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "BSzId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("BottleSize").GetFieldOperators("BSzId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class BottleSize_BSzSize : 
	DataFieldBase<string,BottleSize>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Bottle Size";}
		set { } 
	}

	public string DFName=> "BSzSize";

	
	public BottleSize_BSzSize(BottleSize Parent) : 
		base(Parent, "BSzSize"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class BottleSize_BSzSizeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<BottleSize>().OnDataSource.Where(f=> f.Key == "BSzSize").Any()) 
			return DS.GetManager<BottleSize>().OnDataSource.Where(f=> f.Key == "BSzSize").First().Value(new BottleSize());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 321;
	}
	public string GetControlName() {
		return "BSzSizeValue";
	}
	public string GetDFName() {
		return "BSzSize";
	}
	public string GetTitle() {
		return "Bottle Size";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		BottleSize ds;
					ds = (BottleSize)dsI;
		 
		
		return ds.BSzSize.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		BottleSize ds;
				ds = (BottleSize)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/BottleSize/SaveBSzSize/?RecId=[[RecId]]',$(this));\" data-bound-name='BSzSize' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.BSzSize.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "BSzSize";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "BSzSize")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "BSzSize", "@BSzSize", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "BSzSize", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("BottleSize").GetFieldOperators("BSzSize", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class PalletType_PallId : 
	FormattableDataFieldBase<int,PalletType>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Pallet Type ID";}
		set { } 
	}

	public string DFName=> "PallId";

	
	public PalletType_PallId(PalletType Parent) : 
		base(Parent, "PallId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class PalletType_PallIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<PalletType>().OnDataSource.Where(f=> f.Key == "PallId").Any()) 
			return DS.GetManager<PalletType>().OnDataSource.Where(f=> f.Key == "PallId").First().Value(new PalletType());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 322;
	}
	public string GetControlName() {
		return "PallIdValue";
	}
	public string GetDFName() {
		return "PallId";
	}
	public string GetTitle() {
		return "Pallet Type ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		PalletType ds;
					ds = (PalletType)dsI;
		 
		
		return ds.PallId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		PalletType ds;
				ds = (PalletType)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/PalletType/SavePallId/?RecId=[[RecId]]',$(this));\" data-bound-name='PallId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.PallId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "PallId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "PallId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "PallId", "@PallId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "PallId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("PalletType").GetFieldOperators("PallId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class PalletType_PallName : 
	DataFieldBase<string,PalletType>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Pallet Type";}
		set { } 
	}

	public string DFName=> "PallName";

	
	public PalletType_PallName(PalletType Parent) : 
		base(Parent, "PallName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class PalletType_PallNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<PalletType>().OnDataSource.Where(f=> f.Key == "PallName").Any()) 
			return DS.GetManager<PalletType>().OnDataSource.Where(f=> f.Key == "PallName").First().Value(new PalletType());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 323;
	}
	public string GetControlName() {
		return "PallNameValue";
	}
	public string GetDFName() {
		return "PallName";
	}
	public string GetTitle() {
		return "Pallet Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		PalletType ds;
					ds = (PalletType)dsI;
		 
		
		return ds.PallName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		PalletType ds;
				ds = (PalletType)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/PalletType/SavePallName/?RecId=[[RecId]]',$(this));\" data-bound-name='PallName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.PallName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "PallName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "PallName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "PallName", "@PallName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "PallName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("PalletType").GetFieldOperators("PallName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class BottleSize_BSzOrder : 
	FormattableDataFieldBase<int,BottleSize>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sort Order";}
		set { } 
	}

	public string DFName=> "BSzOrder";

	
	public BottleSize_BSzOrder(BottleSize Parent) : 
		base(Parent, "BSzOrder"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class BottleSize_BSzOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<BottleSize>().OnDataSource.Where(f=> f.Key == "BSzOrder").Any()) 
			return DS.GetManager<BottleSize>().OnDataSource.Where(f=> f.Key == "BSzOrder").First().Value(new BottleSize());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 324;
	}
	public string GetControlName() {
		return "BSzOrderValue";
	}
	public string GetDFName() {
		return "BSzOrder";
	}
	public string GetTitle() {
		return "Sort Order";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		BottleSize ds;
					ds = (BottleSize)dsI;
		 
		
		return ds.BSzOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		BottleSize ds;
				ds = (BottleSize)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/BottleSize/SaveBSzOrder/?RecId=[[RecId]]',$(this));\" data-bound-name='BSzOrder' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.BSzOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "BSzOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "BSzOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "BSzOrder", "@BSzOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "BSzOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("BottleSize").GetFieldOperators("BSzOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvProforma : 
	BoolDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Proforma";}
		set { } 
	}

	public string DFName=> "InvProforma";

	
	public Inv_InvProforma(Inv Parent) : 
		base(Parent, "InvProforma"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Inv_InvProformaFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvProforma").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvProforma").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 326;
	}
	public string GetControlName() {
		return "InvProformaValue";
	}
	public string GetDFName() {
		return "InvProforma";
	}
	public string GetTitle() {
		return "Proforma";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvProforma.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Inv/SaveInvProforma/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='InvProforma' [[Val]] /><input type = 'hidden' data-bound-name='InvProforma' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvProforma.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvProforma";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "InvProforma")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvProforma", "@InvProforma", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvProforma", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvProforma", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLCustOrd : 
	DataFieldBase<string,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Order No";}
		set { } 
	}

	public string DFName=> "OrdLCustOrd";

	
	public OrderLine_OrdLCustOrd(OrderLine Parent) : 
		base(Parent, "OrdLCustOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class OrderLine_OrdLCustOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLCustOrd").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLCustOrd").First().Value(new OrderLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 328;
	}
	public string GetControlName() {
		return "OrdLCustOrdValue";
	}
	public string GetDFName() {
		return "OrdLCustOrd";
	}
	public string GetTitle() {
		return "Client Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLCustOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLCustOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdLCustOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLCustOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLCustOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLCustOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLCustOrd", "@OrdLCustOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLCustOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLCustOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustEM2 : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "E-Mail 2";}
		set { } 
	}

	public string DFName=> "CustEM2";

	
	public Customer_CustEM2(Customer Parent) : 
		base(Parent, "CustEM2"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustEM2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM2").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM2").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 329;
	}
	public string GetControlName() {
		return "CustEM2Value";
	}
	public string GetDFName() {
		return "CustEM2";
	}
	public string GetTitle() {
		return "E-Mail 2";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustEM2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustEM2/?RecId=[[RecId]]',$(this));\" data-bound-name='CustEM2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustEM2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustEM2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustEM2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustEM2", "@CustEM2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustEM2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustEM2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContPhone : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Phone";}
		set { } 
	}

	public string DFName=> "ContPhone";

	
	public Contact_ContPhone(Contact Parent) : 
		base(Parent, "ContPhone"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Contact_ContPhoneFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContPhone").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContPhone").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 33;
	}
	public string GetControlName() {
		return "ContPhoneValue";
	}
	public string GetDFName() {
		return "ContPhone";
	}
	public string GetTitle() {
		return "Phone";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContPhone.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContPhone/?RecId=[[RecId]]',$(this));\" data-bound-name='ContPhone' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContPhone.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContPhone";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContPhone")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContPhone", "@ContPhone", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContPhone", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContPhone", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustEM3 : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "E-Mail 3";}
		set { } 
	}

	public string DFName=> "CustEM3";

	
	public Customer_CustEM3(Customer Parent) : 
		base(Parent, "CustEM3"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustEM3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM3").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM3").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 330;
	}
	public string GetControlName() {
		return "CustEM3Value";
	}
	public string GetDFName() {
		return "CustEM3";
	}
	public string GetTitle() {
		return "E-Mail 3";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustEM3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustEM3/?RecId=[[RecId]]',$(this));\" data-bound-name='CustEM3' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustEM3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustEM3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustEM3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustEM3", "@CustEM3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustEM3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustEM3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustEM4 : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "E-Mail 4";}
		set { } 
	}

	public string DFName=> "CustEM4";

	
	public Customer_CustEM4(Customer Parent) : 
		base(Parent, "CustEM4"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustEM4FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM4").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM4").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 331;
	}
	public string GetControlName() {
		return "CustEM4Value";
	}
	public string GetDFName() {
		return "CustEM4";
	}
	public string GetTitle() {
		return "E-Mail 4";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustEM4.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustEM4/?RecId=[[RecId]]',$(this));\" data-bound-name='CustEM4' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustEM4.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustEM4";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustEM4")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustEM4", "@CustEM4", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustEM4", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustEM4", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdEMTo : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "E-Mail To";}
		set { } 
	}

	public string DFName=> "OrdEMTo";

	
	public Orders_OrdEMTo(Orders Parent) : 
		base(Parent, "OrdEMTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Orders_OrdEMToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdEMTo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdEMTo").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 332;
	}
	public string GetControlName() {
		return "OrdEMToValue";
	}
	public string GetDFName() {
		return "OrdEMTo";
	}
	public string GetTitle() {
		return "E-Mail To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdEMTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdEMTo/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdEMTo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdEMTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdEMTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdEMTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdEMTo", "@OrdEMTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdEMTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdEMTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdFaxTo : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Fax To";}
		set { } 
	}

	public string DFName=> "OrdFaxTo";

	
	public Orders_OrdFaxTo(Orders Parent) : 
		base(Parent, "OrdFaxTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Orders_OrdFaxToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdFaxTo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdFaxTo").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 333;
	}
	public string GetControlName() {
		return "OrdFaxToValue";
	}
	public string GetDFName() {
		return "OrdFaxTo";
	}
	public string GetTitle() {
		return "Fax To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdFaxTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdFaxTo/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdFaxTo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdFaxTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdFaxTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdFaxTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdFaxTo", "@OrdFaxTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdFaxTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdFaxTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdAgentId : 
	FormattableDataFieldBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Agent ID";}
		set { } 
	}

	public string DFName=> "OrdAgentId";

	
	public Orders_OrdAgentId(Orders Parent) : 
		base(Parent, "OrdAgentId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Orders_OrdAgentIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAgentId").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAgentId").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 334;
	}
	public string GetControlName() {
		return "OrdAgentIdValue";
	}
	public string GetDFName() {
		return "OrdAgentId";
	}
	public string GetTitle() {
		return "Agent ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdAgentId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdAgentId/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdAgentId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdAgentId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdAgentId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdAgentId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdAgentId", "@OrdAgentId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdAgentId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdAgentId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdAgent : 
	DataFieldAutoCompleteSingleBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Agent";}
		set { } 
	}

	public string DFName=> "OrdAgent";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAgent").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAgent").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdAgent(Orders Parent) : 
		base(Parent, "OrdAgent"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdAgentFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAgent").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAgent").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 335;
	}
	public string GetControlName() {
		return "OrdAgentValue";
	}
	public string GetDFName() {
		return "OrdAgent";
	}
	public string GetTitle() {
		return "Agent";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdAgent.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Orders/AutoCompleteOrdAgent/' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdAgent/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='OrdAgent'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdAgent.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdAgent";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Orders/AutoCompleteOrdAgent/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdAgent")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdAgent", "@OrdAgent", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdAgent", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdAgent", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class ExchRate_ExRSDate : 
	DateDataFieldBase<ExchRate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "From";}
		set { } 
	}

	public string DFName=> "ExRSDate";

	
	public ExchRate_ExRSDate(ExchRate Parent) : 
		base(Parent, "ExRSDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ExchRate_ExRSDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRSDate").Any()) 
			return DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExRSDate").First().Value(new ExchRate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 336;
	}
	public string GetControlName() {
		return "ExRSDateValue";
	}
	public string GetDFName() {
		return "ExRSDate";
	}
	public string GetTitle() {
		return "From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ExchRate ds;
					ds = (ExchRate)dsI;
		 
		
		return ds.ExRSDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ExchRate ds;
				ds = (ExchRate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ExchRate/SaveExRSDate/?RecId=[[RecId]]',$(this));\" data-bound-name='ExRSDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ExRSDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ExRSDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ExRSDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ExRSDate", "@ExRSDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ExRSDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ExchRate").GetFieldOperators("ExRSDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ExchRate_ExREDate : 
	DateDataFieldBase<ExchRate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "To";}
		set { } 
	}

	public string DFName=> "ExREDate";

	
	public ExchRate_ExREDate(ExchRate Parent) : 
		base(Parent, "ExREDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ExchRate_ExREDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExREDate").Any()) 
			return DS.GetManager<ExchRate>().OnDataSource.Where(f=> f.Key == "ExREDate").First().Value(new ExchRate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 337;
	}
	public string GetControlName() {
		return "ExREDateValue";
	}
	public string GetDFName() {
		return "ExREDate";
	}
	public string GetTitle() {
		return "To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ExchRate ds;
					ds = (ExchRate)dsI;
		 
		
		return ds.ExREDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ExchRate ds;
				ds = (ExchRate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ExchRate/SaveExREDate/?RecId=[[RecId]]',$(this));\" data-bound-name='ExREDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ExREDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ExREDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ExREDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ExREDate", "@ExREDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ExREDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ExchRate").GetFieldOperators("ExREDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustAADSys : 
	DataFieldSelectBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "AAD System";}
		set { } 
	}

	public string DFName=> "CustAADSys";

		public string GetDataSource() {
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAADSys").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAADSys").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.CustAADSysAsQuery();		}
		return _DataSource;

	}
    
	public Customer_CustAADSys(Customer Parent) : 
		base(Parent, "CustAADSys"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Customer_CustAADSysFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAADSys").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAADSys").First().Value(new Customer());
		
		
			return DSUtil.CustAADSysAsQuery();	}

	public int GetFieldUniqueId() {
		return 338;
	}
	public string GetControlName() {
		return "CustAADSysValue";
	}
	public string GetDFName() {
		return "CustAADSys";
	}
	public string GetTitle() {
		return "AAD System";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustAADSys.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustAADSys/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CustAADSys'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustAADSys.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustAADSys";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustAADSys")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustAADSys", "@CustAADSys", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustAADSys", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustAADSys", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdAADSys : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "AAD System";}
		set { } 
	}

	public string DFName=> "OrdAADSys";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAADSys").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAADSys").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return "select 0 as KeyValue, '' as [Description]";		}
		return _DataSource;

	}
    
	public Orders_OrdAADSys(Orders Parent) : 
		base(Parent, "OrdAADSys"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdAADSysFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAADSys").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdAADSys").First().Value(new Orders());
		
		
			return "select 0 as KeyValue, '' as [Description]";	}

	public int GetFieldUniqueId() {
		return 339;
	}
	public string GetControlName() {
		return "OrdAADSysValue";
	}
	public string GetDFName() {
		return "OrdAADSys";
	}
	public string GetTitle() {
		return "AAD System";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdAADSys.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdAADSys/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdAADSys'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdAADSys.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdAADSys";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdAADSys")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdAADSys", "@OrdAADSys", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdAADSys", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdAADSys", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContFax : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Fax";}
		set { } 
	}

	public string DFName=> "ContFax";

	
	public Contact_ContFax(Contact Parent) : 
		base(Parent, "ContFax"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Contact_ContFaxFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContFax").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContFax").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 34;
	}
	public string GetControlName() {
		return "ContFaxValue";
	}
	public string GetDFName() {
		return "ContFax";
	}
	public string GetTitle() {
		return "Fax";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContFax.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContFax/?RecId=[[RecId]]',$(this));\" data-bound-name='ContFax' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContFax.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContFax";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContFax")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContFax", "@ContFax", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContFax", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContFax", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdARCRef : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "eAD ARC Ref";}
		set { } 
	}

	public string DFName=> "OrdARCRef";

	
	public Orders_OrdARCRef(Orders Parent) : 
		base(Parent, "OrdARCRef"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdARCRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdARCRef").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdARCRef").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 340;
	}
	public string GetControlName() {
		return "OrdARCRefValue";
	}
	public string GetDFName() {
		return "OrdARCRef";
	}
	public string GetTitle() {
		return "eAD ARC Ref";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdARCRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdARCRef/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdARCRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdARCRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdARCRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdARCRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdARCRef", "@OrdARCRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdARCRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdARCRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustGBWK : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "GBWK";}
		set { } 
	}

	public string DFName=> "CustGBWK";

	
	public Customer_CustGBWK(Customer Parent) : 
		base(Parent, "CustGBWK"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustGBWKFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustGBWK").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustGBWK").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 341;
	}
	public string GetControlName() {
		return "CustGBWKValue";
	}
	public string GetDFName() {
		return "CustGBWK";
	}
	public string GetTitle() {
		return "GBWK";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustGBWK.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustGBWK/?RecId=[[RecId]]',$(this));\" data-bound-name='CustGBWK' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustGBWK.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustGBWK";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustGBWK")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustGBWK", "@CustGBWK", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustGBWK", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustGBWK", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EADNum_EADNo : 
	DataFieldBase<string,EADNum>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "eAD Number";}
		set { } 
	}

	public string DFName=> "EADNo";

	
	public EADNum_EADNo(EADNum Parent) : 
		base(Parent, "EADNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EADNum_EADNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EADNum>().OnDataSource.Where(f=> f.Key == "EADNo").Any()) 
			return DS.GetManager<EADNum>().OnDataSource.Where(f=> f.Key == "EADNo").First().Value(new EADNum());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 342;
	}
	public string GetControlName() {
		return "EADNoValue";
	}
	public string GetDFName() {
		return "EADNo";
	}
	public string GetTitle() {
		return "eAD Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EADNum ds;
					ds = (EADNum)dsI;
		 
		
		return ds.EADNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EADNum ds;
				ds = (EADNum)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EADNum/SaveEADNo/?RecId=[[RecId]]',$(this));\" data-bound-name='EADNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EADNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EADNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EADNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EADNo", "@EADNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EADNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EADNum").GetFieldOperators("EADNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EADNum_EADOrder : 
	FormattableDataFieldBase<int,EADNum>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "EADOrder";

	
	public EADNum_EADOrder(EADNum Parent) : 
		base(Parent, "EADOrder"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class EADNum_EADOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EADNum>().OnDataSource.Where(f=> f.Key == "EADOrder").Any()) 
			return DS.GetManager<EADNum>().OnDataSource.Where(f=> f.Key == "EADOrder").First().Value(new EADNum());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 343;
	}
	public string GetControlName() {
		return "EADOrderValue";
	}
	public string GetDFName() {
		return "EADOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EADNum ds;
					ds = (EADNum)dsI;
		 
		
		return ds.EADOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EADNum ds;
				ds = (EADNum)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EADNum/SaveEADOrder/?RecId=[[RecId]]',$(this));\" data-bound-name='EADOrder' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EADOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EADOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EADOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EADOrder", "@EADOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EADOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EADNum").GetFieldOperators("EADOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdGBWKNoFrom : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "GBWK No From";}
		set { } 
	}

	public string DFName=> "OrdGBWKNoFrom";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdGBWKNoFrom").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdGBWKNoFrom").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.OrdVATPaidByAsQuery();		}
		return _DataSource;

	}
    
	public Orders_OrdGBWKNoFrom(Orders Parent) : 
		base(Parent, "OrdGBWKNoFrom"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdGBWKNoFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdGBWKNoFrom").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdGBWKNoFrom").First().Value(new Orders());
		
		
			return DSUtil.OrdVATPaidByAsQuery();	}

	public int GetFieldUniqueId() {
		return 344;
	}
	public string GetControlName() {
		return "OrdGBWKNoFromValue";
	}
	public string GetDFName() {
		return "OrdGBWKNoFrom";
	}
	public string GetTitle() {
		return "GBWK No From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdGBWKNoFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdGBWKNoFrom/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdGBWKNoFrom'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdGBWKNoFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdGBWKNoFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdGBWKNoFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdGBWKNoFrom", "@OrdGBWKNoFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdGBWKNoFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdGBWKNoFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdGBWKNo : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "GBWK Number";}
		set { } 
	}

	public string DFName=> "OrdGBWKNo";

	
	public Orders_OrdGBWKNo(Orders Parent) : 
		base(Parent, "OrdGBWKNo"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdGBWKNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdGBWKNo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdGBWKNo").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 345;
	}
	public string GetControlName() {
		return "OrdGBWKNoValue";
	}
	public string GetDFName() {
		return "OrdGBWKNo";
	}
	public string GetTitle() {
		return "GBWK Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdGBWKNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdGBWKNo/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdGBWKNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdGBWKNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdGBWKNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdGBWKNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdGBWKNo", "@OrdGBWKNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdGBWKNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdGBWKNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdTescoPSWk : 
	FormattableDataFieldBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Tesco PS Wk";}
		set { } 
	}

	public string DFName=> "OrdTescoPSWk";

	
	public Orders_OrdTescoPSWk(Orders Parent) : 
		base(Parent, "OrdTescoPSWk"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Orders_OrdTescoPSWkFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdTescoPSWk").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdTescoPSWk").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 346;
	}
	public string GetControlName() {
		return "OrdTescoPSWkValue";
	}
	public string GetDFName() {
		return "OrdTescoPSWk";
	}
	public string GetTitle() {
		return "Tesco PS Wk";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdTescoPSWk.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdTescoPSWk/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdTescoPSWk' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdTescoPSWk.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdTescoPSWk";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdTescoPSWk")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdTescoPSWk", "@OrdTescoPSWk", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdTescoPSWk", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdTescoPSWk", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDId : 
	FormattableDataFieldBase<int,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Document ID";}
		set { } 
	}

	public string DFName=> "SDId";

	
	public ShipDoc_SDId(ShipDoc Parent) : 
		base(Parent, "SDId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDId").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDId").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 347;
	}
	public string GetControlName() {
		return "SDIdValue";
	}
	public string GetDFName() {
		return "SDId";
	}
	public string GetTitle() {
		return "Document ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDId/?RecId=[[RecId]]',$(this));\" data-bound-name='SDId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDId", "@SDId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDSuppId : 
	FormattableDataFieldBase<int,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier ID";}
		set { } 
	}

	public string DFName=> "SDSuppId";

	
	public ShipDoc_SDSuppId(ShipDoc Parent) : 
		base(Parent, "SDSuppId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDSuppIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSuppId").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSuppId").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 348;
	}
	public string GetControlName() {
		return "SDSuppIdValue";
	}
	public string GetDFName() {
		return "SDSuppId";
	}
	public string GetTitle() {
		return "Supplier ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDSuppId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDSuppId/?RecId=[[RecId]]',$(this));\" data-bound-name='SDSuppId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDSuppId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDSuppId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDSuppId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDSuppId", "@SDSuppId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDSuppId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDSuppId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDSupp : 
	DataFieldAutoCompleteSingleBase<int,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier Name";}
		set { } 
	}

	public string DFName=> "SDSupp";

		public string GetDataSource() {
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSupp").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSupp").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public ShipDoc_SDSupp(ShipDoc Parent) : 
		base(Parent, "SDSupp"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class ShipDoc_SDSuppFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSupp").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSupp").First().Value(new ShipDoc());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 349;
	}
	public string GetControlName() {
		return "SDSuppValue";
	}
	public string GetDFName() {
		return "SDSupp";
	}
	public string GetTitle() {
		return "Supplier Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDSupp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/ShipDoc/AutoCompleteSDSupp/' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDSupp/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='SDSupp'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDSupp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDSupp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/ShipDoc/AutoCompleteSDSupp/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDSupp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDSupp", "@SDSupp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDSupp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDSupp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Contact_ContEM : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "E-Mail";}
		set { } 
	}

	public string DFName=> "ContEM";

	
	public Contact_ContEM(Contact Parent) : 
		base(Parent, "ContEM"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Contact_ContEMFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContEM").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContEM").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 35;
	}
	public string GetControlName() {
		return "ContEMValue";
	}
	public string GetDFName() {
		return "ContEM";
	}
	public string GetTitle() {
		return "E-Mail";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContEM.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContEM/?RecId=[[RecId]]',$(this));\" data-bound-name='ContEM' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContEM.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContEM";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContEM")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContEM", "@ContEM", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContEM", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContEM", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDSuppAddr : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier Address";}
		set { } 
	}

	public string DFName=> "SDSuppAddr";

	
	public ShipDoc_SDSuppAddr(ShipDoc Parent) : 
		base(Parent, "SDSuppAddr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDSuppAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSuppAddr").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSuppAddr").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 350;
	}
	public string GetControlName() {
		return "SDSuppAddrValue";
	}
	public string GetDFName() {
		return "SDSuppAddr";
	}
	public string GetTitle() {
		return "Supplier Address";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDSuppAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDSuppAddr/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDSuppAddr'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDSuppAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDSuppAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDSuppAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDSuppAddr", "@SDSuppAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDSuppAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDSuppAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDSuppVATNo : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier VAT No";}
		set { } 
	}

	public string DFName=> "SDSuppVATNo";

	
	public ShipDoc_SDSuppVATNo(ShipDoc Parent) : 
		base(Parent, "SDSuppVATNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDSuppVATNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSuppVATNo").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSuppVATNo").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 351;
	}
	public string GetControlName() {
		return "SDSuppVATNoValue";
	}
	public string GetDFName() {
		return "SDSuppVATNo";
	}
	public string GetTitle() {
		return "Supplier VAT No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDSuppVATNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDSuppVATNo/?RecId=[[RecId]]',$(this));\" data-bound-name='SDSuppVATNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDSuppVATNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDSuppVATNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDSuppVATNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDSuppVATNo", "@SDSuppVATNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDSuppVATNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDSuppVATNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDTransRef : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Transaction Ref";}
		set { } 
	}

	public string DFName=> "SDTransRef";

	
	public ShipDoc_SDTransRef(ShipDoc Parent) : 
		base(Parent, "SDTransRef"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDTransRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDTransRef").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDTransRef").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 352;
	}
	public string GetControlName() {
		return "SDTransRefValue";
	}
	public string GetDFName() {
		return "SDTransRef";
	}
	public string GetTitle() {
		return "Transaction Ref";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDTransRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDTransRef/?RecId=[[RecId]]',$(this));\" data-bound-name='SDTransRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDTransRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDTransRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDTransRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDTransRef", "@SDTransRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDTransRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDTransRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDCompAuth : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Competent Auth";}
		set { } 
	}

	public string DFName=> "SDCompAuth";

	
	public ShipDoc_SDCompAuth(ShipDoc Parent) : 
		base(Parent, "SDCompAuth"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDCompAuthFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCompAuth").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCompAuth").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 353;
	}
	public string GetControlName() {
		return "SDCompAuthValue";
	}
	public string GetDFName() {
		return "SDCompAuth";
	}
	public string GetTitle() {
		return "Competent Auth";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDCompAuth.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDCompAuth/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDCompAuth'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDCompAuth.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDCompAuth";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDCompAuth")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDCompAuth", "@SDCompAuth", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDCompAuth", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDCompAuth", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDRecipId : 
	FormattableDataFieldBase<int,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Recipient ID";}
		set { } 
	}

	public string DFName=> "SDRecipId";

	
	public ShipDoc_SDRecipId(ShipDoc Parent) : 
		base(Parent, "SDRecipId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDRecipIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecipId").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecipId").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 354;
	}
	public string GetControlName() {
		return "SDRecipIdValue";
	}
	public string GetDFName() {
		return "SDRecipId";
	}
	public string GetTitle() {
		return "Recipient ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDRecipId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDRecipId/?RecId=[[RecId]]',$(this));\" data-bound-name='SDRecipId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDRecipId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDRecipId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDRecipId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDRecipId", "@SDRecipId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDRecipId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDRecipId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDRecip : 
	DataFieldAutoCompleteSingleBase<int,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Recipient Name";}
		set { } 
	}

	public string DFName=> "SDRecip";

		public string GetDataSource() {
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecip").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecip").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public ShipDoc_SDRecip(ShipDoc Parent) : 
		base(Parent, "SDRecip"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class ShipDoc_SDRecipFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecip").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecip").First().Value(new ShipDoc());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 355;
	}
	public string GetControlName() {
		return "SDRecipValue";
	}
	public string GetDFName() {
		return "SDRecip";
	}
	public string GetTitle() {
		return "Recipient Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDRecip.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/ShipDoc/AutoCompleteSDRecip/' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDRecip/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='SDRecip'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDRecip.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDRecip";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/ShipDoc/AutoCompleteSDRecip/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDRecip")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDRecip", "@SDRecip", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDRecip", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDRecip", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class ShipDoc_SDRecipAddr : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Recipient Address";}
		set { } 
	}

	public string DFName=> "SDRecipAddr";

	
	public ShipDoc_SDRecipAddr(ShipDoc Parent) : 
		base(Parent, "SDRecipAddr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDRecipAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecipAddr").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecipAddr").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 356;
	}
	public string GetControlName() {
		return "SDRecipAddrValue";
	}
	public string GetDFName() {
		return "SDRecipAddr";
	}
	public string GetTitle() {
		return "Recipient Address";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDRecipAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDRecipAddr/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDRecipAddr'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDRecipAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDRecipAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDRecipAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDRecipAddr", "@SDRecipAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDRecipAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDRecipAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDRecipVATNo : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Recipient VAT No";}
		set { } 
	}

	public string DFName=> "SDRecipVATNo";

	
	public ShipDoc_SDRecipVATNo(ShipDoc Parent) : 
		base(Parent, "SDRecipVATNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDRecipVATNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecipVATNo").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecipVATNo").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 357;
	}
	public string GetControlName() {
		return "SDRecipVATNoValue";
	}
	public string GetDFName() {
		return "SDRecipVATNo";
	}
	public string GetTitle() {
		return "Recipient VAT No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDRecipVATNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDRecipVATNo/?RecId=[[RecId]]',$(this));\" data-bound-name='SDRecipVATNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDRecipVATNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDRecipVATNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDRecipVATNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDRecipVATNo", "@SDRecipVATNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDRecipVATNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDRecipVATNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDRefNo : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Reference Number";}
		set { } 
	}

	public string DFName=> "SDRefNo";

	
	public ShipDoc_SDRefNo(ShipDoc Parent) : 
		base(Parent, "SDRefNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDRefNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRefNo").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRefNo").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 358;
	}
	public string GetControlName() {
		return "SDRefNoValue";
	}
	public string GetDFName() {
		return "SDRefNo";
	}
	public string GetTitle() {
		return "Reference Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDRefNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDRefNo/?RecId=[[RecId]]',$(this));\" data-bound-name='SDRefNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDRefNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDRefNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDRefNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDRefNo", "@SDRefNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDRefNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDRefNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDDeclareDate : 
	DateDataFieldBase<ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Declaration Date";}
		set { } 
	}

	public string DFName=> "SDDeclareDate";

	
	public ShipDoc_SDDeclareDate(ShipDoc Parent) : 
		base(Parent, "SDDeclareDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDDeclareDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDeclareDate").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDeclareDate").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 359;
	}
	public string GetControlName() {
		return "SDDeclareDateValue";
	}
	public string GetDFName() {
		return "SDDeclareDate";
	}
	public string GetTitle() {
		return "Declaration Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDDeclareDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDDeclareDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='SDDeclareDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDDeclareDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDDeclareDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDDeclareDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDDeclareDate", "@SDDeclareDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDDeclareDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDDeclareDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContJobTitle : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Title";}
		set { } 
	}

	public string DFName=> "ContJobTitle";

	
	public Contact_ContJobTitle(Contact Parent) : 
		base(Parent, "ContJobTitle"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Contact_ContJobTitleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContJobTitle").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContJobTitle").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 36;
	}
	public string GetControlName() {
		return "ContJobTitleValue";
	}
	public string GetDFName() {
		return "ContJobTitle";
	}
	public string GetTitle() {
		return "Job Title";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContJobTitle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContJobTitle/?RecId=[[RecId]]',$(this));\" data-bound-name='ContJobTitle' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContJobTitle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContJobTitle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContJobTitle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContJobTitle", "@ContJobTitle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContJobTitle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContJobTitle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDDelPlace : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Place of delivery";}
		set { } 
	}

	public string DFName=> "SDDelPlace";

	
	public ShipDoc_SDDelPlace(ShipDoc Parent) : 
		base(Parent, "SDDelPlace"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDDelPlaceFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDelPlace").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDelPlace").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 360;
	}
	public string GetControlName() {
		return "SDDelPlaceValue";
	}
	public string GetDFName() {
		return "SDDelPlace";
	}
	public string GetTitle() {
		return "Place of delivery";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDDelPlace.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDDelPlace/?RecId=[[RecId]]',$(this));\" data-bound-name='SDDelPlace' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDDelPlace.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDDelPlace";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDDelPlace")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDDelPlace", "@SDDelPlace", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDDelPlace", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDDelPlace", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDDesc : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description (1)";}
		set { } 
	}

	public string DFName=> "SDDesc";

	
	public ShipDoc_SDDesc(ShipDoc Parent) : 
		base(Parent, "SDDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 361;
	}
	public string GetControlName() {
		return "SDDescValue";
	}
	public string GetDFName() {
		return "SDDesc";
	}
	public string GetTitle() {
		return "Description (1)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDDesc/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDDesc'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDDesc", "@SDDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDCommCode1 : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comm Code (1)";}
		set { } 
	}

	public string DFName=> "SDCommCode1";

	
	public ShipDoc_SDCommCode1(ShipDoc Parent) : 
		base(Parent, "SDCommCode1"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDCommCode1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode1").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode1").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 362;
	}
	public string GetControlName() {
		return "SDCommCode1Value";
	}
	public string GetDFName() {
		return "SDCommCode1";
	}
	public string GetTitle() {
		return "Comm Code (1)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDCommCode1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDCommCode1/?RecId=[[RecId]]',$(this));\" data-bound-name='SDCommCode1' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDCommCode1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDCommCode1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDCommCode1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDCommCode1", "@SDCommCode1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDCommCode1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDCommCode1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDQty1 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Quantity (1)";}
		set { } 
	}

	public string DFName=> "SDQty1";

	
	public ShipDoc_SDQty1(ShipDoc Parent) : 
		base(Parent, "SDQty1"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDQty1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty1").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty1").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 363;
	}
	public string GetControlName() {
		return "SDQty1Value";
	}
	public string GetDFName() {
		return "SDQty1";
	}
	public string GetTitle() {
		return "Quantity (1)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDQty1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDQty1/?RecId=[[RecId]]',$(this));\" data-bound-name='SDQty1' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDQty1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDQty1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDQty1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDQty1", "@SDQty1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDQty1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDQty1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDGWeight1 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Gross weight (1)";}
		set { } 
	}

	public string DFName=> "SDGWeight1";

	
	public ShipDoc_SDGWeight1(ShipDoc Parent) : 
		base(Parent, "SDGWeight1"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDGWeight1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight1").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight1").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 364;
	}
	public string GetControlName() {
		return "SDGWeight1Value";
	}
	public string GetDFName() {
		return "SDGWeight1";
	}
	public string GetTitle() {
		return "Gross weight (1)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDGWeight1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDGWeight1/?RecId=[[RecId]]',$(this));\" data-bound-name='SDGWeight1' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDGWeight1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDGWeight1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDGWeight1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDGWeight1", "@SDGWeight1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDGWeight1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDGWeight1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDNWeight1 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Net weight (1)";}
		set { } 
	}

	public string DFName=> "SDNWeight1";

	
	public ShipDoc_SDNWeight1(ShipDoc Parent) : 
		base(Parent, "SDNWeight1"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDNWeight1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight1").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight1").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 365;
	}
	public string GetControlName() {
		return "SDNWeight1Value";
	}
	public string GetDFName() {
		return "SDNWeight1";
	}
	public string GetTitle() {
		return "Net weight (1)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDNWeight1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDNWeight1/?RecId=[[RecId]]',$(this));\" data-bound-name='SDNWeight1' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDNWeight1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDNWeight1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDNWeight1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDNWeight1", "@SDNWeight1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDNWeight1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDNWeight1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDValue1 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Value (1)";}
		set { } 
	}

	public string DFName=> "SDValue1";

	
	public ShipDoc_SDValue1(ShipDoc Parent) : 
		base(Parent, "SDValue1"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDValue1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue1").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue1").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 366;
	}
	public string GetControlName() {
		return "SDValue1Value";
	}
	public string GetDFName() {
		return "SDValue1";
	}
	public string GetTitle() {
		return "Value (1)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDValue1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDValue1/?RecId=[[RecId]]',$(this));\" data-bound-name='SDValue1' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDValue1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDValue1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDValue1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDValue1", "@SDValue1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDValue1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDValue1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDDesc2 : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description (2)";}
		set { } 
	}

	public string DFName=> "SDDesc2";

	
	public ShipDoc_SDDesc2(ShipDoc Parent) : 
		base(Parent, "SDDesc2"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDDesc2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc2").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc2").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 367;
	}
	public string GetControlName() {
		return "SDDesc2Value";
	}
	public string GetDFName() {
		return "SDDesc2";
	}
	public string GetTitle() {
		return "Description (2)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDDesc2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDDesc2/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDDesc2'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDDesc2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDDesc2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDDesc2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDDesc2", "@SDDesc2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDDesc2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDDesc2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDCommCode2 : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comm Code (2)";}
		set { } 
	}

	public string DFName=> "SDCommCode2";

	
	public ShipDoc_SDCommCode2(ShipDoc Parent) : 
		base(Parent, "SDCommCode2"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDCommCode2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode2").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode2").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 368;
	}
	public string GetControlName() {
		return "SDCommCode2Value";
	}
	public string GetDFName() {
		return "SDCommCode2";
	}
	public string GetTitle() {
		return "Comm Code (2)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDCommCode2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDCommCode2/?RecId=[[RecId]]',$(this));\" data-bound-name='SDCommCode2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDCommCode2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDCommCode2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDCommCode2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDCommCode2", "@SDCommCode2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDCommCode2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDCommCode2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDQty2 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Quantity (2)";}
		set { } 
	}

	public string DFName=> "SDQty2";

	
	public ShipDoc_SDQty2(ShipDoc Parent) : 
		base(Parent, "SDQty2"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDQty2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty2").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty2").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 369;
	}
	public string GetControlName() {
		return "SDQty2Value";
	}
	public string GetDFName() {
		return "SDQty2";
	}
	public string GetTitle() {
		return "Quantity (2)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDQty2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDQty2/?RecId=[[RecId]]',$(this));\" data-bound-name='SDQty2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDQty2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDQty2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDQty2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDQty2", "@SDQty2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDQty2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDQty2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContNotes : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Notes";}
		set { } 
	}

	public string DFName=> "ContNotes";

	
	public Contact_ContNotes(Contact Parent) : 
		base(Parent, "ContNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Contact_ContNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContNotes").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContNotes").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 37;
	}
	public string GetControlName() {
		return "ContNotesValue";
	}
	public string GetDFName() {
		return "ContNotes";
	}
	public string GetTitle() {
		return "Notes";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Contact/SaveContNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='ContNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContNotes", "@ContNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDGWeight2 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Gross weight (2)";}
		set { } 
	}

	public string DFName=> "SDGWeight2";

	
	public ShipDoc_SDGWeight2(ShipDoc Parent) : 
		base(Parent, "SDGWeight2"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDGWeight2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight2").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight2").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 370;
	}
	public string GetControlName() {
		return "SDGWeight2Value";
	}
	public string GetDFName() {
		return "SDGWeight2";
	}
	public string GetTitle() {
		return "Gross weight (2)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDGWeight2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDGWeight2/?RecId=[[RecId]]',$(this));\" data-bound-name='SDGWeight2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDGWeight2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDGWeight2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDGWeight2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDGWeight2", "@SDGWeight2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDGWeight2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDGWeight2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDNWeight2 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Net weight (2)";}
		set { } 
	}

	public string DFName=> "SDNWeight2";

	
	public ShipDoc_SDNWeight2(ShipDoc Parent) : 
		base(Parent, "SDNWeight2"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDNWeight2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight2").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight2").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 371;
	}
	public string GetControlName() {
		return "SDNWeight2Value";
	}
	public string GetDFName() {
		return "SDNWeight2";
	}
	public string GetTitle() {
		return "Net weight (2)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDNWeight2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDNWeight2/?RecId=[[RecId]]',$(this));\" data-bound-name='SDNWeight2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDNWeight2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDNWeight2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDNWeight2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDNWeight2", "@SDNWeight2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDNWeight2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDNWeight2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDValue2 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Value (2)";}
		set { } 
	}

	public string DFName=> "SDValue2";

	
	public ShipDoc_SDValue2(ShipDoc Parent) : 
		base(Parent, "SDValue2"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDValue2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue2").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue2").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 372;
	}
	public string GetControlName() {
		return "SDValue2Value";
	}
	public string GetDFName() {
		return "SDValue2";
	}
	public string GetTitle() {
		return "Value (2)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDValue2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDValue2/?RecId=[[RecId]]',$(this));\" data-bound-name='SDValue2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDValue2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDValue2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDValue2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDValue2", "@SDValue2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDValue2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDValue2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDDesc3 : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description (3)";}
		set { } 
	}

	public string DFName=> "SDDesc3";

	
	public ShipDoc_SDDesc3(ShipDoc Parent) : 
		base(Parent, "SDDesc3"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDDesc3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc3").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc3").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 373;
	}
	public string GetControlName() {
		return "SDDesc3Value";
	}
	public string GetDFName() {
		return "SDDesc3";
	}
	public string GetTitle() {
		return "Description (3)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDDesc3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDDesc3/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDDesc3'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDDesc3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDDesc3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDDesc3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDDesc3", "@SDDesc3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDDesc3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDDesc3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDCommCode3 : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comm Code (3)";}
		set { } 
	}

	public string DFName=> "SDCommCode3";

	
	public ShipDoc_SDCommCode3(ShipDoc Parent) : 
		base(Parent, "SDCommCode3"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDCommCode3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode3").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode3").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 374;
	}
	public string GetControlName() {
		return "SDCommCode3Value";
	}
	public string GetDFName() {
		return "SDCommCode3";
	}
	public string GetTitle() {
		return "Comm Code (3)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDCommCode3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDCommCode3/?RecId=[[RecId]]',$(this));\" data-bound-name='SDCommCode3' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDCommCode3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDCommCode3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDCommCode3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDCommCode3", "@SDCommCode3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDCommCode3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDCommCode3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDQty3 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Quantity (3)";}
		set { } 
	}

	public string DFName=> "SDQty3";

	
	public ShipDoc_SDQty3(ShipDoc Parent) : 
		base(Parent, "SDQty3"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDQty3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty3").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty3").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 375;
	}
	public string GetControlName() {
		return "SDQty3Value";
	}
	public string GetDFName() {
		return "SDQty3";
	}
	public string GetTitle() {
		return "Quantity (3)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDQty3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDQty3/?RecId=[[RecId]]',$(this));\" data-bound-name='SDQty3' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDQty3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDQty3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDQty3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDQty3", "@SDQty3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDQty3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDQty3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDGWeight3 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Gross weight (3)";}
		set { } 
	}

	public string DFName=> "SDGWeight3";

	
	public ShipDoc_SDGWeight3(ShipDoc Parent) : 
		base(Parent, "SDGWeight3"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDGWeight3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight3").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight3").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 376;
	}
	public string GetControlName() {
		return "SDGWeight3Value";
	}
	public string GetDFName() {
		return "SDGWeight3";
	}
	public string GetTitle() {
		return "Gross weight (3)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDGWeight3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDGWeight3/?RecId=[[RecId]]',$(this));\" data-bound-name='SDGWeight3' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDGWeight3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDGWeight3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDGWeight3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDGWeight3", "@SDGWeight3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDGWeight3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDGWeight3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDNWeight3 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Net weight (3)";}
		set { } 
	}

	public string DFName=> "SDNWeight3";

	
	public ShipDoc_SDNWeight3(ShipDoc Parent) : 
		base(Parent, "SDNWeight3"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDNWeight3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight3").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight3").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 377;
	}
	public string GetControlName() {
		return "SDNWeight3Value";
	}
	public string GetDFName() {
		return "SDNWeight3";
	}
	public string GetTitle() {
		return "Net weight (3)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDNWeight3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDNWeight3/?RecId=[[RecId]]',$(this));\" data-bound-name='SDNWeight3' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDNWeight3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDNWeight3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDNWeight3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDNWeight3", "@SDNWeight3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDNWeight3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDNWeight3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDValue3 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Value (3)";}
		set { } 
	}

	public string DFName=> "SDValue3";

	
	public ShipDoc_SDValue3(ShipDoc Parent) : 
		base(Parent, "SDValue3"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDValue3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue3").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue3").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 378;
	}
	public string GetControlName() {
		return "SDValue3Value";
	}
	public string GetDFName() {
		return "SDValue3";
	}
	public string GetTitle() {
		return "Value (3)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDValue3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDValue3/?RecId=[[RecId]]',$(this));\" data-bound-name='SDValue3' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDValue3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDValue3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDValue3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDValue3", "@SDValue3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDValue3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDValue3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDDesc4 : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description (4)";}
		set { } 
	}

	public string DFName=> "SDDesc4";

	
	public ShipDoc_SDDesc4(ShipDoc Parent) : 
		base(Parent, "SDDesc4"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDDesc4FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc4").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDDesc4").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 379;
	}
	public string GetControlName() {
		return "SDDesc4Value";
	}
	public string GetDFName() {
		return "SDDesc4";
	}
	public string GetTitle() {
		return "Description (4)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDDesc4.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDDesc4/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDDesc4'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDDesc4.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDDesc4";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDDesc4")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDDesc4", "@SDDesc4", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDDesc4", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDDesc4", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdExpImp : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Export or Import";}
		set { } 
	}

	public string DFName=> "OrdExpImp";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdExpImp").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdExpImp").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.OrdExpImpAsQuery();		}
		return _DataSource;

	}
    
	public Orders_OrdExpImp(Orders Parent) : 
		base(Parent, "OrdExpImp"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdExpImpFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdExpImp").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdExpImp").First().Value(new Orders());
		
		
			return DSUtil.OrdExpImpAsQuery();	}

	public int GetFieldUniqueId() {
		return 38;
	}
	public string GetControlName() {
		return "OrdExpImpValue";
	}
	public string GetDFName() {
		return "OrdExpImp";
	}
	public string GetTitle() {
		return "Export or Import";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdExpImp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdExpImp/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdExpImp'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdExpImp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdExpImp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdExpImp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdExpImp", "@OrdExpImp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdExpImp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdExpImp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDCommCode4 : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Comm Code (4)";}
		set { } 
	}

	public string DFName=> "SDCommCode4";

	
	public ShipDoc_SDCommCode4(ShipDoc Parent) : 
		base(Parent, "SDCommCode4"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDCommCode4FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode4").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCommCode4").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 380;
	}
	public string GetControlName() {
		return "SDCommCode4Value";
	}
	public string GetDFName() {
		return "SDCommCode4";
	}
	public string GetTitle() {
		return "Comm Code (4)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDCommCode4.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDCommCode4/?RecId=[[RecId]]',$(this));\" data-bound-name='SDCommCode4' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDCommCode4.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDCommCode4";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDCommCode4")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDCommCode4", "@SDCommCode4", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDCommCode4", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDCommCode4", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDQty4 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Quantity (4)";}
		set { } 
	}

	public string DFName=> "SDQty4";

	
	public ShipDoc_SDQty4(ShipDoc Parent) : 
		base(Parent, "SDQty4"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDQty4FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty4").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDQty4").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 381;
	}
	public string GetControlName() {
		return "SDQty4Value";
	}
	public string GetDFName() {
		return "SDQty4";
	}
	public string GetTitle() {
		return "Quantity (4)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDQty4.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDQty4/?RecId=[[RecId]]',$(this));\" data-bound-name='SDQty4' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDQty4.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDQty4";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDQty4")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDQty4", "@SDQty4", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDQty4", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDQty4", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDGWeight4 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Gross weight (4)";}
		set { } 
	}

	public string DFName=> "SDGWeight4";

	
	public ShipDoc_SDGWeight4(ShipDoc Parent) : 
		base(Parent, "SDGWeight4"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDGWeight4FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight4").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDGWeight4").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 382;
	}
	public string GetControlName() {
		return "SDGWeight4Value";
	}
	public string GetDFName() {
		return "SDGWeight4";
	}
	public string GetTitle() {
		return "Gross weight (4)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDGWeight4.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDGWeight4/?RecId=[[RecId]]',$(this));\" data-bound-name='SDGWeight4' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDGWeight4.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDGWeight4";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDGWeight4")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDGWeight4", "@SDGWeight4", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDGWeight4", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDGWeight4", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDNWeight4 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Net weight (4)";}
		set { } 
	}

	public string DFName=> "SDNWeight4";

	
	public ShipDoc_SDNWeight4(ShipDoc Parent) : 
		base(Parent, "SDNWeight4"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDNWeight4FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight4").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDNWeight4").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 383;
	}
	public string GetControlName() {
		return "SDNWeight4Value";
	}
	public string GetDFName() {
		return "SDNWeight4";
	}
	public string GetTitle() {
		return "Net weight (4)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDNWeight4.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDNWeight4/?RecId=[[RecId]]',$(this));\" data-bound-name='SDNWeight4' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDNWeight4.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDNWeight4";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDNWeight4")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDNWeight4", "@SDNWeight4", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDNWeight4", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDNWeight4", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDValue4 : 
	FormattableDataFieldBase<double,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Value (4)";}
		set { } 
	}

	public string DFName=> "SDValue4";

	
	public ShipDoc_SDValue4(ShipDoc Parent) : 
		base(Parent, "SDValue4"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class ShipDoc_SDValue4FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue4").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDValue4").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 384;
	}
	public string GetControlName() {
		return "SDValue4Value";
	}
	public string GetDFName() {
		return "SDValue4";
	}
	public string GetTitle() {
		return "Value (4)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDValue4.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDValue4/?RecId=[[RecId]]',$(this));\" data-bound-name='SDValue4' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDValue4.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDValue4";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDValue4")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDValue4", "@SDValue4", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDValue4", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDValue4", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdId : 
	FormattableDataFieldBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "OrdId";

	
	public Orders_OrdId(Orders Parent) : 
		base(Parent, "OrdId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Orders_OrdIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdId").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdId").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 39;
	}
	public string GetControlName() {
		return "OrdIdValue";
	}
	public string GetDFName() {
		return "OrdId";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdId/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdId", "@OrdId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDRecordControl : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Record of Control";}
		set { } 
	}

	public string DFName=> "SDRecordControl";

	
	public ShipDoc_SDRecordControl(ShipDoc Parent) : 
		base(Parent, "SDRecordControl"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDRecordControlFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecordControl").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDRecordControl").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 391;
	}
	public string GetControlName() {
		return "SDRecordControlValue";
	}
	public string GetDFName() {
		return "SDRecordControl";
	}
	public string GetTitle() {
		return "Record of Control";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDRecordControl.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDRecordControl/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SDRecordControl'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDRecordControl.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDRecordControl";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDRecordControl")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDRecordControl", "@SDRecordControl", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDRecordControl", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDRecordControl", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDSignedBy : 
	DataFieldSelectBase<int,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Signed by";}
		set { } 
	}

	public string DFName=> "SDSignedBy";

		public string GetDataSource() {
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSignedBy").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSignedBy").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public ShipDoc_SDSignedBy(ShipDoc Parent) : 
		base(Parent, "SDSignedBy"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class ShipDoc_SDSignedByFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSignedBy").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSignedBy").First().Value(new ShipDoc());
		
		
			return  "SELECT StfId AS KeyValue, StfName AS Description FROM Staff UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 392;
	}
	public string GetControlName() {
		return "SDSignedByValue";
	}
	public string GetDFName() {
		return "SDSignedBy";
	}
	public string GetTitle() {
		return "Signed by";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDSignedBy.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDSignedBy/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='SDSignedBy'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDSignedBy.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDSignedBy";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDSignedBy")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDSignedBy", "@SDSignedBy", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDSignedBy", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDSignedBy", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDSignedByText : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Signed by text";}
		set { } 
	}

	public string DFName=> "SDSignedByText";

	
	public ShipDoc_SDSignedByText(ShipDoc Parent) : 
		base(Parent, "SDSignedByText"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDSignedByTextFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSignedByText").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDSignedByText").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 393;
	}
	public string GetControlName() {
		return "SDSignedByTextValue";
	}
	public string GetDFName() {
		return "SDSignedByText";
	}
	public string GetTitle() {
		return "Signed by text";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDSignedByText.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDSignedByText/?RecId=[[RecId]]',$(this));\" data-bound-name='SDSignedByText' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDSignedByText.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDSignedByText";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDSignedByText")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDSignedByText", "@SDSignedByText", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDSignedByText", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDSignedByText", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDVehNo : 
	DataFieldBase<string,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Vehicle / Trailer No";}
		set { } 
	}

	public string DFName=> "SDVehNo";

	
	public ShipDoc_SDVehNo(ShipDoc Parent) : 
		base(Parent, "SDVehNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ShipDoc_SDVehNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDVehNo").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDVehNo").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 394;
	}
	public string GetControlName() {
		return "SDVehNoValue";
	}
	public string GetDFName() {
		return "SDVehNo";
	}
	public string GetTitle() {
		return "Vehicle / Trailer No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDVehNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDVehNo/?RecId=[[RecId]]',$(this));\" data-bound-name='SDVehNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDVehNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDVehNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDVehNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDVehNo", "@SDVehNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDVehNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDVehNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDCurr : 
	DataFieldSelectBase<int,ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Currency";}
		set { } 
	}

	public string DFName=> "SDCurr";

		public string GetDataSource() {
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCurr").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCurr").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return "select 0 as KeyValue, '' as [Description]";		}
		return _DataSource;

	}
    
	public ShipDoc_SDCurr(ShipDoc Parent) : 
		base(Parent, "SDCurr"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("1");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class ShipDoc_SDCurrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCurr").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDCurr").First().Value(new ShipDoc());
		
		
			return "select 0 as KeyValue, '' as [Description]";	}

	public int GetFieldUniqueId() {
		return 395;
	}
	public string GetControlName() {
		return "SDCurrValue";
	}
	public string GetDFName() {
		return "SDCurr";
	}
	public string GetTitle() {
		return "Currency";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDCurr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDCurr/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='SDCurr'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDCurr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDCurr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SDCurr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDCurr", "@SDCurr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDCurr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDCurr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ShipDoc_SDHMRCDets : 
	BoolDataFieldBase<ShipDoc>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Show HMRC details";}
		set { } 
	}

	public string DFName=> "SDHMRCDets";

	
	public ShipDoc_SDHMRCDets(ShipDoc Parent) : 
		base(Parent, "SDHMRCDets"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("True");
				    }
}


public partial class ShipDoc_SDHMRCDetsFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDHMRCDets").Any()) 
			return DS.GetManager<ShipDoc>().OnDataSource.Where(f=> f.Key == "SDHMRCDets").First().Value(new ShipDoc());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 396;
	}
	public string GetControlName() {
		return "SDHMRCDetsValue";
	}
	public string GetDFName() {
		return "SDHMRCDets";
	}
	public string GetTitle() {
		return "Show HMRC details";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ShipDoc ds;
					ds = (ShipDoc)dsI;
		 
		
		return ds.SDHMRCDets.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ShipDoc ds;
				ds = (ShipDoc)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/ShipDoc/SaveSDHMRCDets/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='SDHMRCDets' [[Val]] /><input type = 'hidden' data-bound-name='SDHMRCDets' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SDHMRCDets.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SDHMRCDets";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "SDHMRCDets")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SDHMRCDets", "@SDHMRCDets", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SDHMRCDets", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ShipDoc").GetFieldOperators("SDHMRCDets", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkId : 
	FormattableDataFieldBase<int,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Truck ID";}
		set { } 
	}

	public string DFName=> "TrkId";

	
	public Truck_TrkId(Truck Parent) : 
		base(Parent, "TrkId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Truck_TrkIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkId").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkId").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 397;
	}
	public string GetControlName() {
		return "TrkIdValue";
	}
	public string GetDFName() {
		return "TrkId";
	}
	public string GetTitle() {
		return "Truck ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkId/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkId", "@TrkId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkName : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Registration No";}
		set { } 
	}

	public string DFName=> "TrkName";

	
	public Truck_TrkName(Truck Parent) : 
		base(Parent, "TrkName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkName").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkName").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 398;
	}
	public string GetControlName() {
		return "TrkNameValue";
	}
	public string GetDFName() {
		return "TrkName";
	}
	public string GetTitle() {
		return "Registration No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkName/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkName", "@TrkName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkNotes : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Notes";}
		set { } 
	}

	public string DFName=> "TrkNotes";

	
	public Truck_TrkNotes(Truck Parent) : 
		base(Parent, "TrkNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkNotes").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkNotes").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 399;
	}
	public string GetControlName() {
		return "TrkNotesValue";
	}
	public string GetDFName() {
		return "TrkNotes";
	}
	public string GetTitle() {
		return "Notes";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='TrkNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkNotes", "@TrkNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCustOrd : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Order No";}
		set { } 
	}

	public string DFName=> "OrdCustOrd";

	
	public Orders_OrdCustOrd(Orders Parent) : 
		base(Parent, "OrdCustOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdCustOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCustOrd").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCustOrd").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 40;
	}
	public string GetControlName() {
		return "OrdCustOrdValue";
	}
	public string GetDFName() {
		return "OrdCustOrd";
	}
	public string GetTitle() {
		return "Client Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCustOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCustOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCustOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCustOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCustOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCustOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCustOrd", "@OrdCustOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCustOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCustOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class TruckMileage_TrkMTruck : 
	DataFieldSelectBase<int,TruckMileage>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Truck";}
		set { } 
	}

	public string DFName=> "TrkMTruck";

		public string GetDataSource() {
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMTruck").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMTruck").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT TrkId AS KeyValue, TrkName AS Description FROM Truck UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public TruckMileage_TrkMTruck(TruckMileage Parent) : 
		base(Parent, "TrkMTruck"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class TruckMileage_TrkMTruckFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMTruck").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMTruck").First().Value(new TruckMileage());
		
		
			return  "SELECT TrkId AS KeyValue, TrkName AS Description FROM Truck UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 400;
	}
	public string GetControlName() {
		return "TrkMTruckValue";
	}
	public string GetDFName() {
		return "TrkMTruck";
	}
	public string GetTitle() {
		return "Truck";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		TruckMileage ds;
					ds = (TruckMileage)dsI;
		 
		
		return ds.TrkMTruck.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		TruckMileage ds;
				ds = (TruckMileage)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/TruckMileage/SaveTrkMTruck/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='TrkMTruck'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMTruck.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMTruck";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMTruck")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMTruck", "@TrkMTruck", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMTruck", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("TruckMileage").GetFieldOperators("TrkMTruck", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class TruckMileage_TrkMPurchDate : 
	DateDataFieldBase<TruckMileage>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date of Purchase";}
		set { } 
	}

	public string DFName=> "TrkMPurchDate";

	
	public TruckMileage_TrkMPurchDate(TruckMileage Parent) : 
		base(Parent, "TrkMPurchDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class TruckMileage_TrkMPurchDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMPurchDate").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMPurchDate").First().Value(new TruckMileage());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 401;
	}
	public string GetControlName() {
		return "TrkMPurchDateValue";
	}
	public string GetDFName() {
		return "TrkMPurchDate";
	}
	public string GetTitle() {
		return "Date of Purchase";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		TruckMileage ds;
					ds = (TruckMileage)dsI;
		 
		
		return ds.TrkMPurchDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		TruckMileage ds;
				ds = (TruckMileage)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/TruckMileage/SaveTrkMPurchDate/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkMPurchDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMPurchDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMPurchDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMPurchDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMPurchDate", "@TrkMPurchDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMPurchDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("TruckMileage").GetFieldOperators("TrkMPurchDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class TruckMileage_TrkMPurchLitre : 
	FormattableDataFieldBase<double,TruckMileage>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Litres purchased";}
		set { } 
	}

	public string DFName=> "TrkMPurchLitre";

	
	public TruckMileage_TrkMPurchLitre(TruckMileage Parent) : 
		base(Parent, "TrkMPurchLitre"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class TruckMileage_TrkMPurchLitreFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMPurchLitre").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMPurchLitre").First().Value(new TruckMileage());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 402;
	}
	public string GetControlName() {
		return "TrkMPurchLitreValue";
	}
	public string GetDFName() {
		return "TrkMPurchLitre";
	}
	public string GetTitle() {
		return "Litres purchased";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		TruckMileage ds;
					ds = (TruckMileage)dsI;
		 
		
		return ds.TrkMPurchLitre.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		TruckMileage ds;
				ds = (TruckMileage)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/TruckMileage/SaveTrkMPurchLitre/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkMPurchLitre' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMPurchLitre.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMPurchLitre";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMPurchLitre")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMPurchLitre", "@TrkMPurchLitre", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMPurchLitre", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("TruckMileage").GetFieldOperators("TrkMPurchLitre", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class TruckMileage_TrkMOdometer : 
	FormattableDataFieldBase<int,TruckMileage>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Odometer (km)";}
		set { } 
	}

	public string DFName=> "TrkMOdometer";

	
	public TruckMileage_TrkMOdometer(TruckMileage Parent) : 
		base(Parent, "TrkMOdometer"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class TruckMileage_TrkMOdometerFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMOdometer").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMOdometer").First().Value(new TruckMileage());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 403;
	}
	public string GetControlName() {
		return "TrkMOdometerValue";
	}
	public string GetDFName() {
		return "TrkMOdometer";
	}
	public string GetTitle() {
		return "Odometer (km)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		TruckMileage ds;
					ds = (TruckMileage)dsI;
		 
		
		return ds.TrkMOdometer.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		TruckMileage ds;
				ds = (TruckMileage)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/TruckMileage/SaveTrkMOdometer/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkMOdometer' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMOdometer.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMOdometer";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMOdometer")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMOdometer", "@TrkMOdometer", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMOdometer", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("TruckMileage").GetFieldOperators("TrkMOdometer", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class TruckMileage_TrkMNotes : 
	DataFieldBase<string,TruckMileage>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Notes";}
		set { } 
	}

	public string DFName=> "TrkMNotes";

	
	public TruckMileage_TrkMNotes(TruckMileage Parent) : 
		base(Parent, "TrkMNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class TruckMileage_TrkMNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMNotes").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMNotes").First().Value(new TruckMileage());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 404;
	}
	public string GetControlName() {
		return "TrkMNotesValue";
	}
	public string GetDFName() {
		return "TrkMNotes";
	}
	public string GetTitle() {
		return "Notes";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		TruckMileage ds;
					ds = (TruckMileage)dsI;
		 
		
		return ds.TrkMNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		TruckMileage ds;
				ds = (TruckMileage)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/TruckMileage/SaveTrkMNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='TrkMNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMNotes", "@TrkMNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("TruckMileage").GetFieldOperators("TrkMNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class TruckMileage_TrkMNextReading : 
	FormattableDataFieldBase<int,TruckMileage>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Next reading (km)";}
		set { } 
	}

	public string DFName=> "TrkMNextReading";

	
	public TruckMileage_TrkMNextReading(TruckMileage Parent) : 
		base(Parent, "TrkMNextReading"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class TruckMileage_TrkMNextReadingFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMNextReading").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMNextReading").First().Value(new TruckMileage());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 405;
	}
	public string GetControlName() {
		return "TrkMNextReadingValue";
	}
	public string GetDFName() {
		return "TrkMNextReading";
	}
	public string GetTitle() {
		return "Next reading (km)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		TruckMileage ds;
					ds = (TruckMileage)dsI;
		 
		
		return ds.TrkMNextReading.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		TruckMileage ds;
				ds = (TruckMileage)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/TruckMileage/SaveTrkMNextReading/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkMNextReading' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMNextReading.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMNextReading";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMNextReading")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMNextReading", "@TrkMNextReading", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMNextReading", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("TruckMileage").GetFieldOperators("TrkMNextReading", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class TruckMileage_TrkMMpg : 
	FormattableDataFieldBase<double,TruckMileage>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Mpg";}
		set { } 
	}

	public string DFName=> "TrkMMpg";

	
	public TruckMileage_TrkMMpg(TruckMileage Parent) : 
		base(Parent, "TrkMMpg"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class TruckMileage_TrkMMpgFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMMpg").Any()) 
			return DS.GetManager<TruckMileage>().OnDataSource.Where(f=> f.Key == "TrkMMpg").First().Value(new TruckMileage());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 406;
	}
	public string GetControlName() {
		return "TrkMMpgValue";
	}
	public string GetDFName() {
		return "TrkMMpg";
	}
	public string GetTitle() {
		return "Mpg";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		TruckMileage ds;
					ds = (TruckMileage)dsI;
		 
		
		return ds.TrkMMpg.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		TruckMileage ds;
				ds = (TruckMileage)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/TruckMileage/SaveTrkMMpg/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkMMpg' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMMpg.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMMpg";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMMpg")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMMpg", "@TrkMMpg", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMMpg", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("TruckMileage").GetFieldOperators("TrkMMpg", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvSentTradeshift : 
	BoolDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sent to Tradeshift";}
		set { } 
	}

	public string DFName=> "InvSentTradeshift";

	
	public Inv_InvSentTradeshift(Inv Parent) : 
		base(Parent, "InvSentTradeshift"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Inv_InvSentTradeshiftFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvSentTradeshift").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvSentTradeshift").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 407;
	}
	public string GetControlName() {
		return "InvSentTradeshiftValue";
	}
	public string GetDFName() {
		return "InvSentTradeshift";
	}
	public string GetTitle() {
		return "Sent to Tradeshift";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvSentTradeshift.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Inv/SaveInvSentTradeshift/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='InvSentTradeshift' [[Val]] /><input type = 'hidden' data-bound-name='InvSentTradeshift' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvSentTradeshift.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvSentTradeshift";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "InvSentTradeshift")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvSentTradeshift", "@InvSentTradeshift", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvSentTradeshift", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvSentTradeshift", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCollectCtry : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collect Country";}
		set { } 
	}

	public string DFName=> "OrdCollectCtry";

	
	public Orders_OrdCollectCtry(Orders Parent) : 
		base(Parent, "OrdCollectCtry"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdCollectCtryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollectCtry").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollectCtry").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 408;
	}
	public string GetControlName() {
		return "OrdCollectCtryValue";
	}
	public string GetDFName() {
		return "OrdCollectCtry";
	}
	public string GetTitle() {
		return "Collect Country";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCollectCtry.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCollectCtry/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCollectCtry' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCollectCtry.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCollectCtry";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCollectCtry")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCollectCtry", "@OrdCollectCtry", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCollectCtry", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCollectCtry", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustId : 
	FormattableDataFieldBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Company ID";}
		set { } 
	}

	public string DFName=> "CustId";

	
	public Customer_CustId(Customer Parent) : 
		base(Parent, "CustId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Customer_CustIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustId").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustId").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 409;
	}
	public string GetControlName() {
		return "CustIdValue";
	}
	public string GetDFName() {
		return "CustId";
	}
	public string GetTitle() {
		return "Company ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustId/?RecId=[[RecId]]',$(this));\" data-bound-name='CustId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustId", "@CustId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDate : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Date";}
		set { } 
	}

	public string DFName=> "OrdDate";

	
	public Orders_OrdDate(Orders Parent) : 
		base(Parent, "OrdDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
		        this.SetValue(DateTime.Now.ToString("dd MMM yy"));
				    }
}


public partial class Orders_OrdDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDate").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDate").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 41;
	}
	public string GetControlName() {
		return "OrdDateValue";
	}
	public string GetDFName() {
		return "OrdDate";
	}
	public string GetTitle() {
		return "Order Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='OrdDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDate", "@OrdDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustName : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Company Name";}
		set { } 
	}

	public string DFName=> "CustName";

	
	public Customer_CustName(Customer Parent) : 
		base(Parent, "CustName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustName").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustName").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 410;
	}
	public string GetControlName() {
		return "CustNameValue";
	}
	public string GetDFName() {
		return "CustName";
	}
	public string GetTitle() {
		return "Company Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustName/?RecId=[[RecId]]',$(this));\" data-bound-name='CustName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustName", "@CustName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustAddr : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Address1";}
		set { } 
	}

	public string DFName=> "CustAddr";

	
	public Customer_CustAddr(Customer Parent) : 
		base(Parent, "CustAddr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAddr").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAddr").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 411;
	}
	public string GetControlName() {
		return "CustAddrValue";
	}
	public string GetDFName() {
		return "CustAddr";
	}
	public string GetTitle() {
		return "Address1";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustAddr/?RecId=[[RecId]]',$(this));\" data-bound-name='CustAddr' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustAddr", "@CustAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustAddr2 : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Address2";}
		set { } 
	}

	public string DFName=> "CustAddr2";

	
	public Customer_CustAddr2(Customer Parent) : 
		base(Parent, "CustAddr2"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustAddr2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAddr2").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAddr2").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 412;
	}
	public string GetControlName() {
		return "CustAddr2Value";
	}
	public string GetDFName() {
		return "CustAddr2";
	}
	public string GetTitle() {
		return "Address2";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustAddr2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustAddr2/?RecId=[[RecId]]',$(this));\" data-bound-name='CustAddr2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustAddr2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustAddr2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustAddr2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustAddr2", "@CustAddr2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustAddr2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustAddr2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustAddr3 : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Address3";}
		set { } 
	}

	public string DFName=> "CustAddr3";

	
	public Customer_CustAddr3(Customer Parent) : 
		base(Parent, "CustAddr3"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustAddr3FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAddr3").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAddr3").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 413;
	}
	public string GetControlName() {
		return "CustAddr3Value";
	}
	public string GetDFName() {
		return "CustAddr3";
	}
	public string GetTitle() {
		return "Address3";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustAddr3.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustAddr3/?RecId=[[RecId]]',$(this));\" data-bound-name='CustAddr3' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustAddr3.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustAddr3";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustAddr3")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustAddr3", "@CustAddr3", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustAddr3", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustAddr3", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustTown : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Town";}
		set { } 
	}

	public string DFName=> "CustTown";

	
	public Customer_CustTown(Customer Parent) : 
		base(Parent, "CustTown"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustTownFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustTown").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustTown").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 414;
	}
	public string GetControlName() {
		return "CustTownValue";
	}
	public string GetDFName() {
		return "CustTown";
	}
	public string GetTitle() {
		return "Town";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustTown.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustTown/?RecId=[[RecId]]',$(this));\" data-bound-name='CustTown' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustTown.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustTown";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustTown")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustTown", "@CustTown", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustTown", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustTown", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCounty : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "County";}
		set { } 
	}

	public string DFName=> "CustCounty";

	
	public Customer_CustCounty(Customer Parent) : 
		base(Parent, "CustCounty"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustCountyFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCounty").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCounty").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 415;
	}
	public string GetControlName() {
		return "CustCountyValue";
	}
	public string GetDFName() {
		return "CustCounty";
	}
	public string GetTitle() {
		return "County";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCounty.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCounty/?RecId=[[RecId]]',$(this));\" data-bound-name='CustCounty' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCounty.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCounty";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCounty")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCounty", "@CustCounty", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCounty", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCounty", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustPC : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Postcode";}
		set { } 
	}

	public string DFName=> "CustPC";

	
	public Customer_CustPC(Customer Parent) : 
		base(Parent, "CustPC"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustPC").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustPC").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 416;
	}
	public string GetControlName() {
		return "CustPCValue";
	}
	public string GetDFName() {
		return "CustPC";
	}
	public string GetTitle() {
		return "Postcode";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustPC/?RecId=[[RecId]]',$(this));\" data-bound-name='CustPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustPC", "@CustPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCtry : 
	DataFieldSelectBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Country";}
		set { } 
	}

	public string DFName=> "CustCtry";

		public string GetDataSource() {
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCtry").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCtry").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CtryId AS KeyValue, CtryName AS Description FROM Country UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Customer_CustCtry(Customer Parent) : 
		base(Parent, "CustCtry"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("217");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Customer_CustCtryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCtry").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCtry").First().Value(new Customer());
		
		
			return  "SELECT CtryId AS KeyValue, CtryName AS Description FROM Country UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 417;
	}
	public string GetControlName() {
		return "CustCtryValue";
	}
	public string GetDFName() {
		return "CustCtry";
	}
	public string GetTitle() {
		return "Country";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCtry.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCtry/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CustCtry'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCtry.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCtry";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCtry")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCtry", "@CustCtry", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCtry", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCtry", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustPhone : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Telephone";}
		set { } 
	}

	public string DFName=> "CustPhone";

	
	public Customer_CustPhone(Customer Parent) : 
		base(Parent, "CustPhone"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustPhoneFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustPhone").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustPhone").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 418;
	}
	public string GetControlName() {
		return "CustPhoneValue";
	}
	public string GetDFName() {
		return "CustPhone";
	}
	public string GetTitle() {
		return "Telephone";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustPhone.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustPhone/?RecId=[[RecId]]',$(this));\" data-bound-name='CustPhone' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustPhone.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustPhone";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustPhone")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustPhone", "@CustPhone", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustPhone", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustPhone", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustFax : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Fax";}
		set { } 
	}

	public string DFName=> "CustFax";

	
	public Customer_CustFax(Customer Parent) : 
		base(Parent, "CustFax"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustFaxFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustFax").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustFax").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 419;
	}
	public string GetControlName() {
		return "CustFaxValue";
	}
	public string GetDFName() {
		return "CustFax";
	}
	public string GetTitle() {
		return "Fax";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustFax.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustFax/?RecId=[[RecId]]',$(this));\" data-bound-name='CustFax' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustFax.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustFax";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustFax")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustFax", "@CustFax", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustFax", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustFax", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdStatus : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Status";}
		set { } 
	}

	public string DFName=> "OrdStatus";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdStatus").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdStatus").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.OrdStatusAsQuery();		}
		return _DataSource;

	}
    
	public Orders_OrdStatus(Orders Parent) : 
		base(Parent, "OrdStatus"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdStatusFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdStatus").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdStatus").First().Value(new Orders());
		
		
			return DSUtil.OrdStatusAsQuery();	}

	public int GetFieldUniqueId() {
		return 42;
	}
	public string GetControlName() {
		return "OrdStatusValue";
	}
	public string GetDFName() {
		return "OrdStatus";
	}
	public string GetTitle() {
		return "Status";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdStatus.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdStatus/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdStatus'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdStatus.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdStatus";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdStatus")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdStatus", "@OrdStatus", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdStatus", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdStatus", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustEM : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "EMail";}
		set { } 
	}

	public string DFName=> "CustEM";

	
	public Customer_CustEM(Customer Parent) : 
		base(Parent, "CustEM"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustEMFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustEM").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 420;
	}
	public string GetControlName() {
		return "CustEMValue";
	}
	public string GetDFName() {
		return "CustEM";
	}
	public string GetTitle() {
		return "EMail";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustEM.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustEM/?RecId=[[RecId]]',$(this));\" data-bound-name='CustEM' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustEM.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustEM";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustEM")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustEM", "@CustEM", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustEM", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustEM", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Country_CtryId : 
	FormattableDataFieldBase<int,Country>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Country ID";}
		set { } 
	}

	public string DFName=> "CtryId";

	
	public Country_CtryId(Country Parent) : 
		base(Parent, "CtryId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Country_CtryIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Country>().OnDataSource.Where(f=> f.Key == "CtryId").Any()) 
			return DS.GetManager<Country>().OnDataSource.Where(f=> f.Key == "CtryId").First().Value(new Country());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 421;
	}
	public string GetControlName() {
		return "CtryIdValue";
	}
	public string GetDFName() {
		return "CtryId";
	}
	public string GetTitle() {
		return "Country ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Country ds;
					ds = (Country)dsI;
		 
		
		return ds.CtryId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Country ds;
				ds = (Country)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Country/SaveCtryId/?RecId=[[RecId]]',$(this));\" data-bound-name='CtryId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CtryId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CtryId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CtryId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CtryId", "@CtryId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CtryId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Country").GetFieldOperators("CtryId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Country_CtryCode : 
	DataFieldBase<string,Country>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Country Code";}
		set { } 
	}

	public string DFName=> "CtryCode";

	
	public Country_CtryCode(Country Parent) : 
		base(Parent, "CtryCode"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Country_CtryCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Country>().OnDataSource.Where(f=> f.Key == "CtryCode").Any()) 
			return DS.GetManager<Country>().OnDataSource.Where(f=> f.Key == "CtryCode").First().Value(new Country());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 422;
	}
	public string GetControlName() {
		return "CtryCodeValue";
	}
	public string GetDFName() {
		return "CtryCode";
	}
	public string GetTitle() {
		return "Country Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Country ds;
					ds = (Country)dsI;
		 
		
		return ds.CtryCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Country ds;
				ds = (Country)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Country/SaveCtryCode/?RecId=[[RecId]]',$(this));\" data-bound-name='CtryCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CtryCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CtryCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CtryCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CtryCode", "@CtryCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CtryCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Country").GetFieldOperators("CtryCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Country_CtryName : 
	DataFieldBase<string,Country>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Country";}
		set { } 
	}

	public string DFName=> "CtryName";

	
	public Country_CtryName(Country Parent) : 
		base(Parent, "CtryName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Country_CtryNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Country>().OnDataSource.Where(f=> f.Key == "CtryName").Any()) 
			return DS.GetManager<Country>().OnDataSource.Where(f=> f.Key == "CtryName").First().Value(new Country());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 423;
	}
	public string GetControlName() {
		return "CtryNameValue";
	}
	public string GetDFName() {
		return "CtryName";
	}
	public string GetTitle() {
		return "Country";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Country ds;
					ds = (Country)dsI;
		 
		
		return ds.CtryName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Country ds;
				ds = (Country)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Country/SaveCtryName/?RecId=[[RecId]]',$(this));\" data-bound-name='CtryName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CtryName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CtryName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CtryName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CtryName", "@CtryName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CtryName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Country").GetFieldOperators("CtryName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Contact_ContCust : 
	DataFieldAutoCompleteSingleBase<int,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Company";}
		set { } 
	}

	public string DFName=> "ContCust";

		public string GetDataSource() {
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContCust").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContCust").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Contact_ContCust(Contact Parent) : 
		base(Parent, "ContCust"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Contact_ContCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContCust").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContCust").First().Value(new Contact());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 424;
	}
	public string GetControlName() {
		return "ContCustValue";
	}
	public string GetDFName() {
		return "ContCust";
	}
	public string GetTitle() {
		return "Company";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Contact/AutoCompleteContCust/' onchange=\"javascript:IQAutoSave('/Contact/SaveContCust/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='ContCust'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Contact/AutoCompleteContCust/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContCust", "@ContCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Contact_ContName : 
	DataFieldBase<string,Contact>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Full Name";}
		set { } 
	}

	public string DFName=> "ContName";

	
	public Contact_ContName(Contact Parent) : 
		base(Parent, "ContName"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Contact_ContNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContName").Any()) 
			return DS.GetManager<Contact>().OnDataSource.Where(f=> f.Key == "ContName").First().Value(new Contact());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 425;
	}
	public string GetControlName() {
		return "ContNameValue";
	}
	public string GetDFName() {
		return "ContName";
	}
	public string GetTitle() {
		return "Full Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Contact ds;
					ds = (Contact)dsI;
		 
		
		return ds.ContName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Contact ds;
				ds = (Contact)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Contact/SaveContName/?RecId=[[RecId]]',$(this));\" data-bound-name='ContName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.ContName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "ContName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "ContName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "ContName", "@ContName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "ContName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Contact").GetFieldOperators("ContName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Week_WkSDateText : 
	DataFieldBase<string,Week>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Monday Text";}
		set { } 
	}

	public string DFName=> "WkSDateText";

	
	public Week_WkSDateText(Week Parent) : 
		base(Parent, "WkSDateText"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Week_WkSDateTextFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkSDateText").Any()) 
			return DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkSDateText").First().Value(new Week());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 426;
	}
	public string GetControlName() {
		return "WkSDateTextValue";
	}
	public string GetDFName() {
		return "WkSDateText";
	}
	public string GetTitle() {
		return "Monday Text";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Week ds;
					ds = (Week)dsI;
		 
		
		return ds.WkSDateText.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Week ds;
				ds = (Week)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Week/SaveWkSDateText/?RecId=[[RecId]]',$(this));\" data-bound-name='WkSDateText' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WkSDateText.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WkSDateText";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WkSDateText")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WkSDateText", "@WkSDateText", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WkSDateText", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Week").GetFieldOperators("WkSDateText", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Week_WkEDateText : 
	DataFieldBase<string,Week>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sunday Text";}
		set { } 
	}

	public string DFName=> "WkEDateText";

	
	public Week_WkEDateText(Week Parent) : 
		base(Parent, "WkEDateText"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Week_WkEDateTextFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkEDateText").Any()) 
			return DS.GetManager<Week>().OnDataSource.Where(f=> f.Key == "WkEDateText").First().Value(new Week());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 427;
	}
	public string GetControlName() {
		return "WkEDateTextValue";
	}
	public string GetDFName() {
		return "WkEDateText";
	}
	public string GetTitle() {
		return "Sunday Text";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Week ds;
					ds = (Week)dsI;
		 
		
		return ds.WkEDateText.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Week ds;
				ds = (Week)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Week/SaveWkEDateText/?RecId=[[RecId]]',$(this));\" data-bound-name='WkEDateText' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WkEDateText.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WkEDateText";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WkEDateText")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WkEDateText", "@WkEDateText", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WkEDateText", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Week").GetFieldOperators("WkEDateText", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobId : 
	FormattableDataFieldBase<int,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Id";}
		set { } 
	}

	public string DFName=> "JobId";

	
	public Job_JobId(Job Parent) : 
		base(Parent, "JobId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Job_JobIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobId").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobId").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 428;
	}
	public string GetControlName() {
		return "JobIdValue";
	}
	public string GetDFName() {
		return "JobId";
	}
	public string GetTitle() {
		return "Job Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Job/SaveJobId/?RecId=[[RecId]]',$(this));\" data-bound-name='JobId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobId", "@JobId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class FerryRoute_FRId : 
	FormattableDataFieldBase<int,FerryRoute>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route Id";}
		set { } 
	}

	public string DFName=> "FRId";

	
	public FerryRoute_FRId(FerryRoute Parent) : 
		base(Parent, "FRId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class FerryRoute_FRIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<FerryRoute>().OnDataSource.Where(f=> f.Key == "FRId").Any()) 
			return DS.GetManager<FerryRoute>().OnDataSource.Where(f=> f.Key == "FRId").First().Value(new FerryRoute());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 429;
	}
	public string GetControlName() {
		return "FRIdValue";
	}
	public string GetDFName() {
		return "FRId";
	}
	public string GetTitle() {
		return "Route Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		FerryRoute ds;
					ds = (FerryRoute)dsI;
		 
		
		return ds.FRId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		FerryRoute ds;
				ds = (FerryRoute)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/FerryRoute/SaveFRId/?RecId=[[RecId]]',$(this));\" data-bound-name='FRId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.FRId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "FRId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "FRId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "FRId", "@FRId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "FRId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("FerryRoute").GetFieldOperators("FRId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdReqDate : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Required Date";}
		set { } 
	}

	public string DFName=> "OrdReqDate";

	
	public Orders_OrdReqDate(Orders Parent) : 
		base(Parent, "OrdReqDate"
			,"ddd dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdReqDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdReqDate").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdReqDate").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 43;
	}
	public string GetControlName() {
		return "OrdReqDateValue";
	}
	public string GetDFName() {
		return "OrdReqDate";
	}
	public string GetTitle() {
		return "Required Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdReqDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='ddd DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdReqDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='OrdReqDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdReqDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdReqDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdReqDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdReqDate", "@OrdReqDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdReqDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdReqDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class VATCodes_VATId : 
	FormattableDataFieldBase<int,VATCodes>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Id";}
		set { } 
	}

	public string DFName=> "VATId";

	
	public VATCodes_VATId(VATCodes Parent) : 
		base(Parent, "VATId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class VATCodes_VATIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATId").Any()) 
			return DS.GetManager<VATCodes>().OnDataSource.Where(f=> f.Key == "VATId").First().Value(new VATCodes());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 430;
	}
	public string GetControlName() {
		return "VATIdValue";
	}
	public string GetDFName() {
		return "VATId";
	}
	public string GetTitle() {
		return "VAT Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		VATCodes ds;
					ds = (VATCodes)dsI;
		 
		
		return ds.VATId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		VATCodes ds;
				ds = (VATCodes)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/VATCodes/SaveVATId/?RecId=[[RecId]]',$(this));\" data-bound-name='VATId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.VATId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "VATId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "VATId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "VATId", "@VATId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "VATId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("VATCodes").GetFieldOperators("VATId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Trailer_TrlId : 
	FormattableDataFieldBase<int,Trailer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Trailer Id";}
		set { } 
	}

	public string DFName=> "TrlId";

	
	public Trailer_TrlId(Trailer Parent) : 
		base(Parent, "TrlId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Trailer_TrlIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlId").Any()) 
			return DS.GetManager<Trailer>().OnDataSource.Where(f=> f.Key == "TrlId").First().Value(new Trailer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 431;
	}
	public string GetControlName() {
		return "TrlIdValue";
	}
	public string GetDFName() {
		return "TrlId";
	}
	public string GetTitle() {
		return "Trailer Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Trailer ds;
					ds = (Trailer)dsI;
		 
		
		return ds.TrlId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Trailer ds;
				ds = (Trailer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Trailer/SaveTrlId/?RecId=[[RecId]]',$(this));\" data-bound-name='TrlId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrlId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrlId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrlId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrlId", "@TrlId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrlId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Trailer").GetFieldOperators("TrlId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustUserName : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Portal UserName";}
		set { } 
	}

	public string DFName=> "CustUserName";

	
	public Customer_CustUserName(Customer Parent) : 
		base(Parent, "CustUserName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustUserNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustUserName").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustUserName").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 432;
	}
	public string GetControlName() {
		return "CustUserNameValue";
	}
	public string GetDFName() {
		return "CustUserName";
	}
	public string GetTitle() {
		return "Portal UserName";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustUserName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustUserName/?RecId=[[RecId]]',$(this));\" data-bound-name='CustUserName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustUserName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustUserName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustUserName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustUserName", "@CustUserName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustUserName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustUserName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustPassword : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Portal Password";}
		set { } 
	}

	public string DFName=> "CustPassword";

	
	public Customer_CustPassword(Customer Parent) : 
		base(Parent, "CustPassword"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustPasswordFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustPassword").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustPassword").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 433;
	}
	public string GetControlName() {
		return "CustPasswordValue";
	}
	public string GetDFName() {
		return "CustPassword";
	}
	public string GetTitle() {
		return "Portal Password";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustPassword.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustPassword/?RecId=[[RecId]]',$(this));\" data-bound-name='CustPassword' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustPassword.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustPassword";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustPassword")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustPassword", "@CustPassword", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustPassword", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustPassword", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdSupp : 
	DataFieldAutoCompleteSingleBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier Name";}
		set { } 
	}

	public string DFName=> "OrdSupp";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSupp").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSupp").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdSupp(Orders Parent) : 
		base(Parent, "OrdSupp"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdSuppFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSupp").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSupp").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 44;
	}
	public string GetControlName() {
		return "OrdSuppValue";
	}
	public string GetDFName() {
		return "OrdSupp";
	}
	public string GetTitle() {
		return "Supplier Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdSupp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Orders/AutoCompleteOrdSupp/' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdSupp/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='OrdSupp'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdSupp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdSupp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Orders/AutoCompleteOrdSupp/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdSupp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdSupp", "@OrdSupp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdSupp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdSupp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Orders_OrdSupPC : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier Postcode";}
		set { } 
	}

	public string DFName=> "OrdSupPC";

	
	public Orders_OrdSupPC(Orders Parent) : 
		base(Parent, "OrdSupPC"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdSupPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSupPC").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSupPC").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 45;
	}
	public string GetControlName() {
		return "OrdSupPCValue";
	}
	public string GetDFName() {
		return "OrdSupPC";
	}
	public string GetTitle() {
		return "Supplier Postcode";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdSupPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdSupPC/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdSupPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdSupPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdSupPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdSupPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdSupPC", "@OrdSupPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdSupPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdSupPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCollPoint : 
	DataFieldAutoCompleteSingleBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection Point";}
		set { } 
	}

	public string DFName=> "OrdCollPoint";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollPoint").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollPoint").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdCollPoint(Orders Parent) : 
		base(Parent, "OrdCollPoint"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdCollPointFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollPoint").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollPoint").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 46;
	}
	public string GetControlName() {
		return "OrdCollPointValue";
	}
	public string GetDFName() {
		return "OrdCollPoint";
	}
	public string GetTitle() {
		return "Collection Point";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCollPoint.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Orders/AutoCompleteOrdCollPoint/' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCollPoint/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='OrdCollPoint'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCollPoint.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCollPoint";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Orders/AutoCompleteOrdCollPoint/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCollPoint")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCollPoint", "@OrdCollPoint", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCollPoint", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCollPoint", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Orders_OrdCollPointPC : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection Postcode";}
		set { } 
	}

	public string DFName=> "OrdCollPointPC";

	
	public Orders_OrdCollPointPC(Orders Parent) : 
		base(Parent, "OrdCollPointPC"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdCollPointPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollPointPC").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollPointPC").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 47;
	}
	public string GetControlName() {
		return "OrdCollPointPCValue";
	}
	public string GetDFName() {
		return "OrdCollPointPC";
	}
	public string GetTitle() {
		return "Collection Postcode";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCollPointPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCollPointPC/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCollPointPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCollPointPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCollPointPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCollPointPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCollPointPC", "@OrdCollPointPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCollPointPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCollPointPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdSuppRef : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier Reference";}
		set { } 
	}

	public string DFName=> "OrdSuppRef";

	
	public Orders_OrdSuppRef(Orders Parent) : 
		base(Parent, "OrdSuppRef"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdSuppRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSuppRef").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSuppRef").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 48;
	}
	public string GetControlName() {
		return "OrdSuppRefValue";
	}
	public string GetDFName() {
		return "OrdSuppRef";
	}
	public string GetTitle() {
		return "Supplier Reference";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdSuppRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdSuppRef/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdSuppRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdSuppRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdSuppRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdSuppRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdSuppRef", "@OrdSuppRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdSuppRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdSuppRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdConsign : 
	DataFieldAutoCompleteSingleBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Consignee Name";}
		set { } 
	}

	public string DFName=> "OrdConsign";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsign").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsign").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdConsign(Orders Parent) : 
		base(Parent, "OrdConsign"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdConsignFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsign").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsign").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 49;
	}
	public string GetControlName() {
		return "OrdConsignValue";
	}
	public string GetDFName() {
		return "OrdConsign";
	}
	public string GetTitle() {
		return "Consignee Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdConsign.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Orders/AutoCompleteOrdConsign/' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdConsign/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='OrdConsign'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdConsign.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdConsign";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Orders/AutoCompleteOrdConsign/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdConsign")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdConsign", "@OrdConsign", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdConsign", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdConsign", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Orders_OrdConsignPC : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Consign Postcode";}
		set { } 
	}

	public string DFName=> "OrdConsignPC";

	
	public Orders_OrdConsignPC(Orders Parent) : 
		base(Parent, "OrdConsignPC"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdConsignPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsignPC").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsignPC").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 50;
	}
	public string GetControlName() {
		return "OrdConsignPCValue";
	}
	public string GetDFName() {
		return "OrdConsignPC";
	}
	public string GetTitle() {
		return "Consign Postcode";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdConsignPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdConsignPC/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdConsignPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdConsignPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdConsignPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdConsignPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdConsignPC", "@OrdConsignPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdConsignPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdConsignPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDelPoint : 
	DataFieldAutoCompleteSingleBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Point";}
		set { } 
	}

	public string DFName=> "OrdDelPoint";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelPoint").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelPoint").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdDelPoint(Orders Parent) : 
		base(Parent, "OrdDelPoint"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdDelPointFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelPoint").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelPoint").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 51;
	}
	public string GetControlName() {
		return "OrdDelPointValue";
	}
	public string GetDFName() {
		return "OrdDelPoint";
	}
	public string GetTitle() {
		return "Delivery Point";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDelPoint.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Orders/AutoCompleteOrdDelPoint/' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDelPoint/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='OrdDelPoint'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDelPoint.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDelPoint";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Orders/AutoCompleteOrdDelPoint/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDelPoint")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDelPoint", "@OrdDelPoint", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDelPoint", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDelPoint", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Orders_OrdDelPointPC : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Postcode";}
		set { } 
	}

	public string DFName=> "OrdDelPointPC";

	
	public Orders_OrdDelPointPC(Orders Parent) : 
		base(Parent, "OrdDelPointPC"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdDelPointPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelPointPC").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelPointPC").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 52;
	}
	public string GetControlName() {
		return "OrdDelPointPCValue";
	}
	public string GetDFName() {
		return "OrdDelPointPC";
	}
	public string GetTitle() {
		return "Delivery Postcode";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDelPointPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDelPointPC/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdDelPointPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDelPointPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDelPointPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDelPointPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDelPointPC", "@OrdDelPointPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDelPointPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDelPointPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdId : 
	FormattableDataFieldBase<int,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "REDS ID";}
		set { } 
	}

	public string DFName=> "RDOrdId";

	
	public REDSOrder_RDOrdId(REDSOrder Parent) : 
		base(Parent, "RDOrdId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrder_RDOrdIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdId").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdId").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 521;
	}
	public string GetControlName() {
		return "RDOrdIdValue";
	}
	public string GetDFName() {
		return "RDOrdId";
	}
	public string GetTitle() {
		return "REDS ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdId/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdId", "@RDOrdId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdCustId : 
	FormattableDataFieldBase<int,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client ID";}
		set { } 
	}

	public string DFName=> "RDOrdCustId";

	
	public REDSOrder_RDOrdCustId(REDSOrder Parent) : 
		base(Parent, "RDOrdCustId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrder_RDOrdCustIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdCustId").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdCustId").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 522;
	}
	public string GetControlName() {
		return "RDOrdCustIdValue";
	}
	public string GetDFName() {
		return "RDOrdCustId";
	}
	public string GetTitle() {
		return "Client ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdCustId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdCustId/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdCustId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdCustId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdCustId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdCustId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdCustId", "@RDOrdCustId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdCustId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdCustId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdDANNo : 
	DataFieldBase<string,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "DAN Number";}
		set { } 
	}

	public string DFName=> "RDOrdDANNo";

	
	public REDSOrder_RDOrdDANNo(REDSOrder Parent) : 
		base(Parent, "RDOrdDANNo"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class REDSOrder_RDOrdDANNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDANNo").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDANNo").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 523;
	}
	public string GetControlName() {
		return "RDOrdDANNoValue";
	}
	public string GetDFName() {
		return "RDOrdDANNo";
	}
	public string GetTitle() {
		return "DAN Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdDANNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdDANNo/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdDANNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdDANNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdDANNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdDANNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdDANNo", "@RDOrdDANNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdDANNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdDANNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdJobNo : 
	DataFieldAutoCompleteSingleBase<int,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "RDOrdJobNo";

		public string GetDataSource() {
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdJobNo").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdJobNo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public REDSOrder_RDOrdJobNo(REDSOrder Parent) : 
		base(Parent, "RDOrdJobNo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class REDSOrder_RDOrdJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdJobNo").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdJobNo").First().Value(new REDSOrder());
		
		
			return  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 524;
	}
	public string GetControlName() {
		return "RDOrdJobNoValue";
	}
	public string GetDFName() {
		return "RDOrdJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/REDSOrder/AutoCompleteRDOrdJobNo/' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdJobNo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='RDOrdJobNo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/REDSOrder/AutoCompleteRDOrdJobNo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdJobNo", "@RDOrdJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class REDSOrder_RDOrdJobLetter : 
	DataFieldBase<string,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Letter";}
		set { } 
	}

	public string DFName=> "RDOrdJobLetter";

	
	public REDSOrder_RDOrdJobLetter(REDSOrder Parent) : 
		base(Parent, "RDOrdJobLetter"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSOrder_RDOrdJobLetterFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdJobLetter").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdJobLetter").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 525;
	}
	public string GetControlName() {
		return "RDOrdJobLetterValue";
	}
	public string GetDFName() {
		return "RDOrdJobLetter";
	}
	public string GetTitle() {
		return "Job Letter";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdJobLetter.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdJobLetter/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdJobLetter' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdJobLetter.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdJobLetter";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdJobLetter")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdJobLetter", "@RDOrdJobLetter", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdJobLetter", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdJobLetter", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdCustOrd : 
	DataFieldBase<string,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Order No";}
		set { } 
	}

	public string DFName=> "RDOrdCustOrd";

	
	public REDSOrder_RDOrdCustOrd(REDSOrder Parent) : 
		base(Parent, "RDOrdCustOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSOrder_RDOrdCustOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdCustOrd").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdCustOrd").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 526;
	}
	public string GetControlName() {
		return "RDOrdCustOrdValue";
	}
	public string GetDFName() {
		return "RDOrdCustOrd";
	}
	public string GetTitle() {
		return "Client Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdCustOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdCustOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdCustOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdCustOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdCustOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdCustOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdCustOrd", "@RDOrdCustOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdCustOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdCustOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdArrDate : 
	DateDataFieldBase<REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Arrival Date";}
		set { } 
	}

	public string DFName=> "RDOrdArrDate";

	
	public REDSOrder_RDOrdArrDate(REDSOrder Parent) : 
		base(Parent, "RDOrdArrDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSOrder_RDOrdArrDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdArrDate").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdArrDate").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 527;
	}
	public string GetControlName() {
		return "RDOrdArrDateValue";
	}
	public string GetDFName() {
		return "RDOrdArrDate";
	}
	public string GetTitle() {
		return "Arrival Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdArrDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdArrDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='RDOrdArrDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdArrDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdArrDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdArrDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdArrDate", "@RDOrdArrDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdArrDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdArrDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdDelDate : 
	DateDataFieldBase<REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Date";}
		set { } 
	}

	public string DFName=> "RDOrdDelDate";

	
	public REDSOrder_RDOrdDelDate(REDSOrder Parent) : 
		base(Parent, "RDOrdDelDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSOrder_RDOrdDelDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDelDate").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDelDate").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 528;
	}
	public string GetControlName() {
		return "RDOrdDelDateValue";
	}
	public string GetDFName() {
		return "RDOrdDelDate";
	}
	public string GetTitle() {
		return "Delivery Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdDelDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdDelDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='RDOrdDelDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdDelDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdDelDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdDelDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdDelDate", "@RDOrdDelDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdDelDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdDelDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLRDId : 
	FormattableDataFieldBase<int,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "REDS ID";}
		set { } 
	}

	public string DFName=> "RDOLRDId";

	
	public REDSOrdLine_RDOLRDId(REDSOrdLine Parent) : 
		base(Parent, "RDOLRDId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLRDIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLRDId").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLRDId").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 529;
	}
	public string GetControlName() {
		return "RDOLRDIdValue";
	}
	public string GetDFName() {
		return "RDOLRDId";
	}
	public string GetTitle() {
		return "REDS ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLRDId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLRDId/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLRDId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLRDId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLRDId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLRDId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLRDId", "@RDOLRDId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLRDId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLRDId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdVATPaidBy : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Paid By";}
		set { } 
	}

	public string DFName=> "OrdVATPaidBy";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdVATPaidBy").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdVATPaidBy").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.OrdVATPaidByAsQuery();		}
		return _DataSource;

	}
    
	public Orders_OrdVATPaidBy(Orders Parent) : 
		base(Parent, "OrdVATPaidBy"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdVATPaidByFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdVATPaidBy").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdVATPaidBy").First().Value(new Orders());
		
		
			return DSUtil.OrdVATPaidByAsQuery();	}

	public int GetFieldUniqueId() {
		return 53;
	}
	public string GetControlName() {
		return "OrdVATPaidByValue";
	}
	public string GetDFName() {
		return "OrdVATPaidBy";
	}
	public string GetTitle() {
		return "VAT Paid By";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdVATPaidBy.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdVATPaidBy/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdVATPaidBy'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdVATPaidBy.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdVATPaidBy";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdVATPaidBy")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdVATPaidBy", "@OrdVATPaidBy", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdVATPaidBy", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdVATPaidBy", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLLineNo : 
	FormattableDataFieldBase<int,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Number";}
		set { } 
	}

	public string DFName=> "RDOLLineNo";

	
	public REDSOrdLine_RDOLLineNo(REDSOrdLine Parent) : 
		base(Parent, "RDOLLineNo"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLLineNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLLineNo").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLLineNo").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 530;
	}
	public string GetControlName() {
		return "RDOLLineNoValue";
	}
	public string GetDFName() {
		return "RDOLLineNo";
	}
	public string GetTitle() {
		return "Line Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLLineNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLLineNo/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLLineNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLLineNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLLineNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLLineNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLLineNo", "@RDOLLineNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLLineNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLLineNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLCases : 
	FormattableDataFieldBase<int,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Cases";}
		set { } 
	}

	public string DFName=> "RDOLCases";

	
	public REDSOrdLine_RDOLCases(REDSOrdLine Parent) : 
		base(Parent, "RDOLCases"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLCasesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLCases").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLCases").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 531;
	}
	public string GetControlName() {
		return "RDOLCasesValue";
	}
	public string GetDFName() {
		return "RDOLCases";
	}
	public string GetTitle() {
		return "Cases";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLCases.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLCases/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLCases' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLCases.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLCases";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLCases")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLCases", "@RDOLCases", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLCases", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLCases", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLBottleCase : 
	FormattableDataFieldBase<int,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Bottles per Case";}
		set { } 
	}

	public string DFName=> "RDOLBottleCase";

	
	public REDSOrdLine_RDOLBottleCase(REDSOrdLine Parent) : 
		base(Parent, "RDOLBottleCase"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLBottleCaseFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLBottleCase").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLBottleCase").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 532;
	}
	public string GetControlName() {
		return "RDOLBottleCaseValue";
	}
	public string GetDFName() {
		return "RDOLBottleCase";
	}
	public string GetTitle() {
		return "Bottles per Case";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLBottleCase.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLBottleCase/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLBottleCase' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLBottleCase.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLBottleCase";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLBottleCase")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLBottleCase", "@RDOLBottleCase", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLBottleCase", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLBottleCase", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLBottleSize : 
	FormattableDataFieldBase<double,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Bottle Size (cl)";}
		set { } 
	}

	public string DFName=> "RDOLBottleSize";

	
	public REDSOrdLine_RDOLBottleSize(REDSOrdLine Parent) : 
		base(Parent, "RDOLBottleSize"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLBottleSizeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLBottleSize").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLBottleSize").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 533;
	}
	public string GetControlName() {
		return "RDOLBottleSizeValue";
	}
	public string GetDFName() {
		return "RDOLBottleSize";
	}
	public string GetTitle() {
		return "Bottle Size (cl)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLBottleSize.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLBottleSize/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLBottleSize' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLBottleSize.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLBottleSize";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLBottleSize")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLBottleSize", "@RDOLBottleSize", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLBottleSize", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLBottleSize", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLTaxCode : 
	DataFieldSelectBase<int,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Tax Code";}
		set { } 
	}

	public string DFName=> "RDOLTaxCode";

		public string GetDataSource() {
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLTaxCode").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLTaxCode").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT RDTaxId AS KeyValue, RDTaxCode AS Description FROM REDSTax UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public REDSOrdLine_RDOLTaxCode(REDSOrdLine Parent) : 
		base(Parent, "RDOLTaxCode"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class REDSOrdLine_RDOLTaxCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLTaxCode").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLTaxCode").First().Value(new REDSOrdLine());
		
		
			return  "SELECT RDTaxId AS KeyValue, RDTaxCode AS Description FROM REDSTax UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 534;
	}
	public string GetControlName() {
		return "RDOLTaxCodeValue";
	}
	public string GetDFName() {
		return "RDOLTaxCode";
	}
	public string GetTitle() {
		return "Tax Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLTaxCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLTaxCode/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='RDOLTaxCode'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLTaxCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLTaxCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLTaxCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLTaxCode", "@RDOLTaxCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLTaxCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLTaxCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdOrder : 
	FormattableDataFieldBase<int,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "RDOrdOrder";

	
	public REDSOrder_RDOrdOrder(REDSOrder Parent) : 
		base(Parent, "RDOrdOrder"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrder_RDOrdOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdOrder").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdOrder").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 535;
	}
	public string GetControlName() {
		return "RDOrdOrderValue";
	}
	public string GetDFName() {
		return "RDOrdOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdOrder/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdOrder' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdOrder", "@RDOrdOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdCust : 
	DataFieldBase<string,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Name";}
		set { } 
	}

	public string DFName=> "RDOrdCust";

	
	public REDSOrder_RDOrdCust(REDSOrder Parent) : 
		base(Parent, "RDOrdCust"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class REDSOrder_RDOrdCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdCust").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdCust").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 536;
	}
	public string GetControlName() {
		return "RDOrdCustValue";
	}
	public string GetDFName() {
		return "RDOrdCust";
	}
	public string GetTitle() {
		return "Client Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdCust/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdCust' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdCust", "@RDOrdCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLAlcPct : 
	FormattableDataFieldBase<double,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Alcohol Percentage";}
		set { } 
	}

	public string DFName=> "RDOLAlcPct";

	
	public REDSOrdLine_RDOLAlcPct(REDSOrdLine Parent) : 
		base(Parent, "RDOLAlcPct"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLAlcPctFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLAlcPct").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLAlcPct").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 537;
	}
	public string GetControlName() {
		return "RDOLAlcPctValue";
	}
	public string GetDFName() {
		return "RDOLAlcPct";
	}
	public string GetTitle() {
		return "Alcohol Percentage";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLAlcPct.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLAlcPct/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLAlcPct' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLAlcPct.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLAlcPct";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLAlcPct")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLAlcPct", "@RDOLAlcPct", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLAlcPct", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLAlcPct", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLLitres : 
	FormattableDataFieldBase<double,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Litres";}
		set { } 
	}

	public string DFName=> "RDOLLitres";

	
	public REDSOrdLine_RDOLLitres(REDSOrdLine Parent) : 
		base(Parent, "RDOLLitres"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLLitresFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLLitres").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLLitres").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 538;
	}
	public string GetControlName() {
		return "RDOLLitresValue";
	}
	public string GetDFName() {
		return "RDOLLitres";
	}
	public string GetTitle() {
		return "Litres";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLLitres.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLLitres/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLLitres' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLLitres.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLLitres";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLLitres")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLLitres", "@RDOLLitres", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLLitres", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLLitres", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLDutyDue : 
	FormattableDataFieldBase<double,REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Duty Due";}
		set { } 
	}

	public string DFName=> "RDOLDutyDue";

	
	public REDSOrdLine_RDOLDutyDue(REDSOrdLine Parent) : 
		base(Parent, "RDOLDutyDue"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class REDSOrdLine_RDOLDutyDueFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLDutyDue").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLDutyDue").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 539;
	}
	public string GetControlName() {
		return "RDOLDutyDueValue";
	}
	public string GetDFName() {
		return "RDOLDutyDue";
	}
	public string GetTitle() {
		return "Duty Due";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLDutyDue.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLDutyDue/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOLDutyDue' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLDutyDue.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLDutyDue";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOLDutyDue")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLDutyDue", "@RDOLDutyDue", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLDutyDue", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLDutyDue", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdVATNo : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "VAT Number";}
		set { } 
	}

	public string DFName=> "OrdVATNo";

	
	public Orders_OrdVATNo(Orders Parent) : 
		base(Parent, "OrdVATNo"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdVATNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdVATNo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdVATNo").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 54;
	}
	public string GetControlName() {
		return "OrdVATNoValue";
	}
	public string GetDFName() {
		return "OrdVATNo";
	}
	public string GetTitle() {
		return "VAT Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdVATNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdVATNo/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdVATNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdVATNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdVATNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdVATNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdVATNo", "@OrdVATNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdVATNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdVATNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrdLine_RDOLLocked : 
	BoolDataFieldBase<REDSOrdLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Locked";}
		set { } 
	}

	public string DFName=> "RDOLLocked";

	
	public REDSOrdLine_RDOLLocked(REDSOrdLine Parent) : 
		base(Parent, "RDOLLocked"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class REDSOrdLine_RDOLLockedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLLocked").Any()) 
			return DS.GetManager<REDSOrdLine>().OnDataSource.Where(f=> f.Key == "RDOLLocked").First().Value(new REDSOrdLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 540;
	}
	public string GetControlName() {
		return "RDOLLockedValue";
	}
	public string GetDFName() {
		return "RDOLLocked";
	}
	public string GetTitle() {
		return "Locked";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrdLine ds;
					ds = (REDSOrdLine)dsI;
		 
		
		return ds.RDOLLocked.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrdLine ds;
				ds = (REDSOrdLine)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/REDSOrdLine/SaveRDOLLocked/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='RDOLLocked' [[Val]] /><input type = 'hidden' data-bound-name='RDOLLocked' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOLLocked.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOLLocked";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "RDOLLocked")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOLLocked", "@RDOLLocked", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOLLocked", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrdLine").GetFieldOperators("RDOLLocked", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSTax_RDTaxCode : 
	DataFieldBase<string,REDSTax>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Tax Code";}
		set { } 
	}

	public string DFName=> "RDTaxCode";

	
	public REDSTax_RDTaxCode(REDSTax Parent) : 
		base(Parent, "RDTaxCode"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSTax_RDTaxCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxCode").Any()) 
			return DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxCode").First().Value(new REDSTax());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 541;
	}
	public string GetControlName() {
		return "RDTaxCodeValue";
	}
	public string GetDFName() {
		return "RDTaxCode";
	}
	public string GetTitle() {
		return "Tax Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSTax ds;
					ds = (REDSTax)dsI;
		 
		
		return ds.RDTaxCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSTax ds;
				ds = (REDSTax)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSTax/SaveRDTaxCode/?RecId=[[RecId]]',$(this));\" data-bound-name='RDTaxCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDTaxCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDTaxCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDTaxCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDTaxCode", "@RDTaxCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDTaxCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSTax").GetFieldOperators("RDTaxCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSTax_RDTaxAlcPct : 
	FormattableDataFieldBase<double,REDSTax>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Alcohol Percentage";}
		set { } 
	}

	public string DFName=> "RDTaxAlcPct";

	
	public REDSTax_RDTaxAlcPct(REDSTax Parent) : 
		base(Parent, "RDTaxAlcPct"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class REDSTax_RDTaxAlcPctFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxAlcPct").Any()) 
			return DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxAlcPct").First().Value(new REDSTax());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 542;
	}
	public string GetControlName() {
		return "RDTaxAlcPctValue";
	}
	public string GetDFName() {
		return "RDTaxAlcPct";
	}
	public string GetTitle() {
		return "Alcohol Percentage";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSTax ds;
					ds = (REDSTax)dsI;
		 
		
		return ds.RDTaxAlcPct.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSTax ds;
				ds = (REDSTax)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSTax/SaveRDTaxAlcPct/?RecId=[[RecId]]',$(this));\" data-bound-name='RDTaxAlcPct' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDTaxAlcPct.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDTaxAlcPct";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDTaxAlcPct")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDTaxAlcPct", "@RDTaxAlcPct", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDTaxAlcPct", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSTax").GetFieldOperators("RDTaxAlcPct", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSTax_RDTaxType : 
	FormattableDataFieldBase<int,REDSTax>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Type";}
		set { } 
	}

	public string DFName=> "RDTaxType";

	
	public REDSTax_RDTaxType(REDSTax Parent) : 
		base(Parent, "RDTaxType"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class REDSTax_RDTaxTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxType").Any()) 
			return DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxType").First().Value(new REDSTax());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 543;
	}
	public string GetControlName() {
		return "RDTaxTypeValue";
	}
	public string GetDFName() {
		return "RDTaxType";
	}
	public string GetTitle() {
		return "Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSTax ds;
					ds = (REDSTax)dsI;
		 
		
		return ds.RDTaxType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSTax ds;
				ds = (REDSTax)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSTax/SaveRDTaxType/?RecId=[[RecId]]',$(this));\" data-bound-name='RDTaxType' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDTaxType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDTaxType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDTaxType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDTaxType", "@RDTaxType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDTaxType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSTax").GetFieldOperators("RDTaxType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSTax_RDTaxDutyRate : 
	DataFieldBase<double,REDSTax>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Duty Rate £ per ltr";}
		set { } 
	}

	public string DFName=> "RDTaxDutyRate";

	
	public REDSTax_RDTaxDutyRate(REDSTax Parent) : 
		base(Parent, "RDTaxDutyRate"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class REDSTax_RDTaxDutyRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxDutyRate").Any()) 
			return DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxDutyRate").First().Value(new REDSTax());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 544;
	}
	public string GetControlName() {
		return "RDTaxDutyRateValue";
	}
	public string GetDFName() {
		return "RDTaxDutyRate";
	}
	public string GetTitle() {
		return "Duty Rate £ per ltr";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSTax ds;
					ds = (REDSTax)dsI;
		 
		
		return ds.RDTaxDutyRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSTax ds;
				ds = (REDSTax)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSTax/SaveRDTaxDutyRate/?RecId=[[RecId]]',$(this));\" data-bound-name='RDTaxDutyRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDTaxDutyRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDTaxDutyRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDTaxDutyRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDTaxDutyRate", "@RDTaxDutyRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDTaxDutyRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSTax").GetFieldOperators("RDTaxDutyRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdInvCreated : 
	BoolDataFieldBase<REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Created";}
		set { } 
	}

	public string DFName=> "RDOrdInvCreated";

	
	public REDSOrder_RDOrdInvCreated(REDSOrder Parent) : 
		base(Parent, "RDOrdInvCreated"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class REDSOrder_RDOrdInvCreatedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdInvCreated").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdInvCreated").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 545;
	}
	public string GetControlName() {
		return "RDOrdInvCreatedValue";
	}
	public string GetDFName() {
		return "RDOrdInvCreated";
	}
	public string GetTitle() {
		return "Invoice Created";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdInvCreated.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdInvCreated/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='RDOrdInvCreated' [[Val]] /><input type = 'hidden' data-bound-name='RDOrdInvCreated' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdInvCreated.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdInvCreated";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "RDOrdInvCreated")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdInvCreated", "@RDOrdInvCreated", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdInvCreated", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdInvCreated", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DutyRateHist_DRHTaxCode : 
	DataFieldAutoCompleteSingleBase<int,DutyRateHist>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Tax Code";}
		set { } 
	}

	public string DFName=> "DRHTaxCode";

		public string GetDataSource() {
		if(DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHTaxCode").Any()) 
			return DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHTaxCode").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT RDTaxId AS KeyValue, RDTaxCode AS Description FROM REDSTax UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public DutyRateHist_DRHTaxCode(DutyRateHist Parent) : 
		base(Parent, "DRHTaxCode"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class DutyRateHist_DRHTaxCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHTaxCode").Any()) 
			return DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHTaxCode").First().Value(new DutyRateHist());
		
		
			return  "SELECT RDTaxId AS KeyValue, RDTaxCode AS Description FROM REDSTax UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 546;
	}
	public string GetControlName() {
		return "DRHTaxCodeValue";
	}
	public string GetDFName() {
		return "DRHTaxCode";
	}
	public string GetTitle() {
		return "Tax Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DutyRateHist ds;
					ds = (DutyRateHist)dsI;
		 
		
		return ds.DRHTaxCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DutyRateHist ds;
				ds = (DutyRateHist)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/DutyRateHist/AutoCompleteDRHTaxCode/' onchange=\"javascript:IQAutoSave('/DutyRateHist/SaveDRHTaxCode/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='DRHTaxCode'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DRHTaxCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DRHTaxCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/DutyRateHist/AutoCompleteDRHTaxCode/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DRHTaxCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DRHTaxCode", "@DRHTaxCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DRHTaxCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DutyRateHist").GetFieldOperators("DRHTaxCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class DutyRateHist_DRHChangeDate : 
	DateDataFieldBase<DutyRateHist>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date of Change";}
		set { } 
	}

	public string DFName=> "DRHChangeDate";

	
	public DutyRateHist_DRHChangeDate(DutyRateHist Parent) : 
		base(Parent, "DRHChangeDate"
			,"dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class DutyRateHist_DRHChangeDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHChangeDate").Any()) 
			return DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHChangeDate").First().Value(new DutyRateHist());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 547;
	}
	public string GetControlName() {
		return "DRHChangeDateValue";
	}
	public string GetDFName() {
		return "DRHChangeDate";
	}
	public string GetTitle() {
		return "Date of Change";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DutyRateHist ds;
					ds = (DutyRateHist)dsI;
		 
		
		return ds.DRHChangeDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DutyRateHist ds;
				ds = (DutyRateHist)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/DutyRateHist/SaveDRHChangeDate/?RecId=[[RecId]]',$(this));\" data-bound-name='DRHChangeDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DRHChangeDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DRHChangeDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DRHChangeDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DRHChangeDate", "@DRHChangeDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DRHChangeDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DutyRateHist").GetFieldOperators("DRHChangeDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DutyRateHist_DRHDutyRate : 
	FormattableDataFieldBase<double,DutyRateHist>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Duty Rate";}
		set { } 
	}

	public string DFName=> "DRHDutyRate";

	
	public DutyRateHist_DRHDutyRate(DutyRateHist Parent) : 
		base(Parent, "DRHDutyRate"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class DutyRateHist_DRHDutyRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHDutyRate").Any()) 
			return DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHDutyRate").First().Value(new DutyRateHist());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 548;
	}
	public string GetControlName() {
		return "DRHDutyRateValue";
	}
	public string GetDFName() {
		return "DRHDutyRate";
	}
	public string GetTitle() {
		return "Duty Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DutyRateHist ds;
					ds = (DutyRateHist)dsI;
		 
		
		return ds.DRHDutyRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DutyRateHist ds;
				ds = (DutyRateHist)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/DutyRateHist/SaveDRHDutyRate/?RecId=[[RecId]]',$(this));\" data-bound-name='DRHDutyRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DRHDutyRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DRHDutyRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DRHDutyRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DRHDutyRate", "@DRHDutyRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DRHDutyRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DutyRateHist").GetFieldOperators("DRHDutyRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DutyRateHist_DRHAlcPct : 
	FormattableDataFieldBase<double,DutyRateHist>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Alcohol %age";}
		set { } 
	}

	public string DFName=> "DRHAlcPct";

	
	public DutyRateHist_DRHAlcPct(DutyRateHist Parent) : 
		base(Parent, "DRHAlcPct"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class DutyRateHist_DRHAlcPctFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHAlcPct").Any()) 
			return DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHAlcPct").First().Value(new DutyRateHist());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 549;
	}
	public string GetControlName() {
		return "DRHAlcPctValue";
	}
	public string GetDFName() {
		return "DRHAlcPct";
	}
	public string GetTitle() {
		return "Alcohol %age";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DutyRateHist ds;
					ds = (DutyRateHist)dsI;
		 
		
		return ds.DRHAlcPct.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DutyRateHist ds;
				ds = (DutyRateHist)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/DutyRateHist/SaveDRHAlcPct/?RecId=[[RecId]]',$(this));\" data-bound-name='DRHAlcPct' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DRHAlcPct.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DRHAlcPct";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DRHAlcPct")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DRHAlcPct", "@DRHAlcPct", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DRHAlcPct", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DutyRateHist").GetFieldOperators("DRHAlcPct", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDANNoFrom : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "DAN Number From";}
		set { } 
	}

	public string DFName=> "OrdDANNoFrom";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDANNoFrom").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDANNoFrom").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.OrdVATPaidByAsQuery();		}
		return _DataSource;

	}
    
	public Orders_OrdDANNoFrom(Orders Parent) : 
		base(Parent, "OrdDANNoFrom"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdDANNoFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDANNoFrom").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDANNoFrom").First().Value(new Orders());
		
		
			return DSUtil.OrdVATPaidByAsQuery();	}

	public int GetFieldUniqueId() {
		return 55;
	}
	public string GetControlName() {
		return "OrdDANNoFromValue";
	}
	public string GetDFName() {
		return "OrdDANNoFrom";
	}
	public string GetTitle() {
		return "DAN Number From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDANNoFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDANNoFrom/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdDANNoFrom'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDANNoFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDANNoFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDANNoFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDANNoFrom", "@OrdDANNoFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDANNoFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDANNoFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdDesc : 
	DataFieldBase<string,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "RDOrdDesc";

	
	public REDSOrder_RDOrdDesc(REDSOrder Parent) : 
		base(Parent, "RDOrdDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSOrder_RDOrdDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDesc").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDesc").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 551;
	}
	public string GetControlName() {
		return "RDOrdDescValue";
	}
	public string GetDFName() {
		return "RDOrdDesc";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdDesc/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdDesc' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdDesc", "@RDOrdDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdLocked : 
	BoolDataFieldBase<REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Locked";}
		set { } 
	}

	public string DFName=> "RDOrdLocked";

	
	public REDSOrder_RDOrdLocked(REDSOrder Parent) : 
		base(Parent, "RDOrdLocked"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class REDSOrder_RDOrdLockedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdLocked").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdLocked").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 552;
	}
	public string GetControlName() {
		return "RDOrdLockedValue";
	}
	public string GetDFName() {
		return "RDOrdLocked";
	}
	public string GetTitle() {
		return "Locked";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdLocked.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdLocked/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='RDOrdLocked' [[Val]] /><input type = 'hidden' data-bound-name='RDOrdLocked' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdLocked.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdLocked";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "RDOrdLocked")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdLocked", "@RDOrdLocked", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdLocked", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdLocked", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdDutyPaid : 
	BoolDataFieldBase<REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Duty Paid";}
		set { } 
	}

	public string DFName=> "RDOrdDutyPaid";

	
	public REDSOrder_RDOrdDutyPaid(REDSOrder Parent) : 
		base(Parent, "RDOrdDutyPaid"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class REDSOrder_RDOrdDutyPaidFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDutyPaid").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdDutyPaid").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 553;
	}
	public string GetControlName() {
		return "RDOrdDutyPaidValue";
	}
	public string GetDFName() {
		return "RDOrdDutyPaid";
	}
	public string GetTitle() {
		return "Duty Paid";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdDutyPaid.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdDutyPaid/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='RDOrdDutyPaid' [[Val]] /><input type = 'hidden' data-bound-name='RDOrdDutyPaid' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdDutyPaid.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdDutyPaid";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "RDOrdDutyPaid")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdDutyPaid", "@RDOrdDutyPaid", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdDutyPaid", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdDutyPaid", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdARCNo : 
	DataFieldBase<string,REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "ARC Number";}
		set { } 
	}

	public string DFName=> "RDOrdARCNo";

	
	public REDSOrder_RDOrdARCNo(REDSOrder Parent) : 
		base(Parent, "RDOrdARCNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSOrder_RDOrdARCNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdARCNo").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdARCNo").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 554;
	}
	public string GetControlName() {
		return "RDOrdARCNoValue";
	}
	public string GetDFName() {
		return "RDOrdARCNo";
	}
	public string GetTitle() {
		return "ARC Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdARCNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdARCNo/?RecId=[[RecId]]',$(this));\" data-bound-name='RDOrdARCNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdARCNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdARCNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDOrdARCNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdARCNo", "@RDOrdARCNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdARCNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdARCNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSOrder_RDOrdHM10 : 
	BoolDataFieldBase<REDSOrder>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "HM10";}
		set { } 
	}

	public string DFName=> "RDOrdHM10";

	
	public REDSOrder_RDOrdHM10(REDSOrder Parent) : 
		base(Parent, "RDOrdHM10"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class REDSOrder_RDOrdHM10FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdHM10").Any()) 
			return DS.GetManager<REDSOrder>().OnDataSource.Where(f=> f.Key == "RDOrdHM10").First().Value(new REDSOrder());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 555;
	}
	public string GetControlName() {
		return "RDOrdHM10Value";
	}
	public string GetDFName() {
		return "RDOrdHM10";
	}
	public string GetTitle() {
		return "HM10";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSOrder ds;
					ds = (REDSOrder)dsI;
		 
		
		return ds.RDOrdHM10.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSOrder ds;
				ds = (REDSOrder)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/REDSOrder/SaveRDOrdHM10/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='RDOrdHM10' [[Val]] /><input type = 'hidden' data-bound-name='RDOrdHM10' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDOrdHM10.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDOrdHM10";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "RDOrdHM10")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDOrdHM10", "@RDOrdHM10", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDOrdHM10", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSOrder").GetFieldOperators("RDOrdHM10", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSEAD_RDEADId : 
	DataFieldBase<string,REDSEAD>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "eAD Number";}
		set { } 
	}

	public string DFName=> "RDEADId";

	
	public REDSEAD_RDEADId(REDSEAD Parent) : 
		base(Parent, "RDEADId"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class REDSEAD_RDEADIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSEAD>().OnDataSource.Where(f=> f.Key == "RDEADId").Any()) 
			return DS.GetManager<REDSEAD>().OnDataSource.Where(f=> f.Key == "RDEADId").First().Value(new REDSEAD());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 556;
	}
	public string GetControlName() {
		return "RDEADIdValue";
	}
	public string GetDFName() {
		return "RDEADId";
	}
	public string GetTitle() {
		return "eAD Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSEAD ds;
					ds = (REDSEAD)dsI;
		 
		
		return ds.RDEADId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSEAD ds;
				ds = (REDSEAD)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSEAD/SaveRDEADId/?RecId=[[RecId]]',$(this));\" data-bound-name='RDEADId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDEADId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDEADId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDEADId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDEADId", "@RDEADId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDEADId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSEAD").GetFieldOperators("RDEADId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSEAD_RDEADRDId : 
	FormattableDataFieldBase<int,REDSEAD>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "REDS ID";}
		set { } 
	}

	public string DFName=> "RDEADRDId";

	
	public REDSEAD_RDEADRDId(REDSEAD Parent) : 
		base(Parent, "RDEADRDId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class REDSEAD_RDEADRDIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSEAD>().OnDataSource.Where(f=> f.Key == "RDEADRDId").Any()) 
			return DS.GetManager<REDSEAD>().OnDataSource.Where(f=> f.Key == "RDEADRDId").First().Value(new REDSEAD());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 557;
	}
	public string GetControlName() {
		return "RDEADRDIdValue";
	}
	public string GetDFName() {
		return "RDEADRDId";
	}
	public string GetTitle() {
		return "REDS ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSEAD ds;
					ds = (REDSEAD)dsI;
		 
		
		return ds.RDEADRDId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSEAD ds;
				ds = (REDSEAD)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSEAD/SaveRDEADRDId/?RecId=[[RecId]]',$(this));\" data-bound-name='RDEADRDId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDEADRDId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDEADRDId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDEADRDId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDEADRDId", "@RDEADRDId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDEADRDId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSEAD").GetFieldOperators("RDEADRDId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class REDSTax_RDTaxId : 
	FormattableDataFieldBase<int,REDSTax>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Tax Code Id";}
		set { } 
	}

	public string DFName=> "RDTaxId";

	
	public REDSTax_RDTaxId(REDSTax Parent) : 
		base(Parent, "RDTaxId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class REDSTax_RDTaxIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxId").Any()) 
			return DS.GetManager<REDSTax>().OnDataSource.Where(f=> f.Key == "RDTaxId").First().Value(new REDSTax());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 558;
	}
	public string GetControlName() {
		return "RDTaxIdValue";
	}
	public string GetDFName() {
		return "RDTaxId";
	}
	public string GetTitle() {
		return "Tax Code Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		REDSTax ds;
					ds = (REDSTax)dsI;
		 
		
		return ds.RDTaxId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		REDSTax ds;
				ds = (REDSTax)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/REDSTax/SaveRDTaxId/?RecId=[[RecId]]',$(this));\" data-bound-name='RDTaxId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RDTaxId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RDTaxId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RDTaxId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RDTaxId", "@RDTaxId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RDTaxId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("REDSTax").GetFieldOperators("RDTaxId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DutyRateHist_DRHId : 
	FormattableDataFieldBase<int,DutyRateHist>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "History Id";}
		set { } 
	}

	public string DFName=> "DRHId";

	
	public DutyRateHist_DRHId(DutyRateHist Parent) : 
		base(Parent, "DRHId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class DutyRateHist_DRHIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHId").Any()) 
			return DS.GetManager<DutyRateHist>().OnDataSource.Where(f=> f.Key == "DRHId").First().Value(new DutyRateHist());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 559;
	}
	public string GetControlName() {
		return "DRHIdValue";
	}
	public string GetDFName() {
		return "DRHId";
	}
	public string GetTitle() {
		return "History Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DutyRateHist ds;
					ds = (DutyRateHist)dsI;
		 
		
		return ds.DRHId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DutyRateHist ds;
				ds = (DutyRateHist)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/DutyRateHist/SaveDRHId/?RecId=[[RecId]]',$(this));\" data-bound-name='DRHId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DRHId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DRHId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DRHId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DRHId", "@DRHId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DRHId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DutyRateHist").GetFieldOperators("DRHId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDANNo : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "DAN Number";}
		set { } 
	}

	public string DFName=> "OrdDANNo";

	
	public Orders_OrdDANNo(Orders Parent) : 
		base(Parent, "OrdDANNo"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdDANNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDANNo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDANNo").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 56;
	}
	public string GetControlName() {
		return "OrdDANNoValue";
	}
	public string GetDFName() {
		return "OrdDANNo";
	}
	public string GetTitle() {
		return "DAN Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDANNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDANNo/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdDANNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDANNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDANNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDANNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDANNo", "@OrdDANNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDANNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDANNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdBondFrom : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "REDS/Bond From";}
		set { } 
	}

	public string DFName=> "OrdBondFrom";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdBondFrom").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdBondFrom").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.OrdVATPaidByAsQuery();		}
		return _DataSource;

	}
    
	public Orders_OrdBondFrom(Orders Parent) : 
		base(Parent, "OrdBondFrom"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdBondFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdBondFrom").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdBondFrom").First().Value(new Orders());
		
		
			return DSUtil.OrdVATPaidByAsQuery();	}

	public int GetFieldUniqueId() {
		return 57;
	}
	public string GetControlName() {
		return "OrdBondFromValue";
	}
	public string GetDFName() {
		return "OrdBondFrom";
	}
	public string GetTitle() {
		return "REDS/Bond From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdBondFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdBondFrom/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdBondFrom'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdBondFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdBondFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdBondFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdBondFrom", "@OrdBondFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdBondFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdBondFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdBondCode : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "REDS/Bond Code";}
		set { } 
	}

	public string DFName=> "OrdBondCode";

	
	public Orders_OrdBondCode(Orders Parent) : 
		base(Parent, "OrdBondCode"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdBondCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdBondCode").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdBondCode").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 58;
	}
	public string GetControlName() {
		return "OrdBondCodeValue";
	}
	public string GetDFName() {
		return "OrdBondCode";
	}
	public string GetTitle() {
		return "REDS/Bond Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdBondCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdBondCode/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdBondCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdBondCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdBondCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdBondCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdBondCode", "@OrdBondCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdBondCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdBondCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCust : 
	DataFieldAutoCompleteSingleBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Name";}
		set { } 
	}

	public string DFName=> "OrdCust";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCust").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCust").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdCust(Orders Parent) : 
		base(Parent, "OrdCust"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCust").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCust").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 59;
	}
	public string GetControlName() {
		return "OrdCustValue";
	}
	public string GetDFName() {
		return "OrdCust";
	}
	public string GetTitle() {
		return "Client Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Orders/AutoCompleteOrdCust/' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCust/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='OrdCust'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Orders/AutoCompleteOrdCust/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCust", "@OrdCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Orders_OrdCustPC : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Postcode";}
		set { } 
	}

	public string DFName=> "OrdCustPC";

	
	public Orders_OrdCustPC(Orders Parent) : 
		base(Parent, "OrdCustPC"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdCustPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCustPC").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCustPC").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 60;
	}
	public string GetControlName() {
		return "OrdCustPCValue";
	}
	public string GetDFName() {
		return "OrdCustPC";
	}
	public string GetTitle() {
		return "Client Postcode";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCustPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCustPC/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCustPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCustPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCustPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCustPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCustPC", "@OrdCustPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCustPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCustPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDateAvail : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date Available";}
		set { } 
	}

	public string DFName=> "OrdDateAvail";

	
	public Orders_OrdDateAvail(Orders Parent) : 
		base(Parent, "OrdDateAvail"
			,"ddd dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdDateAvailFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDateAvail").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDateAvail").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 61;
	}
	public string GetControlName() {
		return "OrdDateAvailValue";
	}
	public string GetDFName() {
		return "OrdDateAvail";
	}
	public string GetTitle() {
		return "Date Available";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDateAvail.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='ddd DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDateAvail/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='OrdDateAvail' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDateAvail.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDateAvail";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDateAvail")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDateAvail", "@OrdDateAvail", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDateAvail", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDateAvail", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdJob : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Job Number";}
		set { } 
	}

	public string DFName=> "OrdJob";

	
	public Orders_OrdJob(Orders Parent) : 
		base(Parent, "OrdJob"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdJobFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJob").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdJob").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 62;
	}
	public string GetControlName() {
		return "OrdJobValue";
	}
	public string GetDFName() {
		return "OrdJob";
	}
	public string GetTitle() {
		return "Order Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdJob.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdJob/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdJob' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdJob.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdJob";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdJob")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdJob", "@OrdJob", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdJob", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdJob", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStId : 
	FormattableDataFieldBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Intrastat ID";}
		set { } 
	}

	public string DFName=> "IStId";

	
	public IStatRec_IStId(IStatRec Parent) : 
		base(Parent, "IStId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStId").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStId").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 626;
	}
	public string GetControlName() {
		return "IStIdValue";
	}
	public string GetDFName() {
		return "IStId";
	}
	public string GetTitle() {
		return "Intrastat ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStId/?RecId=[[RecId]]',$(this));\" data-bound-name='IStId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStId", "@IStId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStOrder : 
	FormattableDataFieldBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "IStOrder";

	
	public IStatRec_IStOrder(IStatRec Parent) : 
		base(Parent, "IStOrder"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStOrder").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStOrder").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 627;
	}
	public string GetControlName() {
		return "IStOrderValue";
	}
	public string GetDFName() {
		return "IStOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStOrder/?RecId=[[RecId]]',$(this));\" data-bound-name='IStOrder' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStOrder", "@IStOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStCustId : 
	FormattableDataFieldBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client ID";}
		set { } 
	}

	public string DFName=> "IStCustId";

	
	public IStatRec_IStCustId(IStatRec Parent) : 
		base(Parent, "IStCustId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStCustIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCustId").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCustId").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 628;
	}
	public string GetControlName() {
		return "IStCustIdValue";
	}
	public string GetDFName() {
		return "IStCustId";
	}
	public string GetTitle() {
		return "Client ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStCustId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStCustId/?RecId=[[RecId]]',$(this));\" data-bound-name='IStCustId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStCustId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStCustId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStCustId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStCustId", "@IStCustId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStCustId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStCustId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStCust : 
	DataFieldBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Name";}
		set { } 
	}

	public string DFName=> "IStCust";

	
	public IStatRec_IStCust(IStatRec Parent) : 
		base(Parent, "IStCust"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class IStatRec_IStCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCust").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCust").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 629;
	}
	public string GetControlName() {
		return "IStCustValue";
	}
	public string GetDFName() {
		return "IStCust";
	}
	public string GetTitle() {
		return "Client Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStCust/?RecId=[[RecId]]',$(this));\" data-bound-name='IStCust' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStCust", "@IStCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCollDate : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection Date";}
		set { } 
	}

	public string DFName=> "OrdCollDate";

	
	public Orders_OrdCollDate(Orders Parent) : 
		base(Parent, "OrdCollDate"
			,"ddd dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdCollDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollDate").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollDate").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 63;
	}
	public string GetControlName() {
		return "OrdCollDateValue";
	}
	public string GetDFName() {
		return "OrdCollDate";
	}
	public string GetTitle() {
		return "Collection Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCollDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCollDate/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCollDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCollDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCollDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCollDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCollDate", "@OrdCollDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCollDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCollDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStSuppId : 
	FormattableDataFieldBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier ID";}
		set { } 
	}

	public string DFName=> "IStSuppId";

	
	public IStatRec_IStSuppId(IStatRec Parent) : 
		base(Parent, "IStSuppId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStSuppIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSuppId").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSuppId").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 630;
	}
	public string GetControlName() {
		return "IStSuppIdValue";
	}
	public string GetDFName() {
		return "IStSuppId";
	}
	public string GetTitle() {
		return "Supplier ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStSuppId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStSuppId/?RecId=[[RecId]]',$(this));\" data-bound-name='IStSuppId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStSuppId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStSuppId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStSuppId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStSuppId", "@IStSuppId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStSuppId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStSuppId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStSupp : 
	DataFieldBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supplier Name";}
		set { } 
	}

	public string DFName=> "IStSupp";

	
	public IStatRec_IStSupp(IStatRec Parent) : 
		base(Parent, "IStSupp"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class IStatRec_IStSuppFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSupp").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSupp").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 631;
	}
	public string GetControlName() {
		return "IStSuppValue";
	}
	public string GetDFName() {
		return "IStSupp";
	}
	public string GetTitle() {
		return "Supplier Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStSupp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStSupp/?RecId=[[RecId]]',$(this));\" data-bound-name='IStSupp' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStSupp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStSupp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStSupp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStSupp", "@IStSupp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStSupp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStSupp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStCustOrd : 
	DataFieldBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Order No";}
		set { } 
	}

	public string DFName=> "IStCustOrd";

	
	public IStatRec_IStCustOrd(IStatRec Parent) : 
		base(Parent, "IStCustOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class IStatRec_IStCustOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCustOrd").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCustOrd").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 632;
	}
	public string GetControlName() {
		return "IStCustOrdValue";
	}
	public string GetDFName() {
		return "IStCustOrd";
	}
	public string GetTitle() {
		return "Client Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStCustOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStCustOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='IStCustOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStCustOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStCustOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStCustOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStCustOrd", "@IStCustOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStCustOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStCustOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStJobNo : 
	DataFieldBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "IStJobNo";

	
	public IStatRec_IStJobNo(IStatRec Parent) : 
		base(Parent, "IStJobNo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStJobNo").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStJobNo").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 633;
	}
	public string GetControlName() {
		return "IStJobNoValue";
	}
	public string GetDFName() {
		return "IStJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStJobNo/?RecId=[[RecId]]',$(this));\" data-bound-name='IStJobNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStJobNo", "@IStJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStDate : 
	DateDataFieldBase<IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Intrastat Date";}
		set { } 
	}

	public string DFName=> "IStDate";

	
	public IStatRec_IStDate(IStatRec Parent) : 
		base(Parent, "IStDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class IStatRec_IStDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStDate").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStDate").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 634;
	}
	public string GetControlName() {
		return "IStDateValue";
	}
	public string GetDFName() {
		return "IStDate";
	}
	public string GetTitle() {
		return "Intrastat Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='IStDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStDate", "@IStDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStCommCode : 
	FormattableDataFieldBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Commodity Code";}
		set { } 
	}

	public string DFName=> "IStCommCode";

	
	public IStatRec_IStCommCode(IStatRec Parent) : 
		base(Parent, "IStCommCode"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStCommCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCommCode").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStCommCode").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 635;
	}
	public string GetControlName() {
		return "IStCommCodeValue";
	}
	public string GetDFName() {
		return "IStCommCode";
	}
	public string GetTitle() {
		return "Commodity Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStCommCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStCommCode/?RecId=[[RecId]]',$(this));\" data-bound-name='IStCommCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStCommCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStCommCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStCommCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStCommCode", "@IStCommCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStCommCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStCommCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStInvVal : 
	FormattableDataFieldBase<double,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Value";}
		set { } 
	}

	public string DFName=> "IStInvVal";

	
	public IStatRec_IStInvVal(IStatRec Parent) : 
		base(Parent, "IStInvVal"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStInvValFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvVal").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvVal").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 636;
	}
	public string GetControlName() {
		return "IStInvValValue";
	}
	public string GetDFName() {
		return "IStInvVal";
	}
	public string GetTitle() {
		return "Invoice Value";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStInvVal.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStInvVal/?RecId=[[RecId]]',$(this));\" data-bound-name='IStInvVal' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStInvVal.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStInvVal";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStInvVal")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStInvVal", "@IStInvVal", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStInvVal", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStInvVal", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStInvCurr : 
	DataFieldSelectBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Currency";}
		set { } 
	}

	public string DFName=> "IStInvCurr";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvCurr").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvCurr").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return "select 0 as KeyValue, '' as [Description]";		}
		return _DataSource;

	}
    
	public IStatRec_IStInvCurr(IStatRec Parent) : 
		base(Parent, "IStInvCurr"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStInvCurrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvCurr").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvCurr").First().Value(new IStatRec());
		
		
			return "select 0 as KeyValue, '' as [Description]";	}

	public int GetFieldUniqueId() {
		return 637;
	}
	public string GetControlName() {
		return "IStInvCurrValue";
	}
	public string GetDFName() {
		return "IStInvCurr";
	}
	public string GetTitle() {
		return "Invoice Currency";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStInvCurr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStInvCurr/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStInvCurr'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStInvCurr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStInvCurr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStInvCurr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStInvCurr", "@IStInvCurr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStInvCurr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStInvCurr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStSterlingVal : 
	FormattableDataFieldBase<double,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sterling Value";}
		set { } 
	}

	public string DFName=> "IStSterlingVal";

	
	public IStatRec_IStSterlingVal(IStatRec Parent) : 
		base(Parent, "IStSterlingVal"
			,"f2"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStSterlingValFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSterlingVal").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSterlingVal").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 638;
	}
	public string GetControlName() {
		return "IStSterlingValValue";
	}
	public string GetDFName() {
		return "IStSterlingVal";
	}
	public string GetTitle() {
		return "Sterling Value";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStSterlingVal.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStSterlingVal/?RecId=[[RecId]]',$(this));\" data-bound-name='IStSterlingVal' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStSterlingVal.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStSterlingVal";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStSterlingVal")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStSterlingVal", "@IStSterlingVal", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStSterlingVal", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStSterlingVal", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStProcessed : 
	BoolDataFieldBase<IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Processed";}
		set { } 
	}

	public string DFName=> "IStProcessed";

	
	public IStatRec_IStProcessed(IStatRec Parent) : 
		base(Parent, "IStProcessed"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("False");
				    }
}


public partial class IStatRec_IStProcessedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStProcessed").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStProcessed").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 639;
	}
	public string GetControlName() {
		return "IStProcessedValue";
	}
	public string GetDFName() {
		return "IStProcessed";
	}
	public string GetTitle() {
		return "Processed";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStProcessed.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStProcessed/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='IStProcessed' [[Val]] /><input type = 'hidden' data-bound-name='IStProcessed' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStProcessed.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStProcessed";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "IStProcessed")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStProcessed", "@IStProcessed", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStProcessed", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStProcessed", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCollDate2 : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection Date 2";}
		set { } 
	}

	public string DFName=> "OrdCollDate2";

	
	public Orders_OrdCollDate2(Orders Parent) : 
		base(Parent, "OrdCollDate2"
			,"ddd dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdCollDate2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollDate2").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCollDate2").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 64;
	}
	public string GetControlName() {
		return "OrdCollDate2Value";
	}
	public string GetDFName() {
		return "OrdCollDate2";
	}
	public string GetTitle() {
		return "Collection Date 2";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCollDate2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCollDate2/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCollDate2' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCollDate2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCollDate2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCollDate2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCollDate2", "@OrdCollDate2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCollDate2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCollDate2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStDelTerms : 
	DataFieldSelectBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Terms";}
		set { } 
	}

	public string DFName=> "IStDelTerms";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStDelTerms").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStDelTerms").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.IStDelTermsAsQuery();		}
		return _DataSource;

	}
    
	public IStatRec_IStDelTerms(IStatRec Parent) : 
		base(Parent, "IStDelTerms"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("EXW");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStDelTermsFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStDelTerms").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStDelTerms").First().Value(new IStatRec());
		
		
			return DSUtil.IStDelTermsAsQuery();	}

	public int GetFieldUniqueId() {
		return 640;
	}
	public string GetControlName() {
		return "IStDelTermsValue";
	}
	public string GetDFName() {
		return "IStDelTerms";
	}
	public string GetTitle() {
		return "Delivery Terms";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStDelTerms.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStDelTerms/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStDelTerms'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStDelTerms.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStDelTerms";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStDelTerms")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStDelTerms", "@IStDelTerms", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStDelTerms", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStDelTerms", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStNAT1 : 
	DataFieldSelectBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "NAT 1";}
		set { } 
	}

	public string DFName=> "IStNAT1";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT1").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT1").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.IStNAT1AsQuery();		}
		return _DataSource;

	}
    
	public IStatRec_IStNAT1(IStatRec Parent) : 
		base(Parent, "IStNAT1"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStNAT1FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT1").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT1").First().Value(new IStatRec());
		
		
			return DSUtil.IStNAT1AsQuery();	}

	public int GetFieldUniqueId() {
		return 641;
	}
	public string GetControlName() {
		return "IStNAT1Value";
	}
	public string GetDFName() {
		return "IStNAT1";
	}
	public string GetTitle() {
		return "NAT 1";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStNAT1.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStNAT1/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStNAT1'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStNAT1.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStNAT1";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStNAT1")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStNAT1", "@IStNAT1", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStNAT1", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStNAT1", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStNAT2 : 
	DataFieldSelectBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "NAT 2";}
		set { } 
	}

	public string DFName=> "IStNAT2";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT2").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT2").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.IStNAT2AsQuery();		}
		return _DataSource;

	}
    
	public IStatRec_IStNAT2(IStatRec Parent) : 
		base(Parent, "IStNAT2"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStNAT2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT2").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStNAT2").First().Value(new IStatRec());
		
		
			return DSUtil.IStNAT2AsQuery();	}

	public int GetFieldUniqueId() {
		return 642;
	}
	public string GetControlName() {
		return "IStNAT2Value";
	}
	public string GetDFName() {
		return "IStNAT2";
	}
	public string GetTitle() {
		return "NAT 2";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStNAT2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStNAT2/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStNAT2'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStNAT2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStNAT2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStNAT2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStNAT2", "@IStNAT2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStNAT2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStNAT2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStMass : 
	FormattableDataFieldBase<double,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Mass";}
		set { } 
	}

	public string DFName=> "IStMass";

	
	public IStatRec_IStMass(IStatRec Parent) : 
		base(Parent, "IStMass"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStMassFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMass").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMass").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 643;
	}
	public string GetControlName() {
		return "IStMassValue";
	}
	public string GetDFName() {
		return "IStMass";
	}
	public string GetTitle() {
		return "Mass";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStMass.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStMass/?RecId=[[RecId]]',$(this));\" data-bound-name='IStMass' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStMass.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStMass";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStMass")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStMass", "@IStMass", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStMass", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStMass", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStSuppUnitVal : 
	FormattableDataFieldBase<double,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supp Unit Value";}
		set { } 
	}

	public string DFName=> "IStSuppUnitVal";

	
	public IStatRec_IStSuppUnitVal(IStatRec Parent) : 
		base(Parent, "IStSuppUnitVal"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class IStatRec_IStSuppUnitValFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSuppUnitVal").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSuppUnitVal").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 644;
	}
	public string GetControlName() {
		return "IStSuppUnitValValue";
	}
	public string GetDFName() {
		return "IStSuppUnitVal";
	}
	public string GetTitle() {
		return "Supp Unit Value";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStSuppUnitVal.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStSuppUnitVal/?RecId=[[RecId]]',$(this));\" data-bound-name='IStSuppUnitVal' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStSuppUnitVal.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStSuppUnitVal";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStSuppUnitVal")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStSuppUnitVal", "@IStSuppUnitVal", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStSuppUnitVal", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStSuppUnitVal", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStSuppUnitType : 
	DataFieldBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Supp Unit Type";}
		set { } 
	}

	public string DFName=> "IStSuppUnitType";

	
	public IStatRec_IStSuppUnitType(IStatRec Parent) : 
		base(Parent, "IStSuppUnitType"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class IStatRec_IStSuppUnitTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSuppUnitType").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStSuppUnitType").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 645;
	}
	public string GetControlName() {
		return "IStSuppUnitTypeValue";
	}
	public string GetDFName() {
		return "IStSuppUnitType";
	}
	public string GetTitle() {
		return "Supp Unit Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStSuppUnitType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStSuppUnitType/?RecId=[[RecId]]',$(this));\" data-bound-name='IStSuppUnitType' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStSuppUnitType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStSuppUnitType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStSuppUnitType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStSuppUnitType", "@IStSuppUnitType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStSuppUnitType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStSuppUnitType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStConsignCtry : 
	DataFieldSelectBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Country (Consign)";}
		set { } 
	}

	public string DFName=> "IStConsignCtry";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStConsignCtry").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStConsignCtry").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CtryId AS KeyValue, CtryName AS Description FROM Country UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public IStatRec_IStConsignCtry(IStatRec Parent) : 
		base(Parent, "IStConsignCtry"
			
		)
    {
				Enabled = true; 
		
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStConsignCtryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStConsignCtry").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStConsignCtry").First().Value(new IStatRec());
		
		
			return  "SELECT CtryId AS KeyValue, CtryName AS Description FROM Country UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 646;
	}
	public string GetControlName() {
		return "IStConsignCtryValue";
	}
	public string GetDFName() {
		return "IStConsignCtry";
	}
	public string GetTitle() {
		return "Country (Consign)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStConsignCtry.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStConsignCtry/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStConsignCtry'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStConsignCtry.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStConsignCtry";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStConsignCtry")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStConsignCtry", "@IStConsignCtry", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStConsignCtry", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStConsignCtry", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStTranspMode : 
	DataFieldSelectBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Mode of Transport";}
		set { } 
	}

	public string DFName=> "IStTranspMode";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStTranspMode").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStTranspMode").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.IStTranspModeAsQuery();		}
		return _DataSource;

	}
    
	public IStatRec_IStTranspMode(IStatRec Parent) : 
		base(Parent, "IStTranspMode"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStTranspModeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStTranspMode").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStTranspMode").First().Value(new IStatRec());
		
		
			return DSUtil.IStTranspModeAsQuery();	}

	public int GetFieldUniqueId() {
		return 647;
	}
	public string GetControlName() {
		return "IStTranspModeValue";
	}
	public string GetDFName() {
		return "IStTranspMode";
	}
	public string GetTitle() {
		return "Mode of Transport";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStTranspMode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStTranspMode/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStTranspMode'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStTranspMode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStTranspMode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStTranspMode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStTranspMode", "@IStTranspMode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStTranspMode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStTranspMode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStInvNo : 
	DataFieldBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Number";}
		set { } 
	}

	public string DFName=> "IStInvNo";

	
	public IStatRec_IStInvNo(IStatRec Parent) : 
		base(Parent, "IStInvNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class IStatRec_IStInvNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvNo").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStInvNo").First().Value(new IStatRec());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 648;
	}
	public string GetControlName() {
		return "IStInvNoValue";
	}
	public string GetDFName() {
		return "IStInvNo";
	}
	public string GetTitle() {
		return "Invoice Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStInvNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStInvNo/?RecId=[[RecId]]',$(this));\" data-bound-name='IStInvNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStInvNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStInvNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStInvNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStInvNo", "@IStInvNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStInvNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStInvNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStOriginCtry : 
	DataFieldSelectBase<string,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Country (Origin)";}
		set { } 
	}

	public string DFName=> "IStOriginCtry";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStOriginCtry").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStOriginCtry").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CtryId AS KeyValue, CtryName AS Description FROM Country UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public IStatRec_IStOriginCtry(IStatRec Parent) : 
		base(Parent, "IStOriginCtry"
			
		)
    {
				Enabled = true; 
		
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStOriginCtryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStOriginCtry").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStOriginCtry").First().Value(new IStatRec());
		
		
			return  "SELECT CtryId AS KeyValue, CtryName AS Description FROM Country UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 649;
	}
	public string GetControlName() {
		return "IStOriginCtryValue";
	}
	public string GetDFName() {
		return "IStOriginCtry";
	}
	public string GetTitle() {
		return "Country (Origin)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStOriginCtry.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStOriginCtry/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStOriginCtry'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStOriginCtry.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStOriginCtry";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStOriginCtry")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStOriginCtry", "@IStOriginCtry", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStOriginCtry", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStOriginCtry", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStMonth : 
	DataFieldAutoCompleteSingleBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Month";}
		set { } 
	}

	public string DFName=> "IStMonth";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonth").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonth").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT MthId AS KeyValue, MthName AS Description FROM Months UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public IStatRec_IStMonth(IStatRec Parent) : 
		base(Parent, "IStMonth"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStMonthFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonth").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonth").First().Value(new IStatRec());
		
		
			return  "SELECT MthId AS KeyValue, MthName AS Description FROM Months UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 650;
	}
	public string GetControlName() {
		return "IStMonthValue";
	}
	public string GetDFName() {
		return "IStMonth";
	}
	public string GetTitle() {
		return "Month";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStMonth.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/IStatRec/AutoCompleteIStMonth/' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStMonth/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='IStMonth'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStMonth.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStMonth";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/IStatRec/AutoCompleteIStMonth/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStMonth")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStMonth", "@IStMonth", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStMonth", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStMonth", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class IStatRec_IStMonthDec : 
	DataFieldSelectBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Month Declared";}
		set { } 
	}

	public string DFName=> "IStMonthDec";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonthDec").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonthDec").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT MthId AS KeyValue, MthName AS Description FROM Months UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public IStatRec_IStMonthDec(IStatRec Parent) : 
		base(Parent, "IStMonthDec"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStMonthDecFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonthDec").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStMonthDec").First().Value(new IStatRec());
		
		
			return  "SELECT MthId AS KeyValue, MthName AS Description FROM Months UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 651;
	}
	public string GetControlName() {
		return "IStMonthDecValue";
	}
	public string GetDFName() {
		return "IStMonthDec";
	}
	public string GetTitle() {
		return "Month Declared";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStMonthDec.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStMonthDec/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='IStMonthDec'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStMonthDec.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStMonthDec";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStMonthDec")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStMonthDec", "@IStMonthDec", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStMonthDec", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStMonthDec", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Months_MthId : 
	FormattableDataFieldBase<int,Months>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Month ID";}
		set { } 
	}

	public string DFName=> "MthId";

	
	public Months_MthId(Months Parent) : 
		base(Parent, "MthId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Months_MthIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthId").Any()) 
			return DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthId").First().Value(new Months());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 654;
	}
	public string GetControlName() {
		return "MthIdValue";
	}
	public string GetDFName() {
		return "MthId";
	}
	public string GetTitle() {
		return "Month ID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Months ds;
					ds = (Months)dsI;
		 
		
		return ds.MthId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Months ds;
				ds = (Months)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Months/SaveMthId/?RecId=[[RecId]]',$(this));\" data-bound-name='MthId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.MthId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "MthId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "MthId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "MthId", "@MthId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "MthId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Months").GetFieldOperators("MthId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Months_MthName : 
	DataFieldBase<string,Months>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Month Name";}
		set { } 
	}

	public string DFName=> "MthName";

	
	public Months_MthName(Months Parent) : 
		base(Parent, "MthName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Months_MthNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthName").Any()) 
			return DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthName").First().Value(new Months());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 655;
	}
	public string GetControlName() {
		return "MthNameValue";
	}
	public string GetDFName() {
		return "MthName";
	}
	public string GetTitle() {
		return "Month Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Months ds;
					ds = (Months)dsI;
		 
		
		return ds.MthName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Months ds;
				ds = (Months)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Months/SaveMthName/?RecId=[[RecId]]',$(this));\" data-bound-name='MthName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.MthName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "MthName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "MthName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "MthName", "@MthName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "MthName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Months").GetFieldOperators("MthName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Months_MthSDate : 
	DateDataFieldBase<Months>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "From";}
		set { } 
	}

	public string DFName=> "MthSDate";

	
	public Months_MthSDate(Months Parent) : 
		base(Parent, "MthSDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Months_MthSDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthSDate").Any()) 
			return DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthSDate").First().Value(new Months());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 656;
	}
	public string GetControlName() {
		return "MthSDateValue";
	}
	public string GetDFName() {
		return "MthSDate";
	}
	public string GetTitle() {
		return "From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Months ds;
					ds = (Months)dsI;
		 
		
		return ds.MthSDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Months ds;
				ds = (Months)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Months/SaveMthSDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='MthSDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.MthSDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "MthSDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "MthSDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "MthSDate", "@MthSDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "MthSDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Months").GetFieldOperators("MthSDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Months_MthEDate : 
	DateDataFieldBase<Months>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "To";}
		set { } 
	}

	public string DFName=> "MthEDate";

	
	public Months_MthEDate(Months Parent) : 
		base(Parent, "MthEDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Months_MthEDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthEDate").Any()) 
			return DS.GetManager<Months>().OnDataSource.Where(f=> f.Key == "MthEDate").First().Value(new Months());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 657;
	}
	public string GetControlName() {
		return "MthEDateValue";
	}
	public string GetDFName() {
		return "MthEDate";
	}
	public string GetTitle() {
		return "To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Months ds;
					ds = (Months)dsI;
		 
		
		return ds.MthEDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Months ds;
				ds = (Months)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Months/SaveMthEDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='MthEDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.MthEDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "MthEDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "MthEDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "MthEDate", "@MthEDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "MthEDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Months").GetFieldOperators("MthEDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class IStatRec_IStRatePeriod : 
	DataFieldAutoCompleteSingleBase<int,IStatRec>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Exch Rate Period";}
		set { } 
	}

	public string DFName=> "IStRatePeriod";

		public string GetDataSource() {
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStRatePeriod").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStRatePeriod").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT ExRId AS KeyValue, ExRName AS Description FROM ExchRate UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public IStatRec_IStRatePeriod(IStatRec Parent) : 
		base(Parent, "IStRatePeriod"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class IStatRec_IStRatePeriodFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStRatePeriod").Any()) 
			return DS.GetManager<IStatRec>().OnDataSource.Where(f=> f.Key == "IStRatePeriod").First().Value(new IStatRec());
		
		
			return  "SELECT ExRId AS KeyValue, ExRName AS Description FROM ExchRate UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 658;
	}
	public string GetControlName() {
		return "IStRatePeriodValue";
	}
	public string GetDFName() {
		return "IStRatePeriod";
	}
	public string GetTitle() {
		return "Exch Rate Period";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		IStatRec ds;
					ds = (IStatRec)dsI;
		 
		
		return ds.IStRatePeriod.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		IStatRec ds;
				ds = (IStatRec)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/IStatRec/AutoCompleteIStRatePeriod/' onchange=\"javascript:IQAutoSave('/IStatRec/SaveIStRatePeriod/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='IStRatePeriod'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.IStRatePeriod.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "IStRatePeriod";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/IStatRec/AutoCompleteIStRatePeriod/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "IStRatePeriod")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "IStRatePeriod", "@IStRatePeriod", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "IStRatePeriod", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("IStatRec").GetFieldOperators("IStRatePeriod", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class ChangeReq_CRId : 
	FormattableDataFieldBase<int,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "CRId";

	
	public ChangeReq_CRId(ChangeReq Parent) : 
		base(Parent, "CRId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class ChangeReq_CRIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRId").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRId").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 659;
	}
	public string GetControlName() {
		return "CRIdValue";
	}
	public string GetDFName() {
		return "CRId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRId/?RecId=[[RecId]]',$(this));\" data-bound-name='CRId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRId", "@CRId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDateDel : 
	DateDataFieldBase<Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date Delivered";}
		set { } 
	}

	public string DFName=> "OrdDateDel";

	
	public Orders_OrdDateDel(Orders Parent) : 
		base(Parent, "OrdDateDel"
			,"ddd dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Orders_OrdDateDelFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDateDel").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDateDel").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 66;
	}
	public string GetControlName() {
		return "OrdDateDelValue";
	}
	public string GetDFName() {
		return "OrdDateDel";
	}
	public string GetTitle() {
		return "Date Delivered";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDateDel.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDateDel/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdDateDel' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDateDel.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDateDel";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDateDel")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDateDel", "@OrdDateDel", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDateDel", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDateDel", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRName : 
	DataFieldBase<string,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Title";}
		set { } 
	}

	public string DFName=> "CRName";

	
	public ChangeReq_CRName(ChangeReq Parent) : 
		base(Parent, "CRName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ChangeReq_CRNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRName").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRName").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 660;
	}
	public string GetControlName() {
		return "CRNameValue";
	}
	public string GetDFName() {
		return "CRName";
	}
	public string GetTitle() {
		return "Title";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRName/?RecId=[[RecId]]',$(this));\" data-bound-name='CRName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRName", "@CRName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRType : 
	DataFieldSelectBase<int,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Type";}
		set { } 
	}

	public string DFName=> "CRType";

		public string GetDataSource() {
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRType").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.CRTypeAsQuery();		}
		return _DataSource;

	}
    
	public ChangeReq_CRType(ChangeReq Parent) : 
		base(Parent, "CRType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class ChangeReq_CRTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRType").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRType").First().Value(new ChangeReq());
		
		
			return DSUtil.CRTypeAsQuery();	}

	public int GetFieldUniqueId() {
		return 661;
	}
	public string GetControlName() {
		return "CRTypeValue";
	}
	public string GetDFName() {
		return "CRType";
	}
	public string GetTitle() {
		return "Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CRType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRType", "@CRType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRPriority : 
	DataFieldSelectBase<int,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Priority";}
		set { } 
	}

	public string DFName=> "CRPriority";

		public string GetDataSource() {
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRPriority").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRPriority").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.CRPriorityAsQuery();		}
		return _DataSource;

	}
    
	public ChangeReq_CRPriority(ChangeReq Parent) : 
		base(Parent, "CRPriority"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class ChangeReq_CRPriorityFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRPriority").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRPriority").First().Value(new ChangeReq());
		
		
			return DSUtil.CRPriorityAsQuery();	}

	public int GetFieldUniqueId() {
		return 662;
	}
	public string GetControlName() {
		return "CRPriorityValue";
	}
	public string GetDFName() {
		return "CRPriority";
	}
	public string GetTitle() {
		return "Priority";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRPriority.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRPriority/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CRPriority'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRPriority.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRPriority";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRPriority")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRPriority", "@CRPriority", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRPriority", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRPriority", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRStatus : 
	DataFieldSelectBase<int,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Status";}
		set { } 
	}

	public string DFName=> "CRStatus";

		public string GetDataSource() {
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRStatus").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRStatus").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.CRStatusAsQuery();		}
		return _DataSource;

	}
    
	public ChangeReq_CRStatus(ChangeReq Parent) : 
		base(Parent, "CRStatus"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class ChangeReq_CRStatusFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRStatus").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRStatus").First().Value(new ChangeReq());
		
		
			return DSUtil.CRStatusAsQuery();	}

	public int GetFieldUniqueId() {
		return 663;
	}
	public string GetControlName() {
		return "CRStatusValue";
	}
	public string GetDFName() {
		return "CRStatus";
	}
	public string GetTitle() {
		return "Status";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRStatus.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRStatus/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='CRStatus'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRStatus.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRStatus";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRStatus")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRStatus", "@CRStatus", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRStatus", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRStatus", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRDate : 
	DateDataFieldBase<ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date Added";}
		set { } 
	}

	public string DFName=> "CRDate";

	
	public ChangeReq_CRDate(ChangeReq Parent) : 
		base(Parent, "CRDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ChangeReq_CRDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRDate").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRDate").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 664;
	}
	public string GetControlName() {
		return "CRDateValue";
	}
	public string GetDFName() {
		return "CRDate";
	}
	public string GetTitle() {
		return "Date Added";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRDate/?RecId=[[RecId]]',$(this));\" data-bound-name='CRDate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRDate", "@CRDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRClosed : 
	DateDataFieldBase<ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date Closed";}
		set { } 
	}

	public string DFName=> "CRClosed";

	
	public ChangeReq_CRClosed(ChangeReq Parent) : 
		base(Parent, "CRClosed"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ChangeReq_CRClosedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRClosed").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRClosed").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 665;
	}
	public string GetControlName() {
		return "CRClosedValue";
	}
	public string GetDFName() {
		return "CRClosed";
	}
	public string GetTitle() {
		return "Date Closed";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRClosed.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRClosed/?RecId=[[RecId]]',$(this));\" data-bound-name='CRClosed' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRClosed.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRClosed";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRClosed")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRClosed", "@CRClosed", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRClosed", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRClosed", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRIssues : 
	DataFieldBase<string,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "CRIssues";

	
	public ChangeReq_CRIssues(ChangeReq Parent) : 
		base(Parent, "CRIssues"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ChangeReq_CRIssuesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRIssues").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRIssues").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 666;
	}
	public string GetControlName() {
		return "CRIssuesValue";
	}
	public string GetDFName() {
		return "CRIssues";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRIssues.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRIssues/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CRIssues'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRIssues.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRIssues";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRIssues")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRIssues", "@CRIssues", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRIssues", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRIssues", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRIqNotes : 
	DataFieldBase<string,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Intrinsiq Notes";}
		set { } 
	}

	public string DFName=> "CRIqNotes";

	
	public ChangeReq_CRIqNotes(ChangeReq Parent) : 
		base(Parent, "CRIqNotes"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ChangeReq_CRIqNotesFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRIqNotes").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRIqNotes").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 667;
	}
	public string GetControlName() {
		return "CRIqNotesValue";
	}
	public string GetDFName() {
		return "CRIqNotes";
	}
	public string GetTitle() {
		return "Intrinsiq Notes";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRIqNotes.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRIqNotes/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CRIqNotes'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRIqNotes.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRIqNotes";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRIqNotes")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRIqNotes", "@CRIqNotes", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRIqNotes", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRIqNotes", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRResolved : 
	DataFieldBase<string,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Resolved";}
		set { } 
	}

	public string DFName=> "CRResolved";

	
	public ChangeReq_CRResolved(ChangeReq Parent) : 
		base(Parent, "CRResolved"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ChangeReq_CRResolvedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRResolved").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRResolved").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 668;
	}
	public string GetControlName() {
		return "CRResolvedValue";
	}
	public string GetDFName() {
		return "CRResolved";
	}
	public string GetTitle() {
		return "Resolved";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRResolved.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRResolved/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CRResolved'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRResolved.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRResolved";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRResolved")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRResolved", "@CRResolved", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRResolved", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRResolved", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class ChangeReq_CRIqNotesArch : 
	DataFieldBase<string,ChangeReq>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Intrinsiq Notes Archive";}
		set { } 
	}

	public string DFName=> "CRIqNotesArch";

	
	public ChangeReq_CRIqNotesArch(ChangeReq Parent) : 
		base(Parent, "CRIqNotesArch"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class ChangeReq_CRIqNotesArchFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRIqNotesArch").Any()) 
			return DS.GetManager<ChangeReq>().OnDataSource.Where(f=> f.Key == "CRIqNotesArch").First().Value(new ChangeReq());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 669;
	}
	public string GetControlName() {
		return "CRIqNotesArchValue";
	}
	public string GetDFName() {
		return "CRIqNotesArch";
	}
	public string GetTitle() {
		return "Intrinsiq Notes Archive";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		ChangeReq ds;
					ds = (ChangeReq)dsI;
		 
		
		return ds.CRIqNotesArch.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		ChangeReq ds;
				ds = (ChangeReq)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/ChangeReq/SaveCRIqNotesArch/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CRIqNotesArch'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CRIqNotesArch.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CRIqNotesArch";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CRIqNotesArch")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CRIqNotesArch", "@CRIqNotesArch", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CRIqNotesArch", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("ChangeReq").GetFieldOperators("CRIqNotesArch", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLOrder : 
	FormattableDataFieldBase<int,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "OrdLOrder";

	
	public OrderLine_OrdLOrder(OrderLine Parent) : 
		base(Parent, "OrdLOrder"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class OrderLine_OrdLOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLOrder").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLOrder").First().Value(new OrderLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 67;
	}
	public string GetControlName() {
		return "OrdLOrderValue";
	}
	public string GetDFName() {
		return "OrdLOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLOrder/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdLOrder' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLOrder", "@OrdLOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdSelEMTo : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Select E-Mail To";}
		set { } 
	}

	public string DFName=> "OrdSelEMTo";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelEMTo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelEMTo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustEM AS Description FROM Customer WHERE CustId=0 UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdSelEMTo(Orders Parent) : 
		base(Parent, "OrdSelEMTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdSelEMToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelEMTo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelEMTo").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustEM AS Description FROM Customer WHERE CustId=0 UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 670;
	}
	public string GetControlName() {
		return "OrdSelEMToValue";
	}
	public string GetDFName() {
		return "OrdSelEMTo";
	}
	public string GetTitle() {
		return "Select E-Mail To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdSelEMTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdSelEMTo/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdSelEMTo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdSelEMTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdSelEMTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdSelEMTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdSelEMTo", "@OrdSelEMTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdSelEMTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdSelEMTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdSelFaxTo : 
	DataFieldSelectBase<int,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Select Fax To";}
		set { } 
	}

	public string DFName=> "OrdSelFaxTo";

		public string GetDataSource() {
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelFaxTo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelFaxTo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustFax AS Description FROM Customer WHERE CustId=0 UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public Orders_OrdSelFaxTo(Orders Parent) : 
		base(Parent, "OrdSelFaxTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Orders_OrdSelFaxToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelFaxTo").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdSelFaxTo").First().Value(new Orders());
		
		
			return  "SELECT CustId AS KeyValue, CustFax AS Description FROM Customer WHERE CustId=0 UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 671;
	}
	public string GetControlName() {
		return "OrdSelFaxToValue";
	}
	public string GetDFName() {
		return "OrdSelFaxTo";
	}
	public string GetTitle() {
		return "Select Fax To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdSelFaxTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdSelFaxTo/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdSelFaxTo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdSelFaxTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdSelFaxTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdSelFaxTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdSelFaxTo", "@OrdSelFaxTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdSelFaxTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdSelFaxTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustDueDiligence : 
	BoolDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Due Diligence Received";}
		set { } 
	}

	public string DFName=> "CustDueDiligence";

	
	public Customer_CustDueDiligence(Customer Parent) : 
		base(Parent, "CustDueDiligence"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Customer_CustDueDiligenceFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDueDiligence").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustDueDiligence").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 672;
	}
	public string GetControlName() {
		return "CustDueDiligenceValue";
	}
	public string GetDFName() {
		return "CustDueDiligence";
	}
	public string GetTitle() {
		return "Due Diligence Received";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustDueDiligence.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Customer/SaveCustDueDiligence/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CustDueDiligence' [[Val]] /><input type = 'hidden' data-bound-name='CustDueDiligence' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustDueDiligence.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustDueDiligence";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CustDueDiligence")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustDueDiligence", "@CustDueDiligence", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustDueDiligence", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustDueDiligence", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCredScoreSearch : 
	BoolDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Score Searched";}
		set { } 
	}

	public string DFName=> "CustCredScoreSearch";

	
	public Customer_CustCredScoreSearch(Customer Parent) : 
		base(Parent, "CustCredScoreSearch"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Customer_CustCredScoreSearchFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCredScoreSearch").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCredScoreSearch").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 673;
	}
	public string GetControlName() {
		return "CustCredScoreSearchValue";
	}
	public string GetDFName() {
		return "CustCredScoreSearch";
	}
	public string GetTitle() {
		return "Credit Score Searched";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCredScoreSearch.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Customer/SaveCustCredScoreSearch/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CustCredScoreSearch' [[Val]] /><input type = 'hidden' data-bound-name='CustCredScoreSearch' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCredScoreSearch.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCredScoreSearch";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CustCredScoreSearch")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCredScoreSearch", "@CustCredScoreSearch", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCredScoreSearch", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCredScoreSearch", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCredScore : 
	FormattableDataFieldBase<int,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Score Number";}
		set { } 
	}

	public string DFName=> "CustCredScore";

	
	public Customer_CustCredScore(Customer Parent) : 
		base(Parent, "CustCredScore"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Customer_CustCredScoreFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCredScore").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCredScore").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 674;
	}
	public string GetControlName() {
		return "CustCredScoreValue";
	}
	public string GetDFName() {
		return "CustCredScore";
	}
	public string GetTitle() {
		return "Credit Score Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCredScore.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCredScore/?RecId=[[RecId]]',$(this));\" data-bound-name='CustCredScore' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCredScore.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCredScore";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCredScore")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCredScore", "@CustCredScore", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCredScore", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCredScore", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCredScoreReview : 
	DateDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Score Review date";}
		set { } 
	}

	public string DFName=> "CustCredScoreReview";

	
	public Customer_CustCredScoreReview(Customer Parent) : 
		base(Parent, "CustCredScoreReview"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustCredScoreReviewFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCredScoreReview").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCredScoreReview").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 675;
	}
	public string GetControlName() {
		return "CustCredScoreReviewValue";
	}
	public string GetDFName() {
		return "CustCredScoreReview";
	}
	public string GetTitle() {
		return "Credit Score Review date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCredScoreReview.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCredScoreReview/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='CustCredScoreReview' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCredScoreReview.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCredScoreReview";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCredScoreReview")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCredScoreReview", "@CustCredScoreReview", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCredScoreReview", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCredScoreReview", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLLineNo : 
	FormattableDataFieldBase<int,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Number";}
		set { } 
	}

	public string DFName=> "OrdLLineNo";

	
	public OrderLine_OrdLLineNo(OrderLine Parent) : 
		base(Parent, "OrdLLineNo"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class OrderLine_OrdLLineNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLLineNo").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLLineNo").First().Value(new OrderLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 68;
	}
	public string GetControlName() {
		return "OrdLLineNoValue";
	}
	public string GetDFName() {
		return "OrdLLineNo";
	}
	public string GetTitle() {
		return "Line Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLLineNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLLineNo/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdLLineNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLLineNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLLineNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLLineNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLLineNo", "@OrdLLineNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLLineNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLLineNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMId : 
	FormattableDataFieldBase<int,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "EMId";

	
	public EMail_EMId(EMail Parent) : 
		base(Parent, "EMId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class EMail_EMIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMId").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMId").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 684;
	}
	public string GetControlName() {
		return "EMIdValue";
	}
	public string GetDFName() {
		return "EMId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EMail/SaveEMId/?RecId=[[RecId]]',$(this));\" data-bound-name='EMId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMId", "@EMId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMName : 
	DataFieldSelectBase<int,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "E-mail";}
		set { } 
	}

	public string DFName=> "EMName";

		public string GetDataSource() {
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMName").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMName").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT EMTId AS KeyValue, EMTName AS Description FROM EMType UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public EMail_EMName(EMail Parent) : 
		base(Parent, "EMName"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class EMail_EMNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMName").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMName").First().Value(new EMail());
		
		
			return  "SELECT EMTId AS KeyValue, EMTName AS Description FROM EMType UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 685;
	}
	public string GetControlName() {
		return "EMNameValue";
	}
	public string GetDFName() {
		return "EMName";
	}
	public string GetTitle() {
		return "E-mail";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EMail/SaveEMName/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='EMName'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMName", "@EMName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMFrom : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "From";}
		set { } 
	}

	public string DFName=> "EMFrom";

	
	public EMail_EMFrom(EMail Parent) : 
		base(Parent, "EMFrom"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class EMail_EMFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMFrom").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMFrom").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 686;
	}
	public string GetControlName() {
		return "EMFromValue";
	}
	public string GetDFName() {
		return "EMFrom";
	}
	public string GetTitle() {
		return "From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EMail/SaveEMFrom/?RecId=[[RecId]]',$(this));\" data-bound-name='EMFrom' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMFrom", "@EMFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMDS : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Dataset";}
		set { } 
	}

	public string DFName=> "EMDS";

	
	public EMail_EMDS(EMail Parent) : 
		base(Parent, "EMDS"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class EMail_EMDSFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMDS").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMDS").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 687;
	}
	public string GetControlName() {
		return "EMDSValue";
	}
	public string GetDFName() {
		return "EMDS";
	}
	public string GetTitle() {
		return "Dataset";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMDS.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EMail/SaveEMDS/?RecId=[[RecId]]',$(this));\" data-bound-name='EMDS' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMDS.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMDS";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMDS")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMDS", "@EMDS", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMDS", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMDS", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMTo : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "To";}
		set { } 
	}

	public string DFName=> "EMTo";

	
	public EMail_EMTo(EMail Parent) : 
		base(Parent, "EMTo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EMail_EMToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMTo").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMTo").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 689;
	}
	public string GetControlName() {
		return "EMToValue";
	}
	public string GetDFName() {
		return "EMTo";
	}
	public string GetTitle() {
		return "To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EMail/SaveEMTo/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='EMTo'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTo", "@EMTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLQty : 
	FormattableDataFieldBase<int,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Quantity";}
		set { } 
	}

	public string DFName=> "OrdLQty";

	
	public OrderLine_OrdLQty(OrderLine Parent) : 
		base(Parent, "OrdLQty"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class OrderLine_OrdLQtyFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLQty").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLQty").First().Value(new OrderLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 69;
	}
	public string GetControlName() {
		return "OrdLQtyValue";
	}
	public string GetDFName() {
		return "OrdLQty";
	}
	public string GetTitle() {
		return "Quantity";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLQty.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLQty/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdLQty' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLQty.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLQty";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLQty")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLQty", "@OrdLQty", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLQty", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLQty", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMCC : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "CC";}
		set { } 
	}

	public string DFName=> "EMCC";

	
	public EMail_EMCC(EMail Parent) : 
		base(Parent, "EMCC"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EMail_EMCCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMCC").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMCC").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 690;
	}
	public string GetControlName() {
		return "EMCCValue";
	}
	public string GetDFName() {
		return "EMCC";
	}
	public string GetTitle() {
		return "CC";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMCC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EMail/SaveEMCC/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='EMCC'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMCC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMCC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMCC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMCC", "@EMCC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMCC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMCC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMSubject : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Subject";}
		set { } 
	}

	public string DFName=> "EMSubject";

	
	public EMail_EMSubject(EMail Parent) : 
		base(Parent, "EMSubject"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EMail_EMSubjectFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMSubject").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMSubject").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 691;
	}
	public string GetControlName() {
		return "EMSubjectValue";
	}
	public string GetDFName() {
		return "EMSubject";
	}
	public string GetTitle() {
		return "Subject";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMSubject.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EMail/SaveEMSubject/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='EMSubject'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMSubject.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMSubject";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMSubject")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMSubject", "@EMSubject", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMSubject", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMSubject", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMBody : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Body";}
		set { } 
	}

	public string DFName=> "EMBody";

	
	public EMail_EMBody(EMail Parent) : 
		base(Parent, "EMBody"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EMail_EMBodyFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBody").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBody").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 692;
	}
	public string GetControlName() {
		return "EMBodyValue";
	}
	public string GetDFName() {
		return "EMBody";
	}
	public string GetTitle() {
		return "Body";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMBody.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "[[Val]]";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMBody.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMBody";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMBody")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMBody", "@EMBody", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMBody", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMBody", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMAttach : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Attachments";}
		set { } 
	}

	public string DFName=> "EMAttach";

	
	public EMail_EMAttach(EMail Parent) : 
		base(Parent, "EMAttach"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EMail_EMAttachFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMAttach").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMAttach").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 693;
	}
	public string GetControlName() {
		return "EMAttachValue";
	}
	public string GetDFName() {
		return "EMAttach";
	}
	public string GetTitle() {
		return "Attachments";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMAttach.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EMail/SaveEMAttach/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='EMAttach'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMAttach.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMAttach";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMAttach")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMAttach", "@EMAttach", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMAttach", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMAttach", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMStatus : 
	DataFieldSelectBase<int,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Status";}
		set { } 
	}

	public string DFName=> "EMStatus";

		public string GetDataSource() {
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMStatus").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMStatus").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.EMStatusAsQuery();		}
		return _DataSource;

	}
    
	public EMail_EMStatus(EMail Parent) : 
		base(Parent, "EMStatus"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class EMail_EMStatusFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMStatus").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMStatus").First().Value(new EMail());
		
		
			return DSUtil.EMStatusAsQuery();	}

	public int GetFieldUniqueId() {
		return 694;
	}
	public string GetControlName() {
		return "EMStatusValue";
	}
	public string GetDFName() {
		return "EMStatus";
	}
	public string GetTitle() {
		return "Status";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMStatus.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EMail/SaveEMStatus/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='EMStatus'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMStatus.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMStatus";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMStatus")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMStatus", "@EMStatus", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMStatus", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMStatus", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMDateSent : 
	DateDataFieldBase<EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date Sent";}
		set { } 
	}

	public string DFName=> "EMDateSent";

	
	public EMail_EMDateSent(EMail Parent) : 
		base(Parent, "EMDateSent"
			,"dd-MMM-yyyy HH:mm"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class EMail_EMDateSentFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMDateSent").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMDateSent").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 695;
	}
	public string GetControlName() {
		return "EMDateSentValue";
	}
	public string GetDFName() {
		return "EMDateSent";
	}
	public string GetTitle() {
		return "Date Sent";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMDateSent.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY HH:mm' onchange=\"javascript:IQAutoSave('/EMail/SaveEMDateSent/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='EMDateSent' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMDateSent.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMDateSent";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMDateSent")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMDateSent", "@EMDateSent", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMDateSent", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMDateSent", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdConsOrd : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Consign Order No";}
		set { } 
	}

	public string DFName=> "OrdConsOrd";

	
	public Orders_OrdConsOrd(Orders Parent) : 
		base(Parent, "OrdConsOrd"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdConsOrdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsOrd").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdConsOrd").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 696;
	}
	public string GetControlName() {
		return "OrdConsOrdValue";
	}
	public string GetDFName() {
		return "OrdConsOrd";
	}
	public string GetTitle() {
		return "Consign Order No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdConsOrd.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdConsOrd/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdConsOrd' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdConsOrd.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdConsOrd";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdConsOrd")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdConsOrd", "@OrdConsOrd", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdConsOrd", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdConsOrd", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustWebsite : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Website";}
		set { } 
	}

	public string DFName=> "CustWebsite";

	
	public Customer_CustWebsite(Customer Parent) : 
		base(Parent, "CustWebsite"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustWebsiteFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustWebsite").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustWebsite").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 697;
	}
	public string GetControlName() {
		return "CustWebsiteValue";
	}
	public string GetDFName() {
		return "CustWebsite";
	}
	public string GetTitle() {
		return "Website";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustWebsite.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustWebsite/?RecId=[[RecId]]',$(this));\" data-bound-name='CustWebsite' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustWebsite.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustWebsite";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustWebsite")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustWebsite", "@CustWebsite", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustWebsite", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustWebsite", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdCustName : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Client Name (Text)";}
		set { } 
	}

	public string DFName=> "OrdCustName";

	
	public Orders_OrdCustName(Orders Parent) : 
		base(Parent, "OrdCustName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdCustNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCustName").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdCustName").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 698;
	}
	public string GetControlName() {
		return "OrdCustNameValue";
	}
	public string GetDFName() {
		return "OrdCustName";
	}
	public string GetTitle() {
		return "Client Name (Text)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdCustName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdCustName/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdCustName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdCustName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdCustName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdCustName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdCustName", "@OrdCustName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdCustName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdCustName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocId : 
	FormattableDataFieldBase<int,WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "WrDocId";

	
	public WordDocument_WrDocId(WordDocument Parent) : 
		base(Parent, "WrDocId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class WordDocument_WrDocIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocId").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocId").First().Value(new WordDocument());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 699;
	}
	public string GetControlName() {
		return "WrDocIdValue";
	}
	public string GetDFName() {
		return "WrDocId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocId/?RecId=[[RecId]]',$(this));\" data-bound-name='WrDocId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocId", "@WrDocId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLPackageType : 
	DataFieldSelectBase<int,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Package Type";}
		set { } 
	}

	public string DFName=> "OrdLPackageType";

		public string GetDataSource() {
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPackageType").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPackageType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT PackId AS KeyValue, PackName AS Description FROM PackageType UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public OrderLine_OrdLPackageType(OrderLine Parent) : 
		base(Parent, "OrdLPackageType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class OrderLine_OrdLPackageTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPackageType").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPackageType").First().Value(new OrderLine());
		
		
			return  "SELECT PackId AS KeyValue, PackName AS Description FROM PackageType UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 70;
	}
	public string GetControlName() {
		return "OrdLPackageTypeValue";
	}
	public string GetDFName() {
		return "OrdLPackageType";
	}
	public string GetTitle() {
		return "Package Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLPackageType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLPackageType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdLPackageType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLPackageType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLPackageType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLPackageType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLPackageType", "@OrdLPackageType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLPackageType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLPackageType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocTemplate : 
	DataFieldFileBase<string,WordDocument>, IQ6.Core.IDSFieldBase
{
		public string FullUrl { 
		get { return IQApp.Files.GetFileUrl(Value.ToString()); }  set { Value = value;}
	}
	
	public string LabelText { 
		get { return "Template";}
		set { } 
	}

	public string DFName=> "WrDocTemplate";

	
	public WordDocument_WrDocTemplate(WordDocument Parent) : 
		base(Parent, "WrDocTemplate"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class WordDocument_WrDocTemplateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocTemplate").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocTemplate").First().Value(new WordDocument());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 700;
	}
	public string GetControlName() {
		return "WrDocTemplateValue";
	}
	public string GetDFName() {
		return "WrDocTemplate";
	}
	public string GetTitle() {
		return "Template";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocTemplate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocTemplate/?RecId=[[RecId]]',$(this));\" data-bound-name='WrDocTemplate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocTemplate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocTemplate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocTemplate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocTemplate", "@WrDocTemplate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocTemplate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocTemplate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocTitle : 
	DataFieldBase<string,WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Title";}
		set { } 
	}

	public string DFName=> "WrDocTitle";

	
	public WordDocument_WrDocTitle(WordDocument Parent) : 
		base(Parent, "WrDocTitle"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class WordDocument_WrDocTitleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocTitle").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocTitle").First().Value(new WordDocument());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 701;
	}
	public string GetControlName() {
		return "WrDocTitleValue";
	}
	public string GetDFName() {
		return "WrDocTitle";
	}
	public string GetTitle() {
		return "Title";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocTitle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocTitle/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='WrDocTitle'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocTitle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocTitle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocTitle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocTitle", "@WrDocTitle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocTitle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocTitle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocDataset : 
	DataFieldSelectBase<string,WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Applies To";}
		set { } 
	}

	public string DFName=> "WrDocDataset";

		public string GetDataSource() {
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocDataset").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocDataset").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT  AS KeyValue,  AS Description FROM  UNION SELECT 0, '' ORDER BY ";		}
		return _DataSource;

	}
    
	public WordDocument_WrDocDataset(WordDocument Parent) : 
		base(Parent, "WrDocDataset"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class WordDocument_WrDocDatasetFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocDataset").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocDataset").First().Value(new WordDocument());
		
		
			return  "SELECT  AS KeyValue,  AS Description FROM  UNION SELECT 0, '' ORDER BY ";	}

	public int GetFieldUniqueId() {
		return 702;
	}
	public string GetControlName() {
		return "WrDocDatasetValue";
	}
	public string GetDFName() {
		return "WrDocDataset";
	}
	public string GetTitle() {
		return "Applies To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocDataset.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocDataset/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='WrDocDataset'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocDataset.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocDataset";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocDataset")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocDataset", "@WrDocDataset", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocDataset", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocDataset", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryId : 
	FormattableDataFieldBase<int,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "QryId";

	
	public Query_QryId(Query Parent) : 
		base(Parent, "QryId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Query_QryIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryId").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryId").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 703;
	}
	public string GetControlName() {
		return "QryIdValue";
	}
	public string GetDFName() {
		return "QryId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Query/SaveQryId/?RecId=[[RecId]]',$(this));\" data-bound-name='QryId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryId", "@QryId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryName : 
	DataFieldBase<string,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Name";}
		set { } 
	}

	public string DFName=> "QryName";

	
	public Query_QryName(Query Parent) : 
		base(Parent, "QryName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Query_QryNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryName").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryName").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 704;
	}
	public string GetControlName() {
		return "QryNameValue";
	}
	public string GetDFName() {
		return "QryName";
	}
	public string GetTitle() {
		return "Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Query/SaveQryName/?RecId=[[RecId]]',$(this));\" data-bound-name='QryName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryName", "@QryName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QrySysName : 
	DataFieldBase<string,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "System Name";}
		set { } 
	}

	public string DFName=> "QrySysName";

	
	public Query_QrySysName(Query Parent) : 
		base(Parent, "QrySysName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Query_QrySysNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QrySysName").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QrySysName").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 705;
	}
	public string GetControlName() {
		return "QrySysNameValue";
	}
	public string GetDFName() {
		return "QrySysName";
	}
	public string GetTitle() {
		return "System Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QrySysName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Query/SaveQrySysName/?RecId=[[RecId]]',$(this));\" data-bound-name='QrySysName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QrySysName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QrySysName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QrySysName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QrySysName", "@QrySysName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QrySysName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QrySysName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryContent : 
	DataFieldBase<string,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Content";}
		set { } 
	}

	public string DFName=> "QryContent";

	
	public Query_QryContent(Query Parent) : 
		base(Parent, "QryContent"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Query_QryContentFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryContent").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryContent").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 706;
	}
	public string GetControlName() {
		return "QryContentValue";
	}
	public string GetDFName() {
		return "QryContent";
	}
	public string GetTitle() {
		return "Content";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryContent.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Query/SaveQryContent/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='QryContent'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryContent.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryContent";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryContent")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryContent", "@QryContent", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryContent", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryContent", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryPrimaryDS : 
	DataFieldSelectBase<string,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Primary Data Source";}
		set { } 
	}

	public string DFName=> "QryPrimaryDS";

		public string GetDataSource() {
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryPrimaryDS").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryPrimaryDS").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "";		}
		return _DataSource;

	}
    
	public Query_QryPrimaryDS(Query Parent) : 
		base(Parent, "QryPrimaryDS"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Query_QryPrimaryDSFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryPrimaryDS").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryPrimaryDS").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 707;
	}
	public string GetControlName() {
		return "QryPrimaryDSValue";
	}
	public string GetDFName() {
		return "QryPrimaryDS";
	}
	public string GetTitle() {
		return "Primary Data Source";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryPrimaryDS.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Query/SaveQryPrimaryDS/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='QryPrimaryDS'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryPrimaryDS.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryPrimaryDS";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryPrimaryDS")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryPrimaryDS", "@QryPrimaryDS", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryPrimaryDS", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryPrimaryDS", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLSize : 
	DataFieldSelectBase<int,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Size";}
		set { } 
	}

	public string DFName=> "OrdLSize";

		public string GetDataSource() {
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLSize").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLSize").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT BSzId AS KeyValue, BSzSize AS Description FROM BottleSize UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public OrderLine_OrdLSize(OrderLine Parent) : 
		base(Parent, "OrdLSize"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class OrderLine_OrdLSizeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLSize").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLSize").First().Value(new OrderLine());
		
		
			return  "SELECT BSzId AS KeyValue, BSzSize AS Description FROM BottleSize UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 71;
	}
	public string GetControlName() {
		return "OrdLSizeValue";
	}
	public string GetDFName() {
		return "OrdLSize";
	}
	public string GetTitle() {
		return "Size";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLSize.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLSize/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdLSize'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLSize.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLSize";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLSize")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLSize", "@OrdLSize", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLSize", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLSize", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMToRecords : 
	DataFieldAutoCompleteMultipleBase<EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "To (Records)";}
		set { } 
	}

	public string DFName=> "EMToRecords";

		public string GetDataSource() {
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMToRecords").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMToRecords").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "";		}
		return _DataSource;

	}
    
	public EMail_EMToRecords(EMail Parent) : 
		base(Parent, "EMToRecords"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class EMail_EMToRecordsFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMToRecords").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMToRecords").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 717;
	}
	public string GetControlName() {
		return "EMToRecordsValue";
	}
	public string GetDFName() {
		return "EMToRecords";
	}
	public string GetTitle() {
		return "To (Records)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMToRecords.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/EMail/AutoCompleteEMToRecords/' onchange=\"javascript:IQAutoSave('/EMail/SaveEMToRecords/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='EMToRecords'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMToRecords.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMToRecords";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/EMail/AutoCompleteEMToRecords/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMToRecords")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMToRecords", "@EMToRecords", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMToRecords", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMToRecords", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class EMail_EMDF : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "DataField";}
		set { } 
	}

	public string DFName=> "EMDF";

	
	public EMail_EMDF(EMail Parent) : 
		base(Parent, "EMDF"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EMail_EMDFFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMDF").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMDF").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 718;
	}
	public string GetControlName() {
		return "EMDFValue";
	}
	public string GetDFName() {
		return "EMDF";
	}
	public string GetTitle() {
		return "DataField";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMDF.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EMail/SaveEMDF/?RecId=[[RecId]]',$(this));\" data-bound-name='EMDF' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMDF.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMDF";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMDF")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMDF", "@EMDF", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMDF", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMDF", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMCCRecords : 
	DataFieldAutoCompleteMultipleBase<EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "CC (Records)";}
		set { } 
	}

	public string DFName=> "EMCCRecords";

		public string GetDataSource() {
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMCCRecords").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMCCRecords").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "";		}
		return _DataSource;

	}
    
	public EMail_EMCCRecords(EMail Parent) : 
		base(Parent, "EMCCRecords"
			
		)
    {
				Enabled = true; 
		
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class EMail_EMCCRecordsFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMCCRecords").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMCCRecords").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 719;
	}
	public string GetControlName() {
		return "EMCCRecordsValue";
	}
	public string GetDFName() {
		return "EMCCRecords";
	}
	public string GetTitle() {
		return "CC (Records)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMCCRecords.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/EMail/AutoCompleteEMCCRecords/' onchange=\"javascript:IQAutoSave('/EMail/SaveEMCCRecords/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='EMCCRecords'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMCCRecords.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMCCRecords";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/EMail/AutoCompleteEMCCRecords/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMCCRecords")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMCCRecords", "@EMCCRecords", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMCCRecords", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMCCRecords", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class OrderLine_OrdLDesc : 
	DataFieldBase<string,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Description";}
		set { } 
	}

	public string DFName=> "OrdLDesc";

	
	public OrderLine_OrdLDesc(OrderLine Parent) : 
		base(Parent, "OrdLDesc"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class OrderLine_OrdLDescFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLDesc").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLDesc").First().Value(new OrderLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 72;
	}
	public string GetControlName() {
		return "OrdLDescValue";
	}
	public string GetDFName() {
		return "OrdLDesc";
	}
	public string GetTitle() {
		return "Description";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLDesc.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLDesc/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdLDesc' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLDesc.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLDesc";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLDesc")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLDesc", "@OrdLDesc", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLDesc", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLDesc", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMBCC : 
	DataFieldBase<string,EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "BCC";}
		set { } 
	}

	public string DFName=> "EMBCC";

	
	public EMail_EMBCC(EMail Parent) : 
		base(Parent, "EMBCC"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EMail_EMBCCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBCC").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBCC").First().Value(new EMail());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 720;
	}
	public string GetControlName() {
		return "EMBCCValue";
	}
	public string GetDFName() {
		return "EMBCC";
	}
	public string GetTitle() {
		return "BCC";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMBCC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EMail/SaveEMBCC/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='EMBCC'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMBCC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMBCC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMBCC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMBCC", "@EMBCC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMBCC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMBCC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EMail_EMBCCRecords : 
	DataFieldAutoCompleteMultipleBase<EMail>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "BCC (Records)";}
		set { } 
	}

	public string DFName=> "EMBCCRecords";

		public string GetDataSource() {
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBCCRecords").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBCCRecords").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT  AS KeyValue,  AS Description FROM  UNION SELECT 0, '' ORDER BY ";		}
		return _DataSource;

	}
    
	public EMail_EMBCCRecords(EMail Parent) : 
		base(Parent, "EMBCCRecords"
			
		)
    {
				Enabled = true; 
		
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class EMail_EMBCCRecordsFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBCCRecords").Any()) 
			return DS.GetManager<EMail>().OnDataSource.Where(f=> f.Key == "EMBCCRecords").First().Value(new EMail());
		
		
			return  "SELECT  AS KeyValue,  AS Description FROM  UNION SELECT 0, '' ORDER BY ";	}

	public int GetFieldUniqueId() {
		return 721;
	}
	public string GetControlName() {
		return "EMBCCRecordsValue";
	}
	public string GetDFName() {
		return "EMBCCRecords";
	}
	public string GetTitle() {
		return "BCC (Records)";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EMail ds;
					ds = (EMail)dsI;
		 
		
		return ds.EMBCCRecords.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EMail ds;
				ds = (EMail)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/EMail/AutoCompleteEMBCCRecords/' onchange=\"javascript:IQAutoSave('/EMail/SaveEMBCCRecords/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='EMBCCRecords'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMBCCRecords.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMBCCRecords";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/EMail/AutoCompleteEMBCCRecords/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMBCCRecords")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMBCCRecords", "@EMBCCRecords", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMBCCRecords", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EMail").GetFieldOperators("EMBCCRecords", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class WordDocument_WrDocQuery : 
	DataFieldSelectBase<string,WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Query";}
		set { } 
	}

	public string DFName=> "WrDocQuery";

		public string GetDataSource() {
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQuery").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQuery").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT QryId AS KeyValue, QryName AS Description FROM Query UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public WordDocument_WrDocQuery(WordDocument Parent) : 
		base(Parent, "WrDocQuery"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class WordDocument_WrDocQueryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQuery").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQuery").First().Value(new WordDocument());
		
		
			return  "SELECT QryId AS KeyValue, QryName AS Description FROM Query UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 722;
	}
	public string GetControlName() {
		return "WrDocQueryValue";
	}
	public string GetDFName() {
		return "WrDocQuery";
	}
	public string GetTitle() {
		return "Query";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocQuery.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocQuery/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='WrDocQuery'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocQuery.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocQuery";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocQuery")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocQuery", "@WrDocQuery", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocQuery", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocQuery", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryScreen : 
	DataFieldSelectBase<string,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Screen";}
		set { } 
	}

	public string DFName=> "QryScreen";

		public string GetDataSource() {
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryScreen").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryScreen").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "";		}
		return _DataSource;

	}
    
	public Query_QryScreen(Query Parent) : 
		base(Parent, "QryScreen"
			
		)
    {
				Enabled = true; 
		
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Query_QryScreenFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryScreen").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryScreen").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 723;
	}
	public string GetControlName() {
		return "QryScreenValue";
	}
	public string GetDFName() {
		return "QryScreen";
	}
	public string GetTitle() {
		return "Screen";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryScreen.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Query/SaveQryScreen/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='QryScreen'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryScreen.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryScreen";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryScreen")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryScreen", "@QryScreen", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryScreen", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryScreen", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTId : 
	FormattableDataFieldBase<int,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "EMTId";

	
	public EmailTemplatess_EMTId(EmailTemplatess Parent) : 
		base(Parent, "EMTId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class EmailTemplatess_EMTIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTId").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTId").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 724;
	}
	public string GetControlName() {
		return "EMTIdValue";
	}
	public string GetDFName() {
		return "EMTId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTId/?RecId=[[RecId]]',$(this));\" data-bound-name='EMTId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTId", "@EMTId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTName : 
	DataFieldBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Name";}
		set { } 
	}

	public string DFName=> "EMTName";

	
	public EmailTemplatess_EMTName(EmailTemplatess Parent) : 
		base(Parent, "EMTName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EmailTemplatess_EMTNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTName").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTName").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 725;
	}
	public string GetControlName() {
		return "EMTNameValue";
	}
	public string GetDFName() {
		return "EMTName";
	}
	public string GetTitle() {
		return "Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTName/?RecId=[[RecId]]',$(this));\" data-bound-name='EMTName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTName", "@EMTName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTBody : 
	DataFieldBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Body";}
		set { } 
	}

	public string DFName=> "EMTBody";

	
	public EmailTemplatess_EMTBody(EmailTemplatess Parent) : 
		base(Parent, "EMTBody"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EmailTemplatess_EMTBodyFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTBody").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTBody").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 726;
	}
	public string GetControlName() {
		return "EMTBodyValue";
	}
	public string GetDFName() {
		return "EMTBody";
	}
	public string GetTitle() {
		return "Body";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTBody.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "[[Val]]";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTBody.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTBody";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTBody")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTBody", "@EMTBody", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTBody", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTBody", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTSubject : 
	DataFieldBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Subject";}
		set { } 
	}

	public string DFName=> "EMTSubject";

	
	public EmailTemplatess_EMTSubject(EmailTemplatess Parent) : 
		base(Parent, "EMTSubject"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EmailTemplatess_EMTSubjectFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTSubject").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTSubject").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 727;
	}
	public string GetControlName() {
		return "EMTSubjectValue";
	}
	public string GetDFName() {
		return "EMTSubject";
	}
	public string GetTitle() {
		return "Subject";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTSubject.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTSubject/?RecId=[[RecId]]',$(this));\" data-bound-name='EMTSubject' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTSubject.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTSubject";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTSubject")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTSubject", "@EMTSubject", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTSubject", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTSubject", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTFromAddr : 
	DataFieldBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "From Address";}
		set { } 
	}

	public string DFName=> "EMTFromAddr";

	
	public EmailTemplatess_EMTFromAddr(EmailTemplatess Parent) : 
		base(Parent, "EMTFromAddr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EmailTemplatess_EMTFromAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTFromAddr").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTFromAddr").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 728;
	}
	public string GetControlName() {
		return "EMTFromAddrValue";
	}
	public string GetDFName() {
		return "EMTFromAddr";
	}
	public string GetTitle() {
		return "From Address";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTFromAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTFromAddr/?RecId=[[RecId]]',$(this));\" data-bound-name='EMTFromAddr' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTFromAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTFromAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTFromAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTFromAddr", "@EMTFromAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTFromAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTFromAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTToAddr : 
	DataFieldBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "To Address";}
		set { } 
	}

	public string DFName=> "EMTToAddr";

	
	public EmailTemplatess_EMTToAddr(EmailTemplatess Parent) : 
		base(Parent, "EMTToAddr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EmailTemplatess_EMTToAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTToAddr").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTToAddr").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 729;
	}
	public string GetControlName() {
		return "EMTToAddrValue";
	}
	public string GetDFName() {
		return "EMTToAddr";
	}
	public string GetTitle() {
		return "To Address";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTToAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTToAddr/?RecId=[[RecId]]',$(this));\" data-bound-name='EMTToAddr' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTToAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTToAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTToAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTToAddr", "@EMTToAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTToAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTToAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLWeight : 
	FormattableDataFieldBase<int,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Weight";}
		set { } 
	}

	public string DFName=> "OrdLWeight";

	
	public OrderLine_OrdLWeight(OrderLine Parent) : 
		base(Parent, "OrdLWeight"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class OrderLine_OrdLWeightFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLWeight").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLWeight").First().Value(new OrderLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 73;
	}
	public string GetControlName() {
		return "OrdLWeightValue";
	}
	public string GetDFName() {
		return "OrdLWeight";
	}
	public string GetTitle() {
		return "Weight";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLWeight.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLWeight/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdLWeight' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLWeight.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLWeight";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLWeight")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLWeight", "@OrdLWeight", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLWeight", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLWeight", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTCCAddr : 
	DataFieldBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "CC Address";}
		set { } 
	}

	public string DFName=> "EMTCCAddr";

	
	public EmailTemplatess_EMTCCAddr(EmailTemplatess Parent) : 
		base(Parent, "EMTCCAddr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EmailTemplatess_EMTCCAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTCCAddr").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTCCAddr").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 730;
	}
	public string GetControlName() {
		return "EMTCCAddrValue";
	}
	public string GetDFName() {
		return "EMTCCAddr";
	}
	public string GetTitle() {
		return "CC Address";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTCCAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTCCAddr/?RecId=[[RecId]]',$(this));\" data-bound-name='EMTCCAddr' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTCCAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTCCAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTCCAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTCCAddr", "@EMTCCAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTCCAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTCCAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTBCCAddr : 
	DataFieldBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "BCC Address";}
		set { } 
	}

	public string DFName=> "EMTBCCAddr";

	
	public EmailTemplatess_EMTBCCAddr(EmailTemplatess Parent) : 
		base(Parent, "EMTBCCAddr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class EmailTemplatess_EMTBCCAddrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTBCCAddr").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTBCCAddr").First().Value(new EmailTemplatess());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 731;
	}
	public string GetControlName() {
		return "EMTBCCAddrValue";
	}
	public string GetDFName() {
		return "EMTBCCAddr";
	}
	public string GetTitle() {
		return "BCC Address";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTBCCAddr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTBCCAddr/?RecId=[[RecId]]',$(this));\" data-bound-name='EMTBCCAddr' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTBCCAddr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTBCCAddr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTBCCAddr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTBCCAddr", "@EMTBCCAddr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTBCCAddr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTBCCAddr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class EmailTemplatess_EMTQuery : 
	DataFieldSelectBase<string,EmailTemplatess>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Query";}
		set { } 
	}

	public string DFName=> "EMTQuery";

		public string GetDataSource() {
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTQuery").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTQuery").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT QryId AS KeyValue, QryName AS Description FROM Query UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public EmailTemplatess_EMTQuery(EmailTemplatess Parent) : 
		base(Parent, "EMTQuery"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class EmailTemplatess_EMTQueryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTQuery").Any()) 
			return DS.GetManager<EmailTemplatess>().OnDataSource.Where(f=> f.Key == "EMTQuery").First().Value(new EmailTemplatess());
		
		
			return  "SELECT QryId AS KeyValue, QryName AS Description FROM Query UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 737;
	}
	public string GetControlName() {
		return "EMTQueryValue";
	}
	public string GetDFName() {
		return "EMTQuery";
	}
	public string GetTitle() {
		return "Query";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		EmailTemplatess ds;
					ds = (EmailTemplatess)dsI;
		 
		
		return ds.EMTQuery.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		EmailTemplatess ds;
				ds = (EmailTemplatess)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/EmailTemplatess/SaveEMTQuery/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='EMTQuery'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.EMTQuery.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "EMTQuery";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "EMTQuery")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "EMTQuery", "@EMTQuery", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "EMTQuery", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("EmailTemplatess").GetFieldOperators("EMTQuery", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfId : 
	DataFieldBase<int,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "StfId";

	
	public Staff_StfId(Staff Parent) : 
		base(Parent, "StfId"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Staff_StfIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfId").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfId").First().Value(new Staff());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 738;
	}
	public string GetControlName() {
		return "StfIdValue";
	}
	public string GetDFName() {
		return "StfId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "[[Val]]";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfId", "@StfId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfFN : 
	DataFieldBase<string,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Forename";}
		set { } 
	}

	public string DFName=> "StfFN";

	
	public Staff_StfFN(Staff Parent) : 
		base(Parent, "StfFN"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Staff_StfFNFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfFN").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfFN").First().Value(new Staff());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 739;
	}
	public string GetControlName() {
		return "StfFNValue";
	}
	public string GetDFName() {
		return "StfFN";
	}
	public string GetTitle() {
		return "Forename";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfFN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Staff/SaveStfFN/?RecId=[[RecId]]',$(this));\" data-bound-name='StfFN' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfFN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfFN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfFN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfFN", "@StfFN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfFN", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfFN", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLNumPallet : 
	FormattableDataFieldBase<double,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Number of Pallets";}
		set { } 
	}

	public string DFName=> "OrdLNumPallet";

	
	public OrderLine_OrdLNumPallet(OrderLine Parent) : 
		base(Parent, "OrdLNumPallet"
			,"f2"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class OrderLine_OrdLNumPalletFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLNumPallet").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLNumPallet").First().Value(new OrderLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 74;
	}
	public string GetControlName() {
		return "OrdLNumPalletValue";
	}
	public string GetDFName() {
		return "OrdLNumPallet";
	}
	public string GetTitle() {
		return "Number of Pallets";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLNumPallet.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLNumPallet/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdLNumPallet' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLNumPallet.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLNumPallet";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLNumPallet")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLNumPallet", "@OrdLNumPallet", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLNumPallet", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLNumPallet", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfSN : 
	DataFieldBase<string,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Surname";}
		set { } 
	}

	public string DFName=> "StfSN";

	
	public Staff_StfSN(Staff Parent) : 
		base(Parent, "StfSN"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Staff_StfSNFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfSN").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfSN").First().Value(new Staff());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 740;
	}
	public string GetControlName() {
		return "StfSNValue";
	}
	public string GetDFName() {
		return "StfSN";
	}
	public string GetTitle() {
		return "Surname";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfSN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Staff/SaveStfSN/?RecId=[[RecId]]',$(this));\" data-bound-name='StfSN' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfSN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfSN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfSN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfSN", "@StfSN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfSN", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfSN", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfName : 
	DataFieldBase<string,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Name";}
		set { } 
	}

	public string DFName=> "StfName";

	
	public Staff_StfName(Staff Parent) : 
		base(Parent, "StfName"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Staff_StfNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfName").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfName").First().Value(new Staff());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 741;
	}
	public string GetControlName() {
		return "StfNameValue";
	}
	public string GetDFName() {
		return "StfName";
	}
	public string GetTitle() {
		return "Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Staff/SaveStfName/?RecId=[[RecId]]',$(this));\" data-bound-name='StfName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfName", "@StfName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfUsername : 
	DataFieldBase<string,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Username";}
		set { } 
	}

	public string DFName=> "StfUsername";

	
	public Staff_StfUsername(Staff Parent) : 
		base(Parent, "StfUsername"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Staff_StfUsernameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfUsername").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfUsername").First().Value(new Staff());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 742;
	}
	public string GetControlName() {
		return "StfUsernameValue";
	}
	public string GetDFName() {
		return "StfUsername";
	}
	public string GetTitle() {
		return "Username";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfUsername.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Staff/SaveStfUsername/?RecId=[[RecId]]',$(this));\" data-bound-name='StfUsername' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfUsername.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfUsername";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfUsername")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfUsername", "@StfUsername", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfUsername", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfUsername", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfPassword : 
	DataFieldBase<string,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Password";}
		set { } 
	}

	public string DFName=> "StfPassword";

	
	public Staff_StfPassword(Staff Parent) : 
		base(Parent, "StfPassword"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Staff_StfPasswordFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfPassword").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfPassword").First().Value(new Staff());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 743;
	}
	public string GetControlName() {
		return "StfPasswordValue";
	}
	public string GetDFName() {
		return "StfPassword";
	}
	public string GetTitle() {
		return "Password";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfPassword.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Staff/SaveStfPassword/?RecId=[[RecId]]',$(this));\" data-bound-name='StfPassword' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfPassword.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfPassword";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfPassword")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfPassword", "@StfPassword", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfPassword", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfPassword", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfEM : 
	DataFieldBase<string,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Email";}
		set { } 
	}

	public string DFName=> "StfEM";

	
	public Staff_StfEM(Staff Parent) : 
		base(Parent, "StfEM"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Staff_StfEMFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfEM").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfEM").First().Value(new Staff());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 744;
	}
	public string GetControlName() {
		return "StfEMValue";
	}
	public string GetDFName() {
		return "StfEM";
	}
	public string GetTitle() {
		return "Email";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfEM.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Staff/SaveStfEM/?RecId=[[RecId]]',$(this));\" data-bound-name='StfEM' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfEM.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfEM";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfEM")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfEM", "@StfEM", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfEM", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfEM", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Staff_StfSG : 
	DataFieldSelectBase<int,Staff>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Security Groups";}
		set { } 
	}

	public string DFName=> "StfSG";

		public string GetDataSource() {
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfSG").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfSG").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.StfSGAsQuery();		}
		return _DataSource;

	}
    
	public Staff_StfSG(Staff Parent) : 
		base(Parent, "StfSG"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Staff_StfSGFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfSG").Any()) 
			return DS.GetManager<Staff>().OnDataSource.Where(f=> f.Key == "StfSG").First().Value(new Staff());
		
		
			return DSUtil.StfSGAsQuery();	}

	public int GetFieldUniqueId() {
		return 745;
	}
	public string GetControlName() {
		return "StfSGValue";
	}
	public string GetDFName() {
		return "StfSG";
	}
	public string GetTitle() {
		return "Security Groups";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Staff ds;
					ds = (Staff)dsI;
		 
		
		return ds.StfSG.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Staff ds;
				ds = (Staff)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Staff/SaveStfSG/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='StfSG'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.StfSG.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "StfSG";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "StfSG")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "StfSG", "@StfSG", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "StfSG", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Staff").GetFieldOperators("StfSG", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocCategory : 
	DataFieldBase<string,WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Category";}
		set { } 
	}

	public string DFName=> "WrDocCategory";

	
	public WordDocument_WrDocCategory(WordDocument Parent) : 
		base(Parent, "WrDocCategory"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class WordDocument_WrDocCategoryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocCategory").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocCategory").First().Value(new WordDocument());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 746;
	}
	public string GetControlName() {
		return "WrDocCategoryValue";
	}
	public string GetDFName() {
		return "WrDocCategory";
	}
	public string GetTitle() {
		return "Category";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocCategory.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocCategory/?RecId=[[RecId]]',$(this));\" data-bound-name='WrDocCategory' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocCategory.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocCategory";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocCategory")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocCategory", "@WrDocCategory", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocCategory", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocCategory", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocQueryType : 
	DataFieldSelectBase<int,WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Query Type";}
		set { } 
	}

	public string DFName=> "WrDocQueryType";

		public string GetDataSource() {
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQueryType").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQueryType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.WrDocQueryTypeAsQuery();		}
		return _DataSource;

	}
    
	public WordDocument_WrDocQueryType(WordDocument Parent) : 
		base(Parent, "WrDocQueryType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class WordDocument_WrDocQueryTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQueryType").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocQueryType").First().Value(new WordDocument());
		
		
			return DSUtil.WrDocQueryTypeAsQuery();	}

	public int GetFieldUniqueId() {
		return 747;
	}
	public string GetControlName() {
		return "WrDocQueryTypeValue";
	}
	public string GetDFName() {
		return "WrDocQueryType";
	}
	public string GetTitle() {
		return "Query Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocQueryType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocQueryType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='WrDocQueryType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocQueryType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocQueryType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocQueryType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocQueryType", "@WrDocQueryType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocQueryType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocQueryType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocBuiltInQuery : 
	DataFieldBase<string,WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Query";}
		set { } 
	}

	public string DFName=> "WrDocBuiltInQuery";

	
	public WordDocument_WrDocBuiltInQuery(WordDocument Parent) : 
		base(Parent, "WrDocBuiltInQuery"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class WordDocument_WrDocBuiltInQueryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocBuiltInQuery").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocBuiltInQuery").First().Value(new WordDocument());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 748;
	}
	public string GetControlName() {
		return "WrDocBuiltInQueryValue";
	}
	public string GetDFName() {
		return "WrDocBuiltInQuery";
	}
	public string GetTitle() {
		return "Query";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocBuiltInQuery.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocBuiltInQuery/?RecId=[[RecId]]',$(this));\" data-bound-name='WrDocBuiltInQuery' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocBuiltInQuery.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocBuiltInQuery";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "WrDocBuiltInQuery")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocBuiltInQuery", "@WrDocBuiltInQuery", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocBuiltInQuery", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocBuiltInQuery", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSId : 
	FormattableDataFieldBase<int,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "SMSId";

	
	public SMS_SMSId(SMS Parent) : 
		base(Parent, "SMSId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class SMS_SMSIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSId").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSId").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 749;
	}
	public string GetControlName() {
		return "SMSIdValue";
	}
	public string GetDFName() {
		return "SMSId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSId/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSId", "@SMSId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class OrderLine_OrdLPalletType : 
	DataFieldSelectBase<int,OrderLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Pallet Type";}
		set { } 
	}

	public string DFName=> "OrdLPalletType";

		public string GetDataSource() {
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPalletType").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPalletType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT PallId AS KeyValue, PallName AS Description FROM PalletType UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public OrderLine_OrdLPalletType(OrderLine Parent) : 
		base(Parent, "OrdLPalletType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class OrderLine_OrdLPalletTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPalletType").Any()) 
			return DS.GetManager<OrderLine>().OnDataSource.Where(f=> f.Key == "OrdLPalletType").First().Value(new OrderLine());
		
		
			return  "SELECT PallId AS KeyValue, PallName AS Description FROM PalletType UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 75;
	}
	public string GetControlName() {
		return "OrdLPalletTypeValue";
	}
	public string GetDFName() {
		return "OrdLPalletType";
	}
	public string GetTitle() {
		return "Pallet Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		OrderLine ds;
					ds = (OrderLine)dsI;
		 
		
		return ds.OrdLPalletType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		OrderLine ds;
				ds = (OrderLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/OrderLine/SaveOrdLPalletType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='OrdLPalletType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdLPalletType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdLPalletType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdLPalletType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdLPalletType", "@OrdLPalletType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdLPalletType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("OrderLine").GetFieldOperators("OrdLPalletType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSContent : 
	DataFieldBase<string,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Content";}
		set { } 
	}

	public string DFName=> "SMSContent";

	
	public SMS_SMSContent(SMS Parent) : 
		base(Parent, "SMSContent"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMS_SMSContentFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSContent").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSContent").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 750;
	}
	public string GetControlName() {
		return "SMSContentValue";
	}
	public string GetDFName() {
		return "SMSContent";
	}
	public string GetTitle() {
		return "Content";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSContent.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSContent/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SMSContent'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSContent.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSContent";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSContent")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSContent", "@SMSContent", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSContent", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSContent", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSDestination : 
	DataFieldBase<string,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Destination";}
		set { } 
	}

	public string DFName=> "SMSDestination";

	
	public SMS_SMSDestination(SMS Parent) : 
		base(Parent, "SMSDestination"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMS_SMSDestinationFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDestination").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDestination").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 751;
	}
	public string GetControlName() {
		return "SMSDestinationValue";
	}
	public string GetDFName() {
		return "SMSDestination";
	}
	public string GetTitle() {
		return "Destination";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSDestination.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSDestination/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSDestination' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSDestination.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSDestination";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSDestination")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSDestination", "@SMSDestination", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSDestination", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSDestination", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSDataset : 
	DataFieldBase<string,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Dataset";}
		set { } 
	}

	public string DFName=> "SMSDataset";

	
	public SMS_SMSDataset(SMS Parent) : 
		base(Parent, "SMSDataset"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMS_SMSDatasetFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDataset").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDataset").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 752;
	}
	public string GetControlName() {
		return "SMSDatasetValue";
	}
	public string GetDFName() {
		return "SMSDataset";
	}
	public string GetTitle() {
		return "Dataset";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSDataset.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSDataset/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSDataset' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSDataset.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSDataset";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSDataset")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSDataset", "@SMSDataset", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSDataset", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSDataset", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSRecordID : 
	FormattableDataFieldBase<int,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "RecordID";}
		set { } 
	}

	public string DFName=> "SMSRecordID";

	
	public SMS_SMSRecordID(SMS Parent) : 
		base(Parent, "SMSRecordID"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class SMS_SMSRecordIDFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSRecordID").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSRecordID").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 753;
	}
	public string GetControlName() {
		return "SMSRecordIDValue";
	}
	public string GetDFName() {
		return "SMSRecordID";
	}
	public string GetTitle() {
		return "RecordID";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSRecordID.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSRecordID/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSRecordID' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSRecordID.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSRecordID";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSRecordID")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSRecordID", "@SMSRecordID", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSRecordID", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSRecordID", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSDateQueued : 
	DateDataFieldBase<SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Queued";}
		set { } 
	}

	public string DFName=> "SMSDateQueued";

	
	public SMS_SMSDateQueued(SMS Parent) : 
		base(Parent, "SMSDateQueued"
			,"dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class SMS_SMSDateQueuedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDateQueued").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDateQueued").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 754;
	}
	public string GetControlName() {
		return "SMSDateQueuedValue";
	}
	public string GetDFName() {
		return "SMSDateQueued";
	}
	public string GetTitle() {
		return "Queued";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSDateQueued.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSDateQueued/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSDateQueued' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSDateQueued.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSDateQueued";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSDateQueued")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSDateQueued", "@SMSDateQueued", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSDateQueued", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSDateQueued", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSDateConfirmed : 
	DateDataFieldBase<SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivered";}
		set { } 
	}

	public string DFName=> "SMSDateConfirmed";

	
	public SMS_SMSDateConfirmed(SMS Parent) : 
		base(Parent, "SMSDateConfirmed"
			,"dd-MMM-yyyy"
		)
    {
		        Enabled = false;
		
				    }
}


public partial class SMS_SMSDateConfirmedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDateConfirmed").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSDateConfirmed").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 755;
	}
	public string GetControlName() {
		return "SMSDateConfirmedValue";
	}
	public string GetDFName() {
		return "SMSDateConfirmed";
	}
	public string GetTitle() {
		return "Delivered";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSDateConfirmed.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSDateConfirmed/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSDateConfirmed' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSDateConfirmed.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSDateConfirmed";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSDateConfirmed")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSDateConfirmed", "@SMSDateConfirmed", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSDateConfirmed", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSDateConfirmed", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSStatus : 
	DataFieldAutoCompleteSingleBase<int,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Status";}
		set { } 
	}

	public string DFName=> "SMSStatus";

		public string GetDataSource() {
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSStatus").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSStatus").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.SMSStatusAsQuery();		}
		return _DataSource;

	}
    
	public SMS_SMSStatus(SMS Parent) : 
		base(Parent, "SMSStatus"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class SMS_SMSStatusFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSStatus").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSStatus").First().Value(new SMS());
		
		
			return DSUtil.SMSStatusAsQuery();	}

	public int GetFieldUniqueId() {
		return 756;
	}
	public string GetControlName() {
		return "SMSStatusValue";
	}
	public string GetDFName() {
		return "SMSStatus";
	}
	public string GetTitle() {
		return "Status";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSStatus.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/SMS/AutoCompleteSMSStatus/' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSStatus/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='SMSStatus'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSStatus.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSStatus";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/SMS/AutoCompleteSMSStatus/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSStatus")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSStatus", "@SMSStatus", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSStatus", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSStatus", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class SMS_SMSStatusMsg : 
	DataFieldBase<string,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Status Message";}
		set { } 
	}

	public string DFName=> "SMSStatusMsg";

	
	public SMS_SMSStatusMsg(SMS Parent) : 
		base(Parent, "SMSStatusMsg"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class SMS_SMSStatusMsgFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSStatusMsg").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSStatusMsg").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 757;
	}
	public string GetControlName() {
		return "SMSStatusMsgValue";
	}
	public string GetDFName() {
		return "SMSStatusMsg";
	}
	public string GetTitle() {
		return "Status Message";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSStatusMsg.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSStatusMsg/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SMSStatusMsg'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSStatusMsg.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSStatusMsg";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSStatusMsg")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSStatusMsg", "@SMSStatusMsg", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSStatusMsg", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSStatusMsg", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMSTemplate_SMSTId : 
	FormattableDataFieldBase<int,SMSTemplate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "SMSTId";

	
	public SMSTemplate_SMSTId(SMSTemplate Parent) : 
		base(Parent, "SMSTId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class SMSTemplate_SMSTIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTId").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTId").First().Value(new SMSTemplate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 758;
	}
	public string GetControlName() {
		return "SMSTIdValue";
	}
	public string GetDFName() {
		return "SMSTId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMSTemplate ds;
					ds = (SMSTemplate)dsI;
		 
		
		return ds.SMSTId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMSTemplate ds;
				ds = (SMSTemplate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMSTemplate/SaveSMSTId/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSTId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTId", "@SMSTId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMSTemplate").GetFieldOperators("SMSTId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMSTemplate_SMSTContent : 
	DataFieldBase<string,SMSTemplate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Content";}
		set { } 
	}

	public string DFName=> "SMSTContent";

	
	public SMSTemplate_SMSTContent(SMSTemplate Parent) : 
		base(Parent, "SMSTContent"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMSTemplate_SMSTContentFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTContent").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTContent").First().Value(new SMSTemplate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 759;
	}
	public string GetControlName() {
		return "SMSTContentValue";
	}
	public string GetDFName() {
		return "SMSTContent";
	}
	public string GetTitle() {
		return "Content";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMSTemplate ds;
					ds = (SMSTemplate)dsI;
		 
		
		return ds.SMSTContent.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMSTemplate ds;
				ds = (SMSTemplate)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/SMSTemplate/SaveSMSTContent/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='SMSTContent'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTContent.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTContent";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTContent")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTContent", "@SMSTContent", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTContent", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMSTemplate").GetFieldOperators("SMSTContent", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobNo : 
	DataFieldBase<string,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "JobNo";

	
	public Job_JobNo(Job Parent) : 
		base(Parent, "JobNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Job_JobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobNo").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobNo").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 76;
	}
	public string GetControlName() {
		return "JobNoValue";
	}
	public string GetDFName() {
		return "JobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Job/SaveJobNo/?RecId=[[RecId]]',$(this));\" data-bound-name='JobNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobNo", "@JobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMSTemplate_SMSTDestination : 
	DataFieldBase<string,SMSTemplate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Destination";}
		set { } 
	}

	public string DFName=> "SMSTDestination";

	
	public SMSTemplate_SMSTDestination(SMSTemplate Parent) : 
		base(Parent, "SMSTDestination"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMSTemplate_SMSTDestinationFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTDestination").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTDestination").First().Value(new SMSTemplate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 760;
	}
	public string GetControlName() {
		return "SMSTDestinationValue";
	}
	public string GetDFName() {
		return "SMSTDestination";
	}
	public string GetTitle() {
		return "Destination";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMSTemplate ds;
					ds = (SMSTemplate)dsI;
		 
		
		return ds.SMSTDestination.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMSTemplate ds;
				ds = (SMSTemplate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMSTemplate/SaveSMSTDestination/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSTDestination' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTDestination.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTDestination";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTDestination")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTDestination", "@SMSTDestination", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTDestination", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMSTemplate").GetFieldOperators("SMSTDestination", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMSTemplate_SMSTName : 
	DataFieldBase<string,SMSTemplate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Name";}
		set { } 
	}

	public string DFName=> "SMSTName";

	
	public SMSTemplate_SMSTName(SMSTemplate Parent) : 
		base(Parent, "SMSTName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMSTemplate_SMSTNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTName").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTName").First().Value(new SMSTemplate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 761;
	}
	public string GetControlName() {
		return "SMSTNameValue";
	}
	public string GetDFName() {
		return "SMSTName";
	}
	public string GetTitle() {
		return "Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMSTemplate ds;
					ds = (SMSTemplate)dsI;
		 
		
		return ds.SMSTName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMSTemplate ds;
				ds = (SMSTemplate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMSTemplate/SaveSMSTName/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSTName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTName", "@SMSTName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMSTemplate").GetFieldOperators("SMSTName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMSTemplate_SMSTDataset : 
	DataFieldSelectBase<string,SMSTemplate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Applies To";}
		set { } 
	}

	public string DFName=> "SMSTDataset";

		public string GetDataSource() {
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTDataset").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTDataset").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  IQApp.Datasets.DatasetsAsQuery();		}
		return _DataSource;

	}
    
	public SMSTemplate_SMSTDataset(SMSTemplate Parent) : 
		base(Parent, "SMSTDataset"
			
		)
    {
				Enabled = true; 
		
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class SMSTemplate_SMSTDatasetFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTDataset").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTDataset").First().Value(new SMSTemplate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 762;
	}
	public string GetControlName() {
		return "SMSTDatasetValue";
	}
	public string GetDFName() {
		return "SMSTDataset";
	}
	public string GetTitle() {
		return "Applies To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMSTemplate ds;
					ds = (SMSTemplate)dsI;
		 
		
		return ds.SMSTDataset.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMSTemplate ds;
				ds = (SMSTemplate)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/SMSTemplate/SaveSMSTDataset/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='SMSTDataset'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTDataset.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTDataset";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTDataset")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTDataset", "@SMSTDataset", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTDataset", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMSTemplate").GetFieldOperators("SMSTDataset", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMSTemplate_SMSTSender : 
	DataFieldBase<string,SMSTemplate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sender";}
		set { } 
	}

	public string DFName=> "SMSTSender";

	
	public SMSTemplate_SMSTSender(SMSTemplate Parent) : 
		base(Parent, "SMSTSender"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMSTemplate_SMSTSenderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTSender").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTSender").First().Value(new SMSTemplate());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 763;
	}
	public string GetControlName() {
		return "SMSTSenderValue";
	}
	public string GetDFName() {
		return "SMSTSender";
	}
	public string GetTitle() {
		return "Sender";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMSTemplate ds;
					ds = (SMSTemplate)dsI;
		 
		
		return ds.SMSTSender.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMSTemplate ds;
				ds = (SMSTemplate)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMSTemplate/SaveSMSTSender/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSTSender' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTSender.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTSender";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTSender")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTSender", "@SMSTSender", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTSender", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMSTemplate").GetFieldOperators("SMSTSender", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSSender : 
	DataFieldBase<string,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sender";}
		set { } 
	}

	public string DFName=> "SMSSender";

	
	public SMS_SMSSender(SMS Parent) : 
		base(Parent, "SMSSender"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class SMS_SMSSenderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSSender").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSSender").First().Value(new SMS());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 764;
	}
	public string GetControlName() {
		return "SMSSenderValue";
	}
	public string GetDFName() {
		return "SMSSender";
	}
	public string GetTitle() {
		return "Sender";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSSender.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSSender/?RecId=[[RecId]]',$(this));\" data-bound-name='SMSSender' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSSender.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSSender";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSSender")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSSender", "@SMSSender", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSSender", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSSender", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMS_SMSTemplate : 
	DataFieldSelectBase<int,SMS>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Template";}
		set { } 
	}

	public string DFName=> "SMSTemplate";

		public string GetDataSource() {
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSTemplate").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSTemplate").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT SMSTId AS KeyValue, SMSTName AS Description FROM SMSTemplate UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public SMS_SMSTemplate(SMS Parent) : 
		base(Parent, "SMSTemplate"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class SMS_SMSTemplateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSTemplate").Any()) 
			return DS.GetManager<SMS>().OnDataSource.Where(f=> f.Key == "SMSTemplate").First().Value(new SMS());
		
		
			return  "SELECT SMSTId AS KeyValue, SMSTName AS Description FROM SMSTemplate UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 765;
	}
	public string GetControlName() {
		return "SMSTemplateValue";
	}
	public string GetDFName() {
		return "SMSTemplate";
	}
	public string GetTitle() {
		return "Template";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMS ds;
					ds = (SMS)dsI;
		 
		
		return ds.SMSTemplate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMS ds;
				ds = (SMS)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/SMS/SaveSMSTemplate/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='SMSTemplate'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTemplate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTemplate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTemplate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTemplate", "@SMSTemplate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTemplate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMS").GetFieldOperators("SMSTemplate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Orders_OrdDelRef : 
	DataFieldBase<string,Orders>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Delivery Reference";}
		set { } 
	}

	public string DFName=> "OrdDelRef";

	
	public Orders_OrdDelRef(Orders Parent) : 
		base(Parent, "OrdDelRef"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Orders_OrdDelRefFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelRef").Any()) 
			return DS.GetManager<Orders>().OnDataSource.Where(f=> f.Key == "OrdDelRef").First().Value(new Orders());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 766;
	}
	public string GetControlName() {
		return "OrdDelRefValue";
	}
	public string GetDFName() {
		return "OrdDelRef";
	}
	public string GetTitle() {
		return "Delivery Reference";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Orders ds;
					ds = (Orders)dsI;
		 
		
		return ds.OrdDelRef.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Orders ds;
				ds = (Orders)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Orders/SaveOrdDelRef/?RecId=[[RecId]]',$(this));\" data-bound-name='OrdDelRef' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.OrdDelRef.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "OrdDelRef";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "OrdDelRef")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "OrdDelRef", "@OrdDelRef", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "OrdDelRef", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Orders").GetFieldOperators("OrdDelRef", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkMOTDate : 
	DateDataFieldBase<Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "MOT Date";}
		set { } 
	}

	public string DFName=> "TrkMOTDate";

	
	public Truck_TrkMOTDate(Truck Parent) : 
		base(Parent, "TrkMOTDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkMOTDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkMOTDate").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkMOTDate").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 767;
	}
	public string GetControlName() {
		return "TrkMOTDateValue";
	}
	public string GetDFName() {
		return "TrkMOTDate";
	}
	public string GetTitle() {
		return "MOT Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkMOTDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkMOTDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='TrkMOTDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkMOTDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkMOTDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkMOTDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkMOTDate", "@TrkMOTDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkMOTDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkMOTDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkTAXDate : 
	DateDataFieldBase<Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "TAX Due Date";}
		set { } 
	}

	public string DFName=> "TrkTAXDate";

	
	public Truck_TrkTAXDate(Truck Parent) : 
		base(Parent, "TrkTAXDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkTAXDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkTAXDate").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkTAXDate").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 768;
	}
	public string GetControlName() {
		return "TrkTAXDateValue";
	}
	public string GetDFName() {
		return "TrkTAXDate";
	}
	public string GetTitle() {
		return "TAX Due Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkTAXDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkTAXDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='TrkTAXDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkTAXDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkTAXDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkTAXDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkTAXDate", "@TrkTAXDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkTAXDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkTAXDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkDriver : 
	DataFieldSelectBase<int,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Driver";}
		set { } 
	}

	public string DFName=> "TrkDriver";

		public string GetDataSource() {
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDriver").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDriver").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT DrvId AS KeyValue, DrvName AS Description FROM Driver UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Truck_TrkDriver(Truck Parent) : 
		base(Parent, "TrkDriver"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Truck_TrkDriverFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDriver").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDriver").First().Value(new Truck());
		
		
			return  "SELECT DrvId AS KeyValue, DrvName AS Description FROM Driver UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 769;
	}
	public string GetControlName() {
		return "TrkDriverValue";
	}
	public string GetDFName() {
		return "TrkDriver";
	}
	public string GetTitle() {
		return "Driver";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkDriver.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkDriver/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='TrkDriver'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkDriver.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkDriver";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkDriver")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkDriver", "@TrkDriver", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkDriver", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkDriver", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobTransp : 
	DataFieldAutoCompleteSingleBase<int,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Transporter";}
		set { } 
	}

	public string DFName=> "JobTransp";

		public string GetDataSource() {
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTransp").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTransp").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Job_JobTransp(Job Parent) : 
		base(Parent, "JobTransp"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Job_JobTranspFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTransp").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTransp").First().Value(new Job());
		
		
			return  "SELECT CustId AS KeyValue, CustName AS Description FROM Customer UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 77;
	}
	public string GetControlName() {
		return "JobTranspValue";
	}
	public string GetDFName() {
		return "JobTransp";
	}
	public string GetTitle() {
		return "Transporter";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobTransp.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Job/AutoCompleteJobTransp/' onchange=\"javascript:IQAutoSave('/Job/SaveJobTransp/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='JobTransp'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobTransp.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobTransp";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Job/AutoCompleteJobTransp/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobTransp")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobTransp", "@JobTransp", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobTransp", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobTransp", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Driver_DrvPspExpiry : 
	DateDataFieldBase<Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Passport Expiry";}
		set { } 
	}

	public string DFName=> "DrvPspExpiry";

	
	public Driver_DrvPspExpiry(Driver Parent) : 
		base(Parent, "DrvPspExpiry"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvPspExpiryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvPspExpiry").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvPspExpiry").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 772;
	}
	public string GetControlName() {
		return "DrvPspExpiryValue";
	}
	public string GetDFName() {
		return "DrvPspExpiry";
	}
	public string GetTitle() {
		return "Passport Expiry";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvPspExpiry.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvPspExpiry/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='DrvPspExpiry' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvPspExpiry.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvPspExpiry";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvPspExpiry")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvPspExpiry", "@DrvPspExpiry", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvPspExpiry", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvPspExpiry", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustRecDueDil : 
	BoolDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Received Due Diligence";}
		set { } 
	}

	public string DFName=> "CustRecDueDil";

	
	public Customer_CustRecDueDil(Customer Parent) : 
		base(Parent, "CustRecDueDil"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Customer_CustRecDueDilFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustRecDueDil").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustRecDueDil").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 773;
	}
	public string GetControlName() {
		return "CustRecDueDilValue";
	}
	public string GetDFName() {
		return "CustRecDueDil";
	}
	public string GetTitle() {
		return "Received Due Diligence";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustRecDueDil.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Customer/SaveCustRecDueDil/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CustRecDueDil' [[Val]] /><input type = 'hidden' data-bound-name='CustRecDueDil' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustRecDueDil.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustRecDueDil";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CustRecDueDil")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustRecDueDil", "@CustRecDueDil", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustRecDueDil", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustRecDueDil", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCrdChecked : 
	BoolDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Score Checked";}
		set { } 
	}

	public string DFName=> "CustCrdChecked";

	
	public Customer_CustCrdChecked(Customer Parent) : 
		base(Parent, "CustCrdChecked"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Customer_CustCrdCheckedFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCrdChecked").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCrdChecked").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 774;
	}
	public string GetControlName() {
		return "CustCrdCheckedValue";
	}
	public string GetDFName() {
		return "CustCrdChecked";
	}
	public string GetTitle() {
		return "Credit Score Checked";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCrdChecked.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Customer/SaveCustCrdChecked/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='CustCrdChecked' [[Val]] /><input type = 'hidden' data-bound-name='CustCrdChecked' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCrdChecked.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCrdChecked";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "CustCrdChecked")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCrdChecked", "@CustCrdChecked", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCrdChecked", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCrdChecked", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCrdScr : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Score";}
		set { } 
	}

	public string DFName=> "CustCrdScr";

	
	public Customer_CustCrdScr(Customer Parent) : 
		base(Parent, "CustCrdScr"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustCrdScrFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCrdScr").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCrdScr").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 775;
	}
	public string GetControlName() {
		return "CustCrdScrValue";
	}
	public string GetDFName() {
		return "CustCrdScr";
	}
	public string GetTitle() {
		return "Credit Score";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCrdScr.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCrdScr/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='CustCrdScr'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCrdScr.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCrdScr";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCrdScr")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCrdScr", "@CustCrdScr", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCrdScr", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCrdScr", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustCrdRvDate : 
	DateDataFieldBase<Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Credit Score Review Date";}
		set { } 
	}

	public string DFName=> "CustCrdRvDate";

	
	public Customer_CustCrdRvDate(Customer Parent) : 
		base(Parent, "CustCrdRvDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustCrdRvDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCrdRvDate").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustCrdRvDate").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 776;
	}
	public string GetControlName() {
		return "CustCrdRvDateValue";
	}
	public string GetDFName() {
		return "CustCrdRvDate";
	}
	public string GetTitle() {
		return "Credit Score Review Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustCrdRvDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Customer/SaveCustCrdRvDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='CustCrdRvDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustCrdRvDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustCrdRvDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustCrdRvDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustCrdRvDate", "@CustCrdRvDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustCrdRvDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustCrdRvDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Alerts_AlrtId : 
	FormattableDataFieldBase<int,Alerts>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "AlrtId";

	
	public Alerts_AlrtId(Alerts Parent) : 
		base(Parent, "AlrtId"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class Alerts_AlrtIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtId").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtId").First().Value(new Alerts());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 777;
	}
	public string GetControlName() {
		return "AlrtIdValue";
	}
	public string GetDFName() {
		return "AlrtId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Alerts ds;
					ds = (Alerts)dsI;
		 
		
		return ds.AlrtId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Alerts ds;
				ds = (Alerts)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Alerts/SaveAlrtId/?RecId=[[RecId]]',$(this));\" data-bound-name='AlrtId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.AlrtId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "AlrtId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "AlrtId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "AlrtId", "@AlrtId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "AlrtId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Alerts").GetFieldOperators("AlrtId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Alerts_AlrtUserID : 
	DataFieldSelectBase<int,Alerts>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "User";}
		set { } 
	}

	public string DFName=> "AlrtUserID";

		public string GetDataSource() {
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtUserID").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtUserID").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "";		}
		return _DataSource;

	}
    
	public Alerts_AlrtUserID(Alerts Parent) : 
		base(Parent, "AlrtUserID"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Alerts_AlrtUserIDFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtUserID").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtUserID").First().Value(new Alerts());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 778;
	}
	public string GetControlName() {
		return "AlrtUserIDValue";
	}
	public string GetDFName() {
		return "AlrtUserID";
	}
	public string GetTitle() {
		return "User";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Alerts ds;
					ds = (Alerts)dsI;
		 
		
		return ds.AlrtUserID.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Alerts ds;
				ds = (Alerts)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Alerts/SaveAlrtUserID/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='AlrtUserID'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.AlrtUserID.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "AlrtUserID";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "AlrtUserID")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "AlrtUserID", "@AlrtUserID", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "AlrtUserID", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Alerts").GetFieldOperators("AlrtUserID", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Alerts_AlrtData : 
	DataFieldBase<string,Alerts>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Data";}
		set { } 
	}

	public string DFName=> "AlrtData";

	
	public Alerts_AlrtData(Alerts Parent) : 
		base(Parent, "AlrtData"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Alerts_AlrtDataFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtData").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtData").First().Value(new Alerts());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 779;
	}
	public string GetControlName() {
		return "AlrtDataValue";
	}
	public string GetDFName() {
		return "AlrtData";
	}
	public string GetTitle() {
		return "Data";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Alerts ds;
					ds = (Alerts)dsI;
		 
		
		return ds.AlrtData.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Alerts ds;
				ds = (Alerts)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Alerts/SaveAlrtData/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='AlrtData'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.AlrtData.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "AlrtData";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "AlrtData")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "AlrtData", "@AlrtData", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "AlrtData", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Alerts").GetFieldOperators("AlrtData", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobTranspRate : 
	DataFieldBase<string,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Transporter Rate";}
		set { } 
	}

	public string DFName=> "JobTranspRate";

	
	public Job_JobTranspRate(Job Parent) : 
		base(Parent, "JobTranspRate"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Job_JobTranspRateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTranspRate").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTranspRate").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 78;
	}
	public string GetControlName() {
		return "JobTranspRateValue";
	}
	public string GetDFName() {
		return "JobTranspRate";
	}
	public string GetTitle() {
		return "Transporter Rate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobTranspRate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Job/SaveJobTranspRate/?RecId=[[RecId]]',$(this));\" data-bound-name='JobTranspRate' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobTranspRate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobTranspRate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobTranspRate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobTranspRate", "@JobTranspRate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobTranspRate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobTranspRate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Alerts_AlrtTitle : 
	DataFieldBase<string,Alerts>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Title";}
		set { } 
	}

	public string DFName=> "AlrtTitle";

	
	public Alerts_AlrtTitle(Alerts Parent) : 
		base(Parent, "AlrtTitle"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Alerts_AlrtTitleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtTitle").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtTitle").First().Value(new Alerts());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 780;
	}
	public string GetControlName() {
		return "AlrtTitleValue";
	}
	public string GetDFName() {
		return "AlrtTitle";
	}
	public string GetTitle() {
		return "Title";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Alerts ds;
					ds = (Alerts)dsI;
		 
		
		return ds.AlrtTitle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Alerts ds;
				ds = (Alerts)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Alerts/SaveAlrtTitle/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='AlrtTitle'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.AlrtTitle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "AlrtTitle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "AlrtTitle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "AlrtTitle", "@AlrtTitle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "AlrtTitle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Alerts").GetFieldOperators("AlrtTitle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Alerts_AlrtQueueDate : 
	DateDataFieldBase<Alerts>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Alert Date";}
		set { } 
	}

	public string DFName=> "AlrtQueueDate";

	
	public Alerts_AlrtQueueDate(Alerts Parent) : 
		base(Parent, "AlrtQueueDate"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Alerts_AlrtQueueDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtQueueDate").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtQueueDate").First().Value(new Alerts());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 781;
	}
	public string GetControlName() {
		return "AlrtQueueDateValue";
	}
	public string GetDFName() {
		return "AlrtQueueDate";
	}
	public string GetTitle() {
		return "Alert Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Alerts ds;
					ds = (Alerts)dsI;
		 
		
		return ds.AlrtQueueDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Alerts ds;
				ds = (Alerts)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Alerts/SaveAlrtQueueDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='AlrtQueueDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.AlrtQueueDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "AlrtQueueDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "AlrtQueueDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "AlrtQueueDate", "@AlrtQueueDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "AlrtQueueDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Alerts").GetFieldOperators("AlrtQueueDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Alerts_AlrtCompletedDat : 
	DateDataFieldBase<Alerts>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "CompletedDate";}
		set { } 
	}

	public string DFName=> "AlrtCompletedDat";

	
	public Alerts_AlrtCompletedDat(Alerts Parent) : 
		base(Parent, "AlrtCompletedDat"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Alerts_AlrtCompletedDatFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtCompletedDat").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtCompletedDat").First().Value(new Alerts());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 782;
	}
	public string GetControlName() {
		return "AlrtCompletedDatValue";
	}
	public string GetDFName() {
		return "AlrtCompletedDat";
	}
	public string GetTitle() {
		return "CompletedDate";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Alerts ds;
					ds = (Alerts)dsI;
		 
		
		return ds.AlrtCompletedDat.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Alerts ds;
				ds = (Alerts)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Alerts/SaveAlrtCompletedDat/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='AlrtCompletedDat' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.AlrtCompletedDat.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "AlrtCompletedDat";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "AlrtCompletedDat")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "AlrtCompletedDat", "@AlrtCompletedDat", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "AlrtCompletedDat", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Alerts").GetFieldOperators("AlrtCompletedDat", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Alerts_AlrtCallbackUrl : 
	DataFieldBase<string,Alerts>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Callback URL";}
		set { } 
	}

	public string DFName=> "AlrtCallbackUrl";

	
	public Alerts_AlrtCallbackUrl(Alerts Parent) : 
		base(Parent, "AlrtCallbackUrl"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Alerts_AlrtCallbackUrlFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtCallbackUrl").Any()) 
			return DS.GetManager<Alerts>().OnDataSource.Where(f=> f.Key == "AlrtCallbackUrl").First().Value(new Alerts());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 783;
	}
	public string GetControlName() {
		return "AlrtCallbackUrlValue";
	}
	public string GetDFName() {
		return "AlrtCallbackUrl";
	}
	public string GetTitle() {
		return "Callback URL";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Alerts ds;
					ds = (Alerts)dsI;
		 
		
		return ds.AlrtCallbackUrl.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Alerts ds;
				ds = (Alerts)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Alerts/SaveAlrtCallbackUrl/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='AlrtCallbackUrl'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.AlrtCallbackUrl.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "AlrtCallbackUrl";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "AlrtCallbackUrl")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "AlrtCallbackUrl", "@AlrtCallbackUrl", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "AlrtCallbackUrl", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Alerts").GetFieldOperators("AlrtCallbackUrl", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryType : 
	DataFieldSelectBase<int,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Type";}
		set { } 
	}

	public string DFName=> "QryType";

		public string GetDataSource() {
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryType").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryType").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.QryTypeAsQuery();		}
		return _DataSource;

	}
    
	public Query_QryType(Query Parent) : 
		base(Parent, "QryType"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Query_QryTypeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryType").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryType").First().Value(new Query());
		
		
			return DSUtil.QryTypeAsQuery();	}

	public int GetFieldUniqueId() {
		return 784;
	}
	public string GetControlName() {
		return "QryTypeValue";
	}
	public string GetDFName() {
		return "QryType";
	}
	public string GetTitle() {
		return "Type";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryType.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Query/SaveQryType/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='QryType'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryType.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryType";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryType")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryType", "@QryType", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryType", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryType", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class WordDocument_WrDocUseSimple : 
	BoolDataFieldBase<WordDocument>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Simple Merge Fields";}
		set { } 
	}

	public string DFName=> "WrDocUseSimple";

	
	public WordDocument_WrDocUseSimple(WordDocument Parent) : 
		base(Parent, "WrDocUseSimple"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("True");
				    }
}


public partial class WordDocument_WrDocUseSimpleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocUseSimple").Any()) 
			return DS.GetManager<WordDocument>().OnDataSource.Where(f=> f.Key == "WrDocUseSimple").First().Value(new WordDocument());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 785;
	}
	public string GetControlName() {
		return "WrDocUseSimpleValue";
	}
	public string GetDFName() {
		return "WrDocUseSimple";
	}
	public string GetTitle() {
		return "Simple Merge Fields";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		WordDocument ds;
					ds = (WordDocument)dsI;
		 
		
		return ds.WrDocUseSimple.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		WordDocument ds;
				ds = (WordDocument)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/WordDocument/SaveWrDocUseSimple/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='WrDocUseSimple' [[Val]] /><input type = 'hidden' data-bound-name='WrDocUseSimple' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.WrDocUseSimple.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "WrDocUseSimple";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "WrDocUseSimple")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "WrDocUseSimple", "@WrDocUseSimple", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "WrDocUseSimple", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("WordDocument").GetFieldOperators("WrDocUseSimple", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvMobile : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Mobile Number";}
		set { } 
	}

	public string DFName=> "DrvMobile";

	
	public Driver_DrvMobile(Driver Parent) : 
		base(Parent, "DrvMobile"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvMobileFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvMobile").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvMobile").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 786;
	}
	public string GetControlName() {
		return "DrvMobileValue";
	}
	public string GetDFName() {
		return "DrvMobile";
	}
	public string GetTitle() {
		return "Mobile Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvMobile.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvMobile/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvMobile' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvMobile.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvMobile";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvMobile")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvMobile", "@DrvMobile", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvMobile", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvMobile", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvSentToClient : 
	BoolDataFieldBase<Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Sent to Client";}
		set { } 
	}

	public string DFName=> "InvSentToClient";

	
	public Inv_InvSentToClient(Inv Parent) : 
		base(Parent, "InvSentToClient"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("False");
				    }
}


public partial class Inv_InvSentToClientFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvSentToClient").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvSentToClient").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 787;
	}
	public string GetControlName() {
		return "InvSentToClientValue";
	}
	public string GetDFName() {
		return "InvSentToClient";
	}
	public string GetTitle() {
		return "Sent to Client";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvSentToClient.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input type='checkbox'onchange=\"javascript:IQAutoSave('/Inv/SaveInvSentToClient/?RecId=[[RecId]]',$(this));\" value='true' data-bound-name='InvSentToClient' [[Val]] /><input type = 'hidden' data-bound-name='InvSentToClient' value='false'  />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvSentToClient.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvSentToClient";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
					if(!Params.Any(f=> f.KeyValue == "InvSentToClient")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvSentToClient", "@InvSentToClient", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvSentToClient", Description=FilterValue});
				return ret;
			}
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvSentToClient", selected);
	}

	public bool IsCheckBox() {
				return true;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustAccContact : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Accounts Contact";}
		set { } 
	}

	public string DFName=> "CustAccContact";

	
	public Customer_CustAccContact(Customer Parent) : 
		base(Parent, "CustAccContact"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustAccContactFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAccContact").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAccContact").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 788;
	}
	public string GetControlName() {
		return "CustAccContactValue";
	}
	public string GetDFName() {
		return "CustAccContact";
	}
	public string GetTitle() {
		return "Accounts Contact";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustAccContact.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustAccContact/?RecId=[[RecId]]',$(this));\" data-bound-name='CustAccContact' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustAccContact.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustAccContact";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustAccContact")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustAccContact", "@CustAccContact", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustAccContact", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustAccContact", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Customer_CustAccEmail : 
	DataFieldBase<string,Customer>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Accounts Email";}
		set { } 
	}

	public string DFName=> "CustAccEmail";

	
	public Customer_CustAccEmail(Customer Parent) : 
		base(Parent, "CustAccEmail"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Customer_CustAccEmailFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAccEmail").Any()) 
			return DS.GetManager<Customer>().OnDataSource.Where(f=> f.Key == "CustAccEmail").First().Value(new Customer());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 789;
	}
	public string GetControlName() {
		return "CustAccEmailValue";
	}
	public string GetDFName() {
		return "CustAccEmail";
	}
	public string GetTitle() {
		return "Accounts Email";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Customer ds;
					ds = (Customer)dsI;
		 
		
		return ds.CustAccEmail.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Customer ds;
				ds = (Customer)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Customer/SaveCustAccEmail/?RecId=[[RecId]]',$(this));\" data-bound-name='CustAccEmail' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.CustAccEmail.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "CustAccEmail";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "CustAccEmail")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "CustAccEmail", "@CustAccEmail", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "CustAccEmail", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Customer").GetFieldOperators("CustAccEmail", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobVehNo : 
	DataFieldBase<string,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Vehicle Number";}
		set { } 
	}

	public string DFName=> "JobVehNo";

	
	public Job_JobVehNo(Job Parent) : 
		base(Parent, "JobVehNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Job_JobVehNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobVehNo").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobVehNo").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 79;
	}
	public string GetControlName() {
		return "JobVehNoValue";
	}
	public string GetDFName() {
		return "JobVehNo";
	}
	public string GetTitle() {
		return "Vehicle Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobVehNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Job/SaveJobVehNo/?RecId=[[RecId]]',$(this));\" data-bound-name='JobVehNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobVehNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobVehNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobVehNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobVehNo", "@JobVehNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobVehNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobVehNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class SMSTemplate_SMSTQuery : 
	DataFieldSelectBase<int,SMSTemplate>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Query";}
		set { } 
	}

	public string DFName=> "SMSTQuery";

		public string GetDataSource() {
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTQuery").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTQuery").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT QryId AS KeyValue, QryName AS Description FROM Query UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public SMSTemplate_SMSTQuery(SMSTemplate Parent) : 
		base(Parent, "SMSTQuery"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class SMSTemplate_SMSTQueryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTQuery").Any()) 
			return DS.GetManager<SMSTemplate>().OnDataSource.Where(f=> f.Key == "SMSTQuery").First().Value(new SMSTemplate());
		
		
			return  "SELECT QryId AS KeyValue, QryName AS Description FROM Query UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 790;
	}
	public string GetControlName() {
		return "SMSTQueryValue";
	}
	public string GetDFName() {
		return "SMSTQuery";
	}
	public string GetTitle() {
		return "Query";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		SMSTemplate ds;
					ds = (SMSTemplate)dsI;
		 
		
		return ds.SMSTQuery.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		SMSTemplate ds;
				ds = (SMSTemplate)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/SMSTemplate/SaveSMSTQuery/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='SMSTQuery'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.SMSTQuery.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "SMSTQuery";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "SMSTQuery")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "SMSTQuery", "@SMSTQuery", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "SMSTQuery", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("SMSTemplate").GetFieldOperators("SMSTQuery", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryCategory : 
	DataFieldBase<string,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Category";}
		set { } 
	}

	public string DFName=> "QryCategory";

	
	public Query_QryCategory(Query Parent) : 
		base(Parent, "QryCategory"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Query_QryCategoryFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryCategory").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryCategory").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 791;
	}
	public string GetControlName() {
		return "QryCategoryValue";
	}
	public string GetDFName() {
		return "QryCategory";
	}
	public string GetTitle() {
		return "Category";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryCategory.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Query/SaveQryCategory/?RecId=[[RecId]]',$(this));\" data-bound-name='QryCategory' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryCategory.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryCategory";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryCategory")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryCategory", "@QryCategory", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryCategory", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryCategory", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Query_QryRelationships : 
	DataFieldBase<string,Query>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Relationships";}
		set { } 
	}

	public string DFName=> "QryRelationships";

	
	public Query_QryRelationships(Query Parent) : 
		base(Parent, "QryRelationships"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Query_QryRelationshipsFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryRelationships").Any()) 
			return DS.GetManager<Query>().OnDataSource.Where(f=> f.Key == "QryRelationships").First().Value(new Query());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 792;
	}
	public string GetControlName() {
		return "QryRelationshipsValue";
	}
	public string GetDFName() {
		return "QryRelationships";
	}
	public string GetTitle() {
		return "Relationships";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Query ds;
					ds = (Query)dsI;
		 
		
		return ds.QryRelationships.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Query ds;
				ds = (Query)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Query/SaveQryRelationships/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='QryRelationships'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.QryRelationships.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "QryRelationships";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "QryRelationships")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "QryRelationships", "@QryRelationships", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "QryRelationships", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Query").GetFieldOperators("QryRelationships", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvAddress : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Address";}
		set { } 
	}

	public string DFName=> "DrvAddress";

	
	public Driver_DrvAddress(Driver Parent) : 
		base(Parent, "DrvAddress"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvAddressFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvAddress").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvAddress").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 793;
	}
	public string GetControlName() {
		return "DrvAddressValue";
	}
	public string GetDFName() {
		return "DrvAddress";
	}
	public string GetTitle() {
		return "Address";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvAddress.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvAddress/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='DrvAddress'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvAddress.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvAddress";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvAddress")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvAddress", "@DrvAddress", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvAddress", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvAddress", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvDoB : 
	DateDataFieldBase<Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Date Of Birth";}
		set { } 
	}

	public string DFName=> "DrvDoB";

	
	public Driver_DrvDoB(Driver Parent) : 
		base(Parent, "DrvDoB"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvDoBFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvDoB").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvDoB").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 794;
	}
	public string GetControlName() {
		return "DrvDoBValue";
	}
	public string GetDFName() {
		return "DrvDoB";
	}
	public string GetTitle() {
		return "Date Of Birth";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvDoB.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvDoB/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='DrvDoB' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvDoB.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvDoB";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvDoB")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvDoB", "@DrvDoB", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvDoB", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvDoB", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvEmpStart : 
	DateDataFieldBase<Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Emp Start Date";}
		set { } 
	}

	public string DFName=> "DrvEmpStart";

	
	public Driver_DrvEmpStart(Driver Parent) : 
		base(Parent, "DrvEmpStart"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvEmpStartFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvEmpStart").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvEmpStart").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 795;
	}
	public string GetControlName() {
		return "DrvEmpStartValue";
	}
	public string GetDFName() {
		return "DrvEmpStart";
	}
	public string GetTitle() {
		return "Emp Start Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvEmpStart.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvEmpStart/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='DrvEmpStart' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvEmpStart.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvEmpStart";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvEmpStart")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvEmpStart", "@DrvEmpStart", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvEmpStart", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvEmpStart", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvLicense : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Drivers License No";}
		set { } 
	}

	public string DFName=> "DrvLicense";

	
	public Driver_DrvLicense(Driver Parent) : 
		base(Parent, "DrvLicense"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvLicenseFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvLicense").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvLicense").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 796;
	}
	public string GetControlName() {
		return "DrvLicenseValue";
	}
	public string GetDFName() {
		return "DrvLicense";
	}
	public string GetTitle() {
		return "Drivers License No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvLicense.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvLicense/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvLicense' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvLicense.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvLicense";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvLicense")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvLicense", "@DrvLicense", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvLicense", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvLicense", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvTacho : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Drivers Digital Tacho Card No";}
		set { } 
	}

	public string DFName=> "DrvTacho";

	
	public Driver_DrvTacho(Driver Parent) : 
		base(Parent, "DrvTacho"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvTachoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvTacho").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvTacho").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 797;
	}
	public string GetControlName() {
		return "DrvTachoValue";
	}
	public string GetDFName() {
		return "DrvTacho";
	}
	public string GetTitle() {
		return "Drivers Digital Tacho Card No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvTacho.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvTacho/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvTacho' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvTacho.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvTacho";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvTacho")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvTacho", "@DrvTacho", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvTacho", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvTacho", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvCPC : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Drivers CPC Card No";}
		set { } 
	}

	public string DFName=> "DrvCPC";

	
	public Driver_DrvCPC(Driver Parent) : 
		base(Parent, "DrvCPC"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvCPCFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvCPC").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvCPC").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 798;
	}
	public string GetControlName() {
		return "DrvCPCValue";
	}
	public string GetDFName() {
		return "DrvCPC";
	}
	public string GetTitle() {
		return "Drivers CPC Card No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvCPC.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvCPC/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvCPC' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvCPC.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvCPC";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvCPC")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvCPC", "@DrvCPC", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvCPC", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvCPC", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvPpNo : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Passport No";}
		set { } 
	}

	public string DFName=> "DrvPpNo";

	
	public Driver_DrvPpNo(Driver Parent) : 
		base(Parent, "DrvPpNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvPpNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvPpNo").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvPpNo").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 799;
	}
	public string GetControlName() {
		return "DrvPpNoValue";
	}
	public string GetDFName() {
		return "DrvPpNo";
	}
	public string GetTitle() {
		return "Passport No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvPpNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvPpNo/?RecId=[[RecId]]',$(this));\" data-bound-name='DrvPpNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvPpNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvPpNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvPpNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvPpNo", "@DrvPpNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvPpNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvPpNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobTrailerNo : 
	DataFieldBase<string,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Trailer Number";}
		set { } 
	}

	public string DFName=> "JobTrailerNo";

	
	public Job_JobTrailerNo(Job Parent) : 
		base(Parent, "JobTrailerNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Job_JobTrailerNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTrailerNo").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobTrailerNo").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 80;
	}
	public string GetControlName() {
		return "JobTrailerNoValue";
	}
	public string GetDFName() {
		return "JobTrailerNo";
	}
	public string GetTitle() {
		return "Trailer Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobTrailerNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Job/SaveJobTrailerNo/?RecId=[[RecId]]',$(this));\" data-bound-name='JobTrailerNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobTrailerNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobTrailerNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobTrailerNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobTrailerNo", "@JobTrailerNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobTrailerNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobTrailerNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Driver_DrvNextOfKin : 
	DataFieldBase<string,Driver>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Next of Kin";}
		set { } 
	}

	public string DFName=> "DrvNextOfKin";

	
	public Driver_DrvNextOfKin(Driver Parent) : 
		base(Parent, "DrvNextOfKin"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Driver_DrvNextOfKinFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvNextOfKin").Any()) 
			return DS.GetManager<Driver>().OnDataSource.Where(f=> f.Key == "DrvNextOfKin").First().Value(new Driver());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 800;
	}
	public string GetControlName() {
		return "DrvNextOfKinValue";
	}
	public string GetDFName() {
		return "DrvNextOfKin";
	}
	public string GetTitle() {
		return "Next of Kin";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Driver ds;
					ds = (Driver)dsI;
		 
		
		return ds.DrvNextOfKin.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Driver ds;
				ds = (Driver)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Driver/SaveDrvNextOfKin/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='DrvNextOfKin'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DrvNextOfKin.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DrvNextOfKin";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DrvNextOfKin")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DrvNextOfKin", "@DrvNextOfKin", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DrvNextOfKin", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Driver").GetFieldOperators("DrvNextOfKin", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkServiceDue : 
	DateDataFieldBase<Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Service Due";}
		set { } 
	}

	public string DFName=> "TrkServiceDue";

	
	public Truck_TrkServiceDue(Truck Parent) : 
		base(Parent, "TrkServiceDue"
			,"dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkServiceDueFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkServiceDue").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkServiceDue").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 801;
	}
	public string GetControlName() {
		return "TrkServiceDueValue";
	}
	public string GetDFName() {
		return "TrkServiceDue";
	}
	public string GetTitle() {
		return "Service Due";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkServiceDue.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkServiceDue/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='TrkServiceDue' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkServiceDue.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkServiceDue";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkServiceDue")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkServiceDue", "@TrkServiceDue", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkServiceDue", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkServiceDue", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkAS24No : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "AS24 Card No:";}
		set { } 
	}

	public string DFName=> "TrkAS24No";

	
	public Truck_TrkAS24No(Truck Parent) : 
		base(Parent, "TrkAS24No"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkAS24NoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkAS24No").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkAS24No").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 802;
	}
	public string GetControlName() {
		return "TrkAS24NoValue";
	}
	public string GetDFName() {
		return "TrkAS24No";
	}
	public string GetTitle() {
		return "AS24 Card No:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkAS24No.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkAS24No/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkAS24No' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkAS24No.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkAS24No";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkAS24No")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkAS24No", "@TrkAS24No", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkAS24No", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkAS24No", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkAS24PIN : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "AS24 Pin No:";}
		set { } 
	}

	public string DFName=> "TrkAS24PIN";

	
	public Truck_TrkAS24PIN(Truck Parent) : 
		base(Parent, "TrkAS24PIN"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkAS24PINFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkAS24PIN").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkAS24PIN").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 803;
	}
	public string GetControlName() {
		return "TrkAS24PINValue";
	}
	public string GetDFName() {
		return "TrkAS24PIN";
	}
	public string GetTitle() {
		return "AS24 Pin No:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkAS24PIN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkAS24PIN/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkAS24PIN' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkAS24PIN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkAS24PIN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkAS24PIN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkAS24PIN", "@TrkAS24PIN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkAS24PIN", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkAS24PIN", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkDKVNo : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "DKV No:";}
		set { } 
	}

	public string DFName=> "TrkDKVNo";

	
	public Truck_TrkDKVNo(Truck Parent) : 
		base(Parent, "TrkDKVNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkDKVNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDKVNo").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDKVNo").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 804;
	}
	public string GetControlName() {
		return "TrkDKVNoValue";
	}
	public string GetDFName() {
		return "TrkDKVNo";
	}
	public string GetTitle() {
		return "DKV No:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkDKVNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkDKVNo/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkDKVNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkDKVNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkDKVNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkDKVNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkDKVNo", "@TrkDKVNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkDKVNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkDKVNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkDKVPIN : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "DKV Pin No:";}
		set { } 
	}

	public string DFName=> "TrkDKVPIN";

	
	public Truck_TrkDKVPIN(Truck Parent) : 
		base(Parent, "TrkDKVPIN"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkDKVPINFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDKVPIN").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkDKVPIN").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 805;
	}
	public string GetControlName() {
		return "TrkDKVPINValue";
	}
	public string GetDFName() {
		return "TrkDKVPIN";
	}
	public string GetTitle() {
		return "DKV Pin No:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkDKVPIN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkDKVPIN/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkDKVPIN' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkDKVPIN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkDKVPIN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkDKVPIN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkDKVPIN", "@TrkDKVPIN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkDKVPIN", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkDKVPIN", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkShellNo : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Shell No:";}
		set { } 
	}

	public string DFName=> "TrkShellNo";

	
	public Truck_TrkShellNo(Truck Parent) : 
		base(Parent, "TrkShellNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkShellNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkShellNo").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkShellNo").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 806;
	}
	public string GetControlName() {
		return "TrkShellNoValue";
	}
	public string GetDFName() {
		return "TrkShellNo";
	}
	public string GetTitle() {
		return "Shell No:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkShellNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkShellNo/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkShellNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkShellNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkShellNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkShellNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkShellNo", "@TrkShellNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkShellNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkShellNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkShellPIN : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Shell Pin No:";}
		set { } 
	}

	public string DFName=> "TrkShellPIN";

	
	public Truck_TrkShellPIN(Truck Parent) : 
		base(Parent, "TrkShellPIN"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkShellPINFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkShellPIN").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkShellPIN").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 807;
	}
	public string GetControlName() {
		return "TrkShellPINValue";
	}
	public string GetDFName() {
		return "TrkShellPIN";
	}
	public string GetTitle() {
		return "Shell Pin No:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkShellPIN.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkShellPIN/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkShellPIN' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkShellPIN.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkShellPIN";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkShellPIN")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkShellPIN", "@TrkShellPIN", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkShellPIN", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkShellPIN", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkPermitNo : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Permit No:";}
		set { } 
	}

	public string DFName=> "TrkPermitNo";

	
	public Truck_TrkPermitNo(Truck Parent) : 
		base(Parent, "TrkPermitNo"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkPermitNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkPermitNo").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkPermitNo").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 808;
	}
	public string GetControlName() {
		return "TrkPermitNoValue";
	}
	public string GetDFName() {
		return "TrkPermitNo";
	}
	public string GetTitle() {
		return "Permit No:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkPermitNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkPermitNo/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkPermitNo' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkPermitNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkPermitNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkPermitNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkPermitNo", "@TrkPermitNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkPermitNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkPermitNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Truck_TrkTruckMob : 
	DataFieldBase<string,Truck>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Truck Mobile:";}
		set { } 
	}

	public string DFName=> "TrkTruckMob";

	
	public Truck_TrkTruckMob(Truck Parent) : 
		base(Parent, "TrkTruckMob"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Truck_TrkTruckMobFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkTruckMob").Any()) 
			return DS.GetManager<Truck>().OnDataSource.Where(f=> f.Key == "TrkTruckMob").First().Value(new Truck());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 809;
	}
	public string GetControlName() {
		return "TrkTruckMobValue";
	}
	public string GetDFName() {
		return "TrkTruckMob";
	}
	public string GetTitle() {
		return "Truck Mobile:";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Truck ds;
					ds = (Truck)dsI;
		 
		
		return ds.TrkTruckMob.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Truck ds;
				ds = (Truck)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Truck/SaveTrkTruckMob/?RecId=[[RecId]]',$(this));\" data-bound-name='TrkTruckMob' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.TrkTruckMob.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "TrkTruckMob";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "TrkTruckMob")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "TrkTruckMob", "@TrkTruckMob", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "TrkTruckMob", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Truck").GetFieldOperators("TrkTruckMob", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobFerryName : 
	DataFieldBase<string,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Ferry Name";}
		set { } 
	}

	public string DFName=> "JobFerryName";

	
	public Job_JobFerryName(Job Parent) : 
		base(Parent, "JobFerryName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Job_JobFerryNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobFerryName").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobFerryName").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 81;
	}
	public string GetControlName() {
		return "JobFerryNameValue";
	}
	public string GetDFName() {
		return "JobFerryName";
	}
	public string GetTitle() {
		return "Ferry Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobFerryName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Job/SaveJobFerryName/?RecId=[[RecId]]',$(this));\" data-bound-name='JobFerryName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobFerryName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobFerryName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobFerryName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobFerryName", "@JobFerryName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobFerryName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobFerryName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Reporting_RptId : 
	DataFieldBase<int,Reporting>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "RptId";

	
	public Reporting_RptId(Reporting Parent) : 
		base(Parent, "RptId"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Reporting_RptIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptId").Any()) 
			return DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptId").First().Value(new Reporting());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 814;
	}
	public string GetControlName() {
		return "RptIdValue";
	}
	public string GetDFName() {
		return "RptId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Reporting ds;
					ds = (Reporting)dsI;
		 
		
		return ds.RptId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Reporting ds;
				ds = (Reporting)dsI;
		 

		string ctrl =  "[[Val]]";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RptId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RptId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return "";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RptId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RptId", "@RptId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RptId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Reporting").GetFieldOperators("RptId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Reporting_RptTitle : 
	DataFieldBase<string,Reporting>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "New Field";}
		set { } 
	}

	public string DFName=> "RptTitle";

	
	public Reporting_RptTitle(Reporting Parent) : 
		base(Parent, "RptTitle"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Reporting_RptTitleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptTitle").Any()) 
			return DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptTitle").First().Value(new Reporting());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 815;
	}
	public string GetControlName() {
		return "RptTitleValue";
	}
	public string GetDFName() {
		return "RptTitle";
	}
	public string GetTitle() {
		return "New Field";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Reporting ds;
					ds = (Reporting)dsI;
		 
		
		return ds.RptTitle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Reporting ds;
				ds = (Reporting)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Reporting/SaveRptTitle/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='RptTitle'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RptTitle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RptTitle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RptTitle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RptTitle", "@RptTitle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RptTitle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Reporting").GetFieldOperators("RptTitle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Reporting_RptContent : 
	DataFieldBase<string,Reporting>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "New Field";}
		set { } 
	}

	public string DFName=> "RptContent";

	
	public Reporting_RptContent(Reporting Parent) : 
		base(Parent, "RptContent"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Reporting_RptContentFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptContent").Any()) 
			return DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptContent").First().Value(new Reporting());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 816;
	}
	public string GetControlName() {
		return "RptContentValue";
	}
	public string GetDFName() {
		return "RptContent";
	}
	public string GetTitle() {
		return "New Field";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Reporting ds;
					ds = (Reporting)dsI;
		 
		
		return ds.RptContent.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Reporting ds;
				ds = (Reporting)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Reporting/SaveRptContent/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='RptContent'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RptContent.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RptContent";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RptContent")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RptContent", "@RptContent", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RptContent", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Reporting").GetFieldOperators("RptContent", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Reporting_RptDataset : 
	DataFieldBase<string,Reporting>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "New Field";}
		set { } 
	}

	public string DFName=> "RptDataset";

	
	public Reporting_RptDataset(Reporting Parent) : 
		base(Parent, "RptDataset"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Reporting_RptDatasetFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptDataset").Any()) 
			return DS.GetManager<Reporting>().OnDataSource.Where(f=> f.Key == "RptDataset").First().Value(new Reporting());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 817;
	}
	public string GetControlName() {
		return "RptDatasetValue";
	}
	public string GetDFName() {
		return "RptDataset";
	}
	public string GetTitle() {
		return "New Field";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Reporting ds;
					ds = (Reporting)dsI;
		 
		
		return ds.RptDataset.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Reporting ds;
				ds = (Reporting)dsI;
		 

		string ctrl =  "<textarea style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Reporting/SaveRptDataset/?RecId=[[RecId]]',$(this));\" class='form-control' data-bound-name='RptDataset'>[[Val]]</textarea>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.RptDataset.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "RptDataset";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "RptDataset")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "RptDataset", "@RptDataset", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "RptDataset", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Reporting").GetFieldOperators("RptDataset", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DelZone_DelZId : 
	DataFieldBase<int,DelZone>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Id";}
		set { } 
	}

	public string DFName=> "DelZId";

	
	public DelZone_DelZId(DelZone Parent) : 
		base(Parent, "DelZId"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class DelZone_DelZIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DelZone>().OnDataSource.Where(f=> f.Key == "DelZId").Any()) 
			return DS.GetManager<DelZone>().OnDataSource.Where(f=> f.Key == "DelZId").First().Value(new DelZone());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 818;
	}
	public string GetControlName() {
		return "DelZIdValue";
	}
	public string GetDFName() {
		return "DelZId";
	}
	public string GetTitle() {
		return "Id";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DelZone ds;
					ds = (DelZone)dsI;
		 
		
		return ds.DelZId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DelZone ds;
				ds = (DelZone)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/DelZone/SaveDelZId/?RecId=[[RecId]]',$(this));\" data-bound-name='DelZId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DelZId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DelZId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DelZId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DelZId", "@DelZId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DelZId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DelZone").GetFieldOperators("DelZId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class DelZone_DelZName : 
	DataFieldBase<string,DelZone>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Name";}
		set { } 
	}

	public string DFName=> "DelZName";

	
	public DelZone_DelZName(DelZone Parent) : 
		base(Parent, "DelZName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class DelZone_DelZNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<DelZone>().OnDataSource.Where(f=> f.Key == "DelZName").Any()) 
			return DS.GetManager<DelZone>().OnDataSource.Where(f=> f.Key == "DelZName").First().Value(new DelZone());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 819;
	}
	public string GetControlName() {
		return "DelZNameValue";
	}
	public string GetDFName() {
		return "DelZName";
	}
	public string GetTitle() {
		return "Name";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		DelZone ds;
					ds = (DelZone)dsI;
		 
		
		return ds.DelZName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		DelZone ds;
				ds = (DelZone)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/DelZone/SaveDelZName/?RecId=[[RecId]]',$(this));\" data-bound-name='DelZName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.DelZName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "DelZName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "DelZName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "DelZName", "@DelZName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "DelZName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("DelZone").GetFieldOperators("DelZName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobFerryDate : 
	DateDataFieldBase<Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Ferry Date";}
		set { } 
	}

	public string DFName=> "JobFerryDate";

	
	public Job_JobFerryDate(Job Parent) : 
		base(Parent, "JobFerryDate"
			,"ddd dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Job_JobFerryDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobFerryDate").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobFerryDate").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 82;
	}
	public string GetControlName() {
		return "JobFerryDateValue";
	}
	public string GetDFName() {
		return "JobFerryDate";
	}
	public string GetTitle() {
		return "Ferry Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobFerryDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='ddd DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/Job/SaveJobFerryDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='JobFerryDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobFerryDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobFerryDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobFerryDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobFerryDate", "@JobFerryDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobFerryDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobFerryDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobFerryTime : 
	TimeDataFieldBase<Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Ferry Time";}
		set { } 
	}

	public string DFName=> "JobFerryTime";

	
	public Job_JobFerryTime(Job Parent) : 
		base(Parent, "JobFerryTime"
			,"HH:mm"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class Job_JobFerryTimeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobFerryTime").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobFerryTime").First().Value(new Job());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 83;
	}
	public string GetControlName() {
		return "JobFerryTimeValue";
	}
	public string GetDFName() {
		return "JobFerryTime";
	}
	public string GetTitle() {
		return "Ferry Time";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobFerryTime.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Job/SaveJobFerryTime/?RecId=[[RecId]]',$(this));\" data-bound-name='JobFerryTime' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobFerryTime.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobFerryTime";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobFerryTime")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobFerryTime", "@JobFerryTime", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobFerryTime", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobFerryTime", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobRouteFrom : 
	DataFieldSelectBase<int,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route From";}
		set { } 
	}

	public string DFName=> "JobRouteFrom";

		public string GetDataSource() {
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteFrom").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteFrom").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Job_JobRouteFrom(Job Parent) : 
		base(Parent, "JobRouteFrom"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Job_JobRouteFromFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteFrom").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteFrom").First().Value(new Job());
		
		
			return  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 84;
	}
	public string GetControlName() {
		return "JobRouteFromValue";
	}
	public string GetDFName() {
		return "JobRouteFrom";
	}
	public string GetTitle() {
		return "Route From";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobRouteFrom.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Job/SaveJobRouteFrom/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='JobRouteFrom'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobRouteFrom.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobRouteFrom";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobRouteFrom")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobRouteFrom", "@JobRouteFrom", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobRouteFrom", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobRouteFrom", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Job_JobRouteTo : 
	DataFieldSelectBase<int,Job>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route To";}
		set { } 
	}

	public string DFName=> "JobRouteTo";

		public string GetDataSource() {
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteTo").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteTo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Job_JobRouteTo(Job Parent) : 
		base(Parent, "JobRouteTo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Job_JobRouteToFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteTo").Any()) 
			return DS.GetManager<Job>().OnDataSource.Where(f=> f.Key == "JobRouteTo").First().Value(new Job());
		
		
			return  "SELECT FRId AS KeyValue, FRName AS Description FROM FerryRoute UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 85;
	}
	public string GetControlName() {
		return "JobRouteToValue";
	}
	public string GetDFName() {
		return "JobRouteTo";
	}
	public string GetTitle() {
		return "Route To";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Job ds;
					ds = (Job)dsI;
		 
		
		return ds.JobRouteTo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Job ds;
				ds = (Job)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Job/SaveJobRouteTo/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='JobRouteTo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobRouteTo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobRouteTo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobRouteTo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobRouteTo", "@JobRouteTo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobRouteTo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Job").GetFieldOperators("JobRouteTo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class FerryRoute_FRCode : 
	DataFieldBase<string,FerryRoute>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route Code";}
		set { } 
	}

	public string DFName=> "FRCode";

	
	public FerryRoute_FRCode(FerryRoute Parent) : 
		base(Parent, "FRCode"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class FerryRoute_FRCodeFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<FerryRoute>().OnDataSource.Where(f=> f.Key == "FRCode").Any()) 
			return DS.GetManager<FerryRoute>().OnDataSource.Where(f=> f.Key == "FRCode").First().Value(new FerryRoute());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 86;
	}
	public string GetControlName() {
		return "FRCodeValue";
	}
	public string GetDFName() {
		return "FRCode";
	}
	public string GetTitle() {
		return "Route Code";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		FerryRoute ds;
					ds = (FerryRoute)dsI;
		 
		
		return ds.FRCode.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		FerryRoute ds;
				ds = (FerryRoute)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/FerryRoute/SaveFRCode/?RecId=[[RecId]]',$(this));\" data-bound-name='FRCode' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.FRCode.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "FRCode";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "FRCode")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "FRCode", "@FRCode", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "FRCode", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("FerryRoute").GetFieldOperators("FRCode", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class FerryRoute_FRName : 
	DataFieldBase<string,FerryRoute>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Route";}
		set { } 
	}

	public string DFName=> "FRName";

	
	public FerryRoute_FRName(FerryRoute Parent) : 
		base(Parent, "FRName"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class FerryRoute_FRNameFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<FerryRoute>().OnDataSource.Where(f=> f.Key == "FRName").Any()) 
			return DS.GetManager<FerryRoute>().OnDataSource.Where(f=> f.Key == "FRName").First().Value(new FerryRoute());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 87;
	}
	public string GetControlName() {
		return "FRNameValue";
	}
	public string GetDFName() {
		return "FRName";
	}
	public string GetTitle() {
		return "Route";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		FerryRoute ds;
					ds = (FerryRoute)dsI;
		 
		
		return ds.FRName.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		FerryRoute ds;
				ds = (FerryRoute)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/FerryRoute/SaveFRName/?RecId=[[RecId]]',$(this));\" data-bound-name='FRName' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.FRName.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "FRName";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "FRName")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "FRName", "@FRName", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "FRName", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("FerryRoute").GetFieldOperators("FRName", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLJobNo : 
	DataFieldAutoCompleteSingleBase<int,JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job Number";}
		set { } 
	}

	public string DFName=> "JobLJobNo";

		public string GetDataSource() {
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLJobNo").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLJobNo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public JobLine_JobLJobNo(JobLine Parent) : 
		base(Parent, "JobLJobNo"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class JobLine_JobLJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLJobNo").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLJobNo").First().Value(new JobLine());
		
		
			return  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 88;
	}
	public string GetControlName() {
		return "JobLJobNoValue";
	}
	public string GetDFName() {
		return "JobLJobNo";
	}
	public string GetTitle() {
		return "Job Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/JobLine/AutoCompleteJobLJobNo/' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLJobNo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='JobLJobNo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/JobLine/AutoCompleteJobLJobNo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLJobNo", "@JobLJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class JobLine_JobLLineLetter : 
	DataFieldBase<string,JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Line Letter";}
		set { } 
	}

	public string DFName=> "JobLLineLetter";

	
	public JobLine_JobLLineLetter(JobLine Parent) : 
		base(Parent, "JobLLineLetter"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobLine_JobLLineLetterFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLLineLetter").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLLineLetter").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 89;
	}
	public string GetControlName() {
		return "JobLLineLetterValue";
	}
	public string GetDFName() {
		return "JobLLineLetter";
	}
	public string GetTitle() {
		return "Line Letter";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLLineLetter.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLLineLetter/?RecId=[[RecId]]',$(this));\" data-bound-name='JobLLineLetter' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLLineLetter.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLLineLetter";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLLineLetter")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLLineLetter", "@JobLLineLetter", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLLineLetter", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLLineLetter", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLOrder : 
	FormattableDataFieldBase<int,JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "JobLOrder";

	
	public JobLine_JobLOrder(JobLine Parent) : 
		base(Parent, "JobLOrder"
			,"f0"
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
				    }
}


public partial class JobLine_JobLOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLOrder").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLOrder").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 90;
	}
	public string GetControlName() {
		return "JobLOrderValue";
	}
	public string GetDFName() {
		return "JobLOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLOrder/?RecId=[[RecId]]',$(this));\" data-bound-name='JobLOrder' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLOrder", "@JobLOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLCust : 
	DataFieldBase<string,JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Customer";}
		set { } 
	}

	public string DFName=> "JobLCust";

	
	public JobLine_JobLCust(JobLine Parent) : 
		base(Parent, "JobLCust"
			
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobLine_JobLCustFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLCust").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLCust").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 91;
	}
	public string GetControlName() {
		return "JobLCustValue";
	}
	public string GetDFName() {
		return "JobLCust";
	}
	public string GetTitle() {
		return "Customer";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLCust.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLCust/?RecId=[[RecId]]',$(this));\" data-bound-name='JobLCust' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLCust.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLCust";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLCust")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLCust", "@JobLCust", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLCust", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLCust", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLCollDate : 
	DateDataFieldBase<JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection Date";}
		set { } 
	}

	public string DFName=> "JobLCollDate";

	
	public JobLine_JobLCollDate(JobLine Parent) : 
		base(Parent, "JobLCollDate"
			,"ddd dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobLine_JobLCollDateFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLCollDate").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLCollDate").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 92;
	}
	public string GetControlName() {
		return "JobLCollDateValue";
	}
	public string GetDFName() {
		return "JobLCollDate";
	}
	public string GetTitle() {
		return "Collection Date";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLCollDate.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='ddd DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLCollDate/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='JobLCollDate' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLCollDate.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLCollDate";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLCollDate")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLCollDate", "@JobLCollDate", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLCollDate", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLCollDate", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class JobLine_JobLCollDate2 : 
	DateDataFieldBase<JobLine>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Collection Date 2";}
		set { } 
	}

	public string DFName=> "JobLCollDate2";

	
	public JobLine_JobLCollDate2(JobLine Parent) : 
		base(Parent, "JobLCollDate2"
			,"ddd dd-MMM-yyyy"
		)
    {
				Enabled = true; 
		
				    }
}


public partial class JobLine_JobLCollDate2FieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLCollDate2").Any()) 
			return DS.GetManager<JobLine>().OnDataSource.Where(f=> f.Key == "JobLCollDate2").First().Value(new JobLine());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 93;
	}
	public string GetControlName() {
		return "JobLCollDate2Value";
	}
	public string GetDFName() {
		return "JobLCollDate2";
	}
	public string GetTitle() {
		return "Collection Date 2";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		JobLine ds;
					ds = (JobLine)dsI;
		 
		
		return ds.JobLCollDate2.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		JobLine ds;
				ds = (JobLine)dsI;
		 

		string ctrl =  "<input style='height:21px;[[Width]]' data-date-format='ddd DD-MMM-YYYY' onchange=\"javascript:IQAutoSave('/JobLine/SaveJobLCollDate2/?RecId=[[RecId]]',$(this));\"class='form-control dateBox' type='text' data-bound-name='JobLCollDate2' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.JobLCollDate2.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "JobLCollDate2";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control dateBox' type='text'  value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "JobLCollDate2")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "JobLCollDate2", "@JobLCollDate2", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "JobLCollDate2", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("JobLine").GetFieldOperators("JobLCollDate2", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvId : 
	FormattableDataFieldBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Invoice Number";}
		set { } 
	}

	public string DFName=> "InvId";

	
	public Inv_InvId(Inv Parent) : 
		base(Parent, "InvId"
			,"f0"
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
				    }
}


public partial class Inv_InvIdFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvId").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvId").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 94;
	}
	public string GetControlName() {
		return "InvIdValue";
	}
	public string GetDFName() {
		return "InvId";
	}
	public string GetTitle() {
		return "Invoice Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvId.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvId/?RecId=[[RecId]]',$(this));\" data-bound-name='InvId' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvId.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvId";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvId")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvId", "@InvId", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvId", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvId", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvFreightDuty : 
	DataFieldSelectBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Freight or Duty";}
		set { } 
	}

	public string DFName=> "InvFreightDuty";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFreightDuty").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFreightDuty").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { return DSUtil.InvFreightDutyAsQuery();		}
		return _DataSource;

	}
    
	public Inv_InvFreightDuty(Inv Parent) : 
		base(Parent, "InvFreightDuty"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvFreightDutyFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFreightDuty").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvFreightDuty").First().Value(new Inv());
		
		
			return DSUtil.InvFreightDutyAsQuery();	}

	public int GetFieldUniqueId() {
		return 95;
	}
	public string GetControlName() {
		return "InvFreightDutyValue";
	}
	public string GetDFName() {
		return "InvFreightDuty";
	}
	public string GetTitle() {
		return "Freight or Duty";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvFreightDuty.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' onchange=\"javascript:IQAutoSave('/Inv/SaveInvFreightDuty/?RecId=[[RecId]]',$(this));\"class='form-control' data-bound-name='InvFreightDuty'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvFreightDuty.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvFreightDuty";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		string ret = $"<select class='form-control searchable' {extraHTML} multiple='multiple' name='{overridename}'>";
								foreach(var itm in IQApp.DB.Load<Pair<string, string>>(GetDataSource())) {
					ret += "<option value='" + itm.KeyValue + "'" + (filterValue == itm.KeyValue ? "selected=selected" : "") + ">" + itm.Description + "</option>";
				}
								ret += "</select>";
				return ret;	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvFreightDuty")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvFreightDuty", "@InvFreightDuty", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvFreightDuty", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvFreightDuty", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvJobNo : 
	DataFieldAutoCompleteSingleBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Job No";}
		set { } 
	}

	public string DFName=> "InvJobNo";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvJobNo").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvJobNo").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvJobNo(Inv Parent) : 
		base(Parent, "InvJobNo"
			
		)
    {
				Enabled = true; 
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvJobNoFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvJobNo").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvJobNo").First().Value(new Inv());
		
		
			return  "SELECT JobId AS KeyValue, JobNo AS Description FROM Job UNION SELECT 0, '' ORDER BY Description, KeyValue";	}

	public int GetFieldUniqueId() {
		return 96;
	}
	public string GetControlName() {
		return "InvJobNoValue";
	}
	public string GetDFName() {
		return "InvJobNo";
	}
	public string GetTitle() {
		return "Job No";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvJobNo.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Inv/AutoCompleteInvJobNo/' onchange=\"javascript:IQAutoSave('/Inv/SaveInvJobNo/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='InvJobNo'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvJobNo.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvJobNo";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Inv/AutoCompleteInvJobNo/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvJobNo")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvJobNo", "@InvJobNo", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvJobNo", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvJobNo", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Inv_InvOrder : 
	DataFieldAutoCompleteSingleBase<int,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Order Number";}
		set { } 
	}

	public string DFName=> "InvOrder";

		public string GetDataSource() {
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvOrder").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvOrder").First().Value(_Parent);
		
		if(string.IsNullOrEmpty(_DataSource)) { _DataSource =  "SELECT OrdId AS KeyValue, Cast(OrdId AS varchar(100)) AS Description FROM Orders UNION SELECT 0, '' ORDER BY KeyValue";		}
		return _DataSource;

	}
    
	public Inv_InvOrder(Inv Parent) : 
		base(Parent, "InvOrder"
			
		)
    {
		        Enabled = false;
		
		        this.SetValue("0");
						base.GetCustomDataSource = GetDataSource;
		    }
}


public partial class Inv_InvOrderFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvOrder").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvOrder").First().Value(new Inv());
		
		
			return  "SELECT OrdId AS KeyValue, Cast(OrdId AS varchar(100)) AS Description FROM Orders UNION SELECT 0, '' ORDER BY KeyValue";	}

	public int GetFieldUniqueId() {
		return 97;
	}
	public string GetControlName() {
		return "InvOrderValue";
	}
	public string GetDFName() {
		return "InvOrder";
	}
	public string GetTitle() {
		return "Order Number";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvOrder.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<select style='height:21px;[[Width]]' data-ajax--url='/Inv/AutoCompleteInvOrder/' onchange=\"javascript:IQAutoSave('/Inv/SaveInvOrder/?RecId=[[RecId]]',$(this));\"class='form-control searchautocomplete' data-bound-name='InvOrder'  >[[Val]]</select>";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvOrder.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvOrder";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<select class='form-control  searchautocomplete' data-ajax--url='/Inv/AutoCompleteInvOrder/' {extraHTML} multiple='multiple' name='{overridename}'></select>";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvOrder")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvOrder", "@InvOrder", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvOrder", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvOrder", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return true;
			}
}


	
public partial class Inv_InvVehicle : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Vehicle";}
		set { } 
	}

	public string DFName=> "InvVehicle";

	
	public Inv_InvVehicle(Inv Parent) : 
		base(Parent, "InvVehicle"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Inv_InvVehicleFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvVehicle").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvVehicle").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 98;
	}
	public string GetControlName() {
		return "InvVehicleValue";
	}
	public string GetDFName() {
		return "InvVehicle";
	}
	public string GetTitle() {
		return "Vehicle";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvVehicle.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvVehicle/?RecId=[[RecId]]',$(this));\" data-bound-name='InvVehicle' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvVehicle.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvVehicle";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvVehicle")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvVehicle", "@InvVehicle", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvVehicle", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvVehicle", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}


	
public partial class Inv_InvTrailer : 
	DataFieldBase<string,Inv>, IQ6.Core.IDSFieldBase
{
	
	public string LabelText { 
		get { return "Trailer";}
		set { } 
	}

	public string DFName=> "InvTrailer";

	
	public Inv_InvTrailer(Inv Parent) : 
		base(Parent, "InvTrailer"
			
		)
    {
		        Enabled = false;
		
				    }
}


public partial class Inv_InvTrailerFieldDef 
	: IFieldDefinition {
	
	public string GetDataSource()
	{
		if(DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTrailer").Any()) 
			return DS.GetManager<Inv>().OnDataSource.Where(f=> f.Key == "InvTrailer").First().Value(new Inv());
		
		
			return  "";	}

	public int GetFieldUniqueId() {
		return 99;
	}
	public string GetControlName() {
		return "InvTrailerValue";
	}
	public string GetDFName() {
		return "InvTrailer";
	}
	public string GetTitle() {
		return "Trailer";
	}
	
	public string DrawDisplayValue(IDSBase dsI) {
		Inv ds;
					ds = (Inv)dsI;
		 
		
		return ds.InvTrailer.DisplayValue.ToString();
	}

	public string DrawAutoSaveEditor(IDSBase dsI, double widthPercentage=0) {
		Inv ds;
				ds = (Inv)dsI;
		 

		string ctrl =  "<input  class='form-control' type='text' onchange=\"javascript:IQAutoSave('/Inv/SaveInvTrailer/?RecId=[[RecId]]',$(this));\" data-bound-name='InvTrailer' style='height:21px;[[Width]]' value='[[Val]]' />";
		ctrl = ctrl.Replace("[[RecId]]", ds.RecordID.ToString()).Replace("[[Val]]", ds.InvTrailer.HTMLValue.ToString());
		if(widthPercentage > 0) 
			ctrl = ctrl.Replace("[[Width]]", "width:" + widthPercentage.ToString() + "%;");
		else
			ctrl = ctrl.Replace("[[Width]]", "");

		return ctrl;
	}

	public  string Name { get { return "InvTrailer";} set { }}

		
	public string DrawResultsEditor(int id, string filterValue, string extraHTML = "", string overridename = "") {
		if(string.IsNullOrEmpty(overridename)) overridename = "FilterValue-" + id.ToString();
		return $"<input class='form-control' type='text' value='{filterValue}' {extraHTML} name='{overridename}' />";	}

	public string GetSearchClause(int OperatorID, string FilterValue, ref List<Pair<string, string>> Params) {
			
				if(FilterValue != "" ) {
					if(!Params.Any(f=> f.KeyValue == "InvTrailer")) {
				string ret =  IQApp.Operators.GetClause(OperatorID, "InvTrailer", "@InvTrailer", ref FilterValue);
				Params.Add(new Pair<string, string>() {  KeyValue = "InvTrailer", Description=FilterValue});
				return ret;
			}
				}
		
					return "";
	}

	public string DrawSearchOperators(int selected) {
		return IQApp.Datasets.GetDS("Inv").GetFieldOperators("InvTrailer", selected);
	}

	public bool IsCheckBox() {
				return false;
			}
	public bool IsAutoComplete() {
				return false;
			}
}



public class CustTypes {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Client'
										union select 2, 'Supplier'
										union select 3, 'Bonded Warehouse'
										union select 4, 'Duty Paid Delivery'
										union select 5, 'Transporter'
										union select 6, 'Collection Point'
										union select 7, 'Exporter'
										union select 8, 'Importer'
										union select 9, 'Clearing Agent'
					";
				}
			public const int Client = 1;public const int Supplier = 2;public const int BondedWarehouse = 3;public const int DutyPaid = 4;public const int Transporter = 5;public const int CollectionPoint = 6;public const int Exporter = 7;public const int Importer = 8;public const int ClearingAgent = 9;}public class CustCurrs {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Pound Sterling'
										union select 2, 'Euro'
										union select 3, 'US Dollar'
					";
				}
			public const int PoundSterling = 1;public const int Euro = 2;public const int USDollar = 3;}public class OrdExpImps {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Import'
										union select 2, 'Export'
					";
				}
			public const int Import = 1;public const int Export = 2;}public class OrdStatuss {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Duty Paid'
										union select 2, 'Under Bond'
					";
				}
			public const int DutyPaid = 1;public const int UnderBond = 2;}public class OrdVATPaidBys {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Client'
										union select 2, 'Consignee'
										union select 3, 'Supplier'
										union select 4, 'Delivery'
					";
				}
			public const int Client = 1;public const int Consignee = 2;public const int Supplier = 3;public const int Delivery = 4;}public class OrdBondFroms {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Client'
										union select 2, 'Consignee'
										union select 3, 'Supplier'
										union select 4, 'Delivery Point'
					";
				}
			public const int Client = 1;public const int Consignee = 2;public const int Supplier = 3;public const int DeliveryPoint = 4;}public class JobLDelPoints {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'As Order'
										union select 2, 'FTL'
					";
				}
			public const int AsOrder = 1;public const int FTL = 2;}public class JobAccMonths {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 101, 'JAN 2003'
										union select 102, 'FEB 2003'
										union select 103, 'MARCH 2003'
										union select 104, 'APRIL 2003'
										union select 105, 'MAY 2003'
										union select 106, 'JUNE 2003'
										union select 107, 'JULY  2003'
										union select 108, 'AUG 2003'
										union select 109, 'SEPT 2003'
										union select 110, 'OCT 2003'
										union select 111, 'NOV 2003'
										union select 112, 'DEC 2003'
										union select 113, 'JAN 2004'
										union select 114, 'FEB 2004'
										union select 115, 'MARCH 2004'
										union select 116, 'APRIL 2004'
										union select 117, 'MAY 2004'
										union select 118, 'JUNE 2004'
										union select 119, 'JULY  2004'
										union select 120, 'AUG 2004'
										union select 121, 'SEPT 2004'
										union select 122, 'OCT 2004'
										union select 123, 'NOV 2004'
										union select 124, 'DEC 2004'
										union select 125, 'JAN 2005'
										union select 126, 'FEB 2005'
										union select 127, 'MAR 2005'
										union select 128, 'APR 2005'
										union select 129, 'MAY 2005'
										union select 130, 'JUN 2005'
										union select 131, 'JUL 2005'
										union select 132, 'AUG 2005'
										union select 133, 'SEP 2005'
										union select 134, 'OCT 2005'
										union select 135, 'NOV 2005'
										union select 136, 'DEC 2005'
										union select 137, 'JAN 2006'
										union select 138, 'FEB 2006'
										union select 139, 'MAR 2006'
										union select 140, 'APR 2006'
										union select 141, 'MAY 2006'
										union select 142, 'JUN 2006'
										union select 143, 'JUL 2006'
										union select 144, 'AUG 2006'
										union select 145, 'SEP 2006'
										union select 146, 'OCT 2006'
										union select 147, 'NOV 2006'
										union select 148, 'DEC 2006'
										union select 149, 'JAN 2007'
										union select 150, 'FEB 2007'
										union select 255, 'DUMMY'
					";
				}
			public const int JAN2003 = 101;public const int FEB2003 = 102;public const int MARCH2003 = 103;public const int APRIL2003 = 104;public const int MAY2003 = 105;public const int JUNE2003 = 106;public const int JULY2003 = 107;public const int AUG2003 = 108;public const int SEPT2003 = 109;public const int OCT2003 = 110;public const int NOV2003 = 111;public const int DEC2003 = 112;public const int JAN2004 = 113;public const int FEB2004 = 114;public const int MARCH2004 = 115;public const int APRIL2004 = 116;public const int MAY2004 = 117;public const int JUNE2004 = 118;public const int JULY2004 = 119;public const int AUG2004 = 120;public const int SEPT2004 = 121;public const int OCT2004 = 122;public const int NOV2004 = 123;public const int DEC2004 = 124;public const int JAN2005 = 125;public const int FEB2005 = 126;public const int MAR2005 = 127;public const int APR2005 = 128;public const int MAY2005 = 129;public const int JUN2005 = 130;public const int JUL2005 = 131;public const int AUG2005 = 132;public const int SEP2005 = 133;public const int OCT2005 = 134;public const int NOV2005 = 135;public const int DEC2005 = 136;public const int JAN2006 = 137;public const int FEB2006 = 138;public const int MAR2006 = 139;public const int APR2006 = 140;public const int MAY2006 = 141;public const int JUN2006 = 142;public const int JUL2006 = 143;public const int AUG2006 = 144;public const int SEP2006 = 145;public const int OCT2006 = 146;public const int NOV2006 = 147;public const int DEC2006 = 148;public const int JAN2007 = 149;public const int FEB2007 = 150;public const int DUMMY = 255;}public class CustDelZones {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 11, 'Northampton (Tesco)'
										union select 12, 'Corsham'
										union select 13, 'Nailsea'
										union select 14, 'Burton-on-Trent'
										union select 15, 'Preston'
										union select 16, 'Rotherham'
										union select 17, 'London E16'
										union select 18, 'Hoddesdon'
										union select 19, 'Dorchester'
										union select 20, 'Barking'
										union select 21, 'Basildon (Schenker)'
										union select 22, 'Cirencester'
										union select 23, 'Tilbury'
										union select 24, 'Basildon (Eurobox)'
										union select 25, 'Coventry (Morrisons)'
										union select 26, 'Scotland'
										union select 27, 'Moulton (Tesco)'
										union select 28, 'Belvedere'
										union select 31, 'North WEST'
										union select 32, 'East Anglia'
										union select 33, 'Midlands'
										union select 34, 'Wales & Bristol'
										union select 35, 'London'
										union select 36, 'South-East'
										union select 37, 'South-West'
										union select 38, 'North EAST'
										union select 39, 'Home Counties'
										union select 40, 'Wakefield (Morrisons)'
										union select 41, 'Basingstoke'
										union select 42, 'West Hallam'
										union select 43, 'Theale (Nr Reading)'
										union select 44, 'Northampton (Morrisons)'
					";
				}
			public const int NorthamptonTesco = 11;public const int Corsham = 12;public const int Nailsea = 13;public const int BurtononTrent = 14;public const int Preston = 15;public const int Rotherham = 16;public const int LondonE16 = 17;public const int Hoddesdon = 18;public const int Dorchester = 19;public const int Barking = 20;public const int BasildonSchenker = 21;public const int Cirencester = 22;public const int Tilbury = 23;public const int BasildonEurobox = 24;public const int Coventry = 25;public const int Scotland = 26;public const int Moulton = 27;public const int Belvedere = 28;public const int NorthWEST = 31;public const int EastAnglia = 32;public const int Midlands = 33;public const int WalesBristol = 34;public const int London = 35;public const int SouthEast = 36;public const int SouthWest = 37;public const int NorthEAST = 38;public const int HomeCounties = 39;public const int Wakefield = 40;public const int Basingstoke = 41;public const int WestHallam = 42;public const int Theale = 43;public const int NorthamptonMorr = 44;}public class InvBTypes {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Import Inv'
										union select 2, 'Export Inv'
										union select 3, 'Duty Inv'
										union select 4, 'Import CN'
										union select 5, 'Export CN'
					";
				}
			public const int ImportInv = 1;public const int ExportInv = 2;public const int DutyInv = 3;public const int ImportCN = 4;public const int ExportCN = 5;}public class CustAADSyss {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Electronic'
										union select 2, 'Paper'
					";
				}
			public const int Electronic = 1;public const int Paper = 2;}public class OrdGBWKNoFroms {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 4, 'Delivery Point'
					";
				}
			public const int Delivery = 4;}public class IStNAT1s {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, '1'
										union select 2, '2'
										union select 3, '3'
										union select 4, '4'
										union select 5, '5'
										union select 6, '6'
										union select 7, '7'
										union select 8, '8'
										union select 9, '9'
					";
				}
			public const int One = 1;public const int Two = 2;public const int Three = 3;public const int Four = 4;public const int Five = 5;public const int Six = 6;public const int Seven = 7;public const int Eight = 8;public const int Nine = 9;}public class IStNAT2s {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 0, '0'
										union select 6, '6'
										union select 7, '7'
										union select 8, '8'
					";
				}
			public const int Zero = 0;public const int Six = 6;public const int Seven = 7;public const int Eight = 8;}public class IStTranspModes {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Sea'
										union select 2, 'Rail'
										union select 3, 'Road'
										union select 4, 'Air'
										union select 5, 'Post'
										union select 6, 'Not Allocated'
										union select 7, 'Fixed Installations'
										union select 8, 'Inland Waterway'
										union select 9, 'Own Propulsion'
					";
				}
			public const int Sea = 1;public const int Rail = 2;public const int Road = 3;public const int Air = 4;public const int Post = 5;public const int NotAllocated = 6;public const int FixedInstall = 7;public const int InlandWaterway = 8;public const int OwnPropulsion = 9;}public class CRTypes {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Fault / bug'
										union select 2, 'Change request'
										union select 3, 'Question'
					";
				}
			public const int FaultBug = 1;public const int Changerequest = 2;public const int Question = 3;}public class CRPrioritys {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Urgent'
										union select 2, 'High'
										union select 3, 'Medium'
										union select 4, 'Low'
					";
				}
			public const int Urgent = 1;public const int High = 2;public const int Medium = 3;public const int Low = 4;}public class CRStatuss {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Open - with Intrinsiq'
										union select 2, 'Open - with FTL'
										union select 3, 'On hold'
										union select 4, 'Closed'
					";
				}
			public const int OpenIntrinsiq = 1;public const int OpenwithFTL = 2;public const int Onhold = 3;public const int Closed = 4;}public class EMStatuss {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Unsent'
										union select 2, 'Sent'
										union select 3, 'Delete'
					";
				}
			public const int Unsent = 1;public const int Sent = 2;public const int Delete = 3;}public class StfSGs {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Full Rights'
										union select 2, 'Database User'
										union select 3, 'Customer'
					";
				}
			public const int FullRights = 1;public const int DatabaseUser = 2;public const int Customer = 3;}public class WrDocQueryTypes {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 0, 'User Written'
										union select 1, 'Built In'
					";
				}
			public const int UserWritten = 0;public const int BuiltIn = 1;}public class SMSStatuss {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'Pending'
										union select 2, 'Sent'
										union select 3, 'Delivered'
					";
				}
			public const int Pending = 1;public const int Sent = 2;public const int Delivered = 3;}public class QryTypes {
				public static string AsQuery() {
					return @"select 0 as KeyValue, '' as [Description]
										union select 1, 'SQL'
										union select 2, 'IronRuby'
										union select 3, 'Excel Report'
					";
				}
			public const int Sql = 1;public const int RUBY = 2;public const int ExcelReport = 3;}public class DSTypeContact : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "ContId":
					return "Contact ID";
							case "ContFN":
					return "Forename";
							case "ContSN":
					return "Surname";
							case "ContPhone":
					return "Phone";
							case "ContFax":
					return "Fax";
							case "ContEM":
					return "E-Mail";
							case "ContJobTitle":
					return "Job Title";
							case "ContNotes":
					return "Notes";
							case "ContMainContact":
					return "Main Contact";
							case "ContCust":
					return "Company";
							case "ContName":
					return "Full Name";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "ContId":
					return 30;
							case "ContFN":
					return 31;
							case "ContSN":
					return 32;
							case "ContPhone":
					return 33;
							case "ContFax":
					return 34;
							case "ContEM":
					return 35;
							case "ContJobTitle":
					return 36;
							case "ContNotes":
					return 37;
							case "ContMainContact":
					return 143;
							case "ContCust":
					return 424;
							case "ContName":
					return 425;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "ContId":
				return IQApp.Operators.GetNumberOperators(selected);							case "ContFN":
				return IQApp.Operators.GetTextOperators(selected);							case "ContSN":
				return IQApp.Operators.GetTextOperators(selected);							case "ContPhone":
				return IQApp.Operators.GetTextOperators(selected);							case "ContFax":
				return IQApp.Operators.GetTextOperators(selected);							case "ContEM":
				return IQApp.Operators.GetTextOperators(selected);							case "ContJobTitle":
				return IQApp.Operators.GetTextOperators(selected);							case "ContNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "ContMainContact":
				return IQApp.Operators.GetBooleanOperators(selected);							case "ContCust":
				return IQApp.Operators.GetComboOperators(selected);							case "ContName":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'ContId', 'Contact ID'
					union select 'ContFN', 'Forename'
					union select 'ContSN', 'Surname'
					union select 'ContPhone', 'Phone'
					union select 'ContFax', 'Fax'
					union select 'ContEM', 'E-Mail'
					union select 'ContJobTitle', 'Job Title'
					union select 'ContNotes', 'Notes'
					union select 'ContMainContact', 'Main Contact'
					union select 'ContCust', 'Company'
					union select 'ContName', 'Full Name'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "ContId":
					return new Contact_ContIdFieldDef();
							case "ContFN":
					return new Contact_ContFNFieldDef();
							case "ContSN":
					return new Contact_ContSNFieldDef();
							case "ContPhone":
					return new Contact_ContPhoneFieldDef();
							case "ContFax":
					return new Contact_ContFaxFieldDef();
							case "ContEM":
					return new Contact_ContEMFieldDef();
							case "ContJobTitle":
					return new Contact_ContJobTitleFieldDef();
							case "ContNotes":
					return new Contact_ContNotesFieldDef();
							case "ContMainContact":
					return new Contact_ContMainContactFieldDef();
							case "ContCust":
					return new Contact_ContCustFieldDef();
							case "ContName":
					return new Contact_ContNameFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, ContName as [Description] from Contact 
			where ContId like @q or ContName like @q";
	}
	
}
public class DSTypeOrders : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "OrdEMTo":
					return "E-Mail To";
							case "OrdFaxTo":
					return "Fax To";
							case "OrdAgentId":
					return "Agent ID";
							case "OrdAgent":
					return "Agent";
							case "OrdAADSys":
					return "AAD System";
							case "OrdARCRef":
					return "eAD ARC Ref";
							case "OrdCollectCtry":
					return "Collect Country";
							case "OrdSelEMTo":
					return "Select E-Mail To";
							case "OrdSelFaxTo":
					return "Select Fax To";
							case "OrdCustName":
					return "Client Name (Text)";
							case "OrdConsOrd":
					return "Consign Order No";
							case "OrdDelRef":
					return "Delivery Reference";
							case "OrdNotes":
					return "Order Notes";
							case "OrdJobNo":
					return "Job Number";
							case "OrdJobLetter":
					return "Job Letter";
							case "OrdInvoiced":
					return "Invoiced";
							case "OrdFreightInv":
					return "Freight Inv";
							case "OrdExpImp":
					return "Export or Import";
							case "OrdId":
					return "Order Number";
							case "OrdCustOrd":
					return "Client Order No";
							case "OrdDate":
					return "Order Date";
							case "OrdStatus":
					return "Status";
							case "OrdReqDate":
					return "Required Date";
							case "OrdSupp":
					return "Supplier Name";
							case "OrdSupPC":
					return "Supplier Postcode";
							case "OrdCollPoint":
					return "Collection Point";
							case "OrdCollPointPC":
					return "Collection Postcode";
							case "OrdSuppRef":
					return "Supplier Reference";
							case "OrdConsign":
					return "Consignee Name";
							case "OrdConsignPC":
					return "Consign Postcode";
							case "OrdDelPoint":
					return "Delivery Point";
							case "OrdDelPointPC":
					return "Delivery Postcode";
							case "OrdVATPaidBy":
					return "VAT Paid By";
							case "OrdVATNo":
					return "VAT Number";
							case "OrdDANNoFrom":
					return "DAN Number From";
							case "OrdDANNo":
					return "DAN Number";
							case "OrdBondFrom":
					return "REDS/Bond From";
							case "OrdBondCode":
					return "REDS/Bond Code";
							case "OrdCust":
					return "Client Name";
							case "OrdCustPC":
					return "Client Postcode";
							case "OrdDateAvail":
					return "Date Available";
							case "OrdJob":
					return "Order Job Number";
							case "OrdCollDate":
					return "Collection Date";
							case "OrdCollDate2":
					return "Collection Date 2";
							case "OrdDateDel":
					return "Date Delivered";
							case "OrdTimeAvail":
					return "Time Available";
							case "OrdDutyInv":
					return "Duty Inv";
							case "OrdPriceAllowed":
					return "Price Allowed";
							case "OrdReqdChanged":
					return "Reqd Changed";
							case "OrdAvailChanged":
					return "Available Changed";
							case "OrdCollChanged":
					return "Collected Changed";
							case "OrdDelChanged":
					return "Delivered Changed";
							case "OrdTescoRef":
					return "Tesco Ref";
							case "OrdCreatedBy":
					return "Created By";
							case "OrdGBWKNoFrom":
					return "GBWK No From";
							case "OrdGBWKNo":
					return "GBWK Number";
							case "OrdTescoPSWk":
					return "Tesco PS Wk";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "OrdEMTo":
					return 332;
							case "OrdFaxTo":
					return 333;
							case "OrdAgentId":
					return 334;
							case "OrdAgent":
					return 335;
							case "OrdAADSys":
					return 339;
							case "OrdARCRef":
					return 340;
							case "OrdCollectCtry":
					return 408;
							case "OrdSelEMTo":
					return 670;
							case "OrdSelFaxTo":
					return 671;
							case "OrdCustName":
					return 698;
							case "OrdConsOrd":
					return 696;
							case "OrdDelRef":
					return 766;
							case "OrdNotes":
					return 149;
							case "OrdJobNo":
					return 155;
							case "OrdJobLetter":
					return 156;
							case "OrdInvoiced":
					return 176;
							case "OrdFreightInv":
					return 177;
							case "OrdExpImp":
					return 38;
							case "OrdId":
					return 39;
							case "OrdCustOrd":
					return 40;
							case "OrdDate":
					return 41;
							case "OrdStatus":
					return 42;
							case "OrdReqDate":
					return 43;
							case "OrdSupp":
					return 44;
							case "OrdSupPC":
					return 45;
							case "OrdCollPoint":
					return 46;
							case "OrdCollPointPC":
					return 47;
							case "OrdSuppRef":
					return 48;
							case "OrdConsign":
					return 49;
							case "OrdConsignPC":
					return 50;
							case "OrdDelPoint":
					return 51;
							case "OrdDelPointPC":
					return 52;
							case "OrdVATPaidBy":
					return 53;
							case "OrdVATNo":
					return 54;
							case "OrdDANNoFrom":
					return 55;
							case "OrdDANNo":
					return 56;
							case "OrdBondFrom":
					return 57;
							case "OrdBondCode":
					return 58;
							case "OrdCust":
					return 59;
							case "OrdCustPC":
					return 60;
							case "OrdDateAvail":
					return 61;
							case "OrdJob":
					return 62;
							case "OrdCollDate":
					return 63;
							case "OrdCollDate2":
					return 64;
							case "OrdDateDel":
					return 66;
							case "OrdTimeAvail":
					return 192;
							case "OrdDutyInv":
					return 195;
							case "OrdPriceAllowed":
					return 245;
							case "OrdReqdChanged":
					return 246;
							case "OrdAvailChanged":
					return 247;
							case "OrdCollChanged":
					return 248;
							case "OrdDelChanged":
					return 249;
							case "OrdTescoRef":
					return 267;
							case "OrdCreatedBy":
					return 288;
							case "OrdGBWKNoFrom":
					return 344;
							case "OrdGBWKNo":
					return 345;
							case "OrdTescoPSWk":
					return 346;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "OrdEMTo":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdFaxTo":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdAgentId":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdAgent":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdAADSys":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdARCRef":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdCollectCtry":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdSelEMTo":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdSelFaxTo":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdCustName":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdConsOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDelRef":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdJobNo":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdJobLetter":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdInvoiced":
				return IQApp.Operators.GetBooleanOperators(selected);							case "OrdFreightInv":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdExpImp":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdId":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdCustOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdStatus":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdReqDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdSupp":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdSupPC":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdCollPoint":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdCollPointPC":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdSuppRef":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdConsign":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdConsignPC":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDelPoint":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdDelPointPC":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdVATPaidBy":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdVATNo":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDANNoFrom":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdDANNo":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdBondFrom":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdBondCode":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdCust":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdCustPC":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDateAvail":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdJob":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdCollDate":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdCollDate2":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDateDel":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdTimeAvail":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDutyInv":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdPriceAllowed":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdReqdChanged":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdAvailChanged":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdCollChanged":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdDelChanged":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdTescoRef":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdCreatedBy":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdGBWKNoFrom":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdGBWKNo":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdTescoPSWk":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'OrdEMTo', 'E-Mail To'
					union select 'OrdFaxTo', 'Fax To'
					union select 'OrdAgentId', 'Agent ID'
					union select 'OrdAgent', 'Agent'
					union select 'OrdAADSys', 'AAD System'
					union select 'OrdARCRef', 'eAD ARC Ref'
					union select 'OrdCollectCtry', 'Collect Country'
					union select 'OrdSelEMTo', 'Select E-Mail To'
					union select 'OrdSelFaxTo', 'Select Fax To'
					union select 'OrdCustName', 'Client Name (Text)'
					union select 'OrdConsOrd', 'Consign Order No'
					union select 'OrdDelRef', 'Delivery Reference'
					union select 'OrdNotes', 'Order Notes'
					union select 'OrdJobNo', 'Job Number'
					union select 'OrdJobLetter', 'Job Letter'
					union select 'OrdInvoiced', 'Invoiced'
					union select 'OrdFreightInv', 'Freight Inv'
					union select 'OrdExpImp', 'Export or Import'
					union select 'OrdId', 'Order Number'
					union select 'OrdCustOrd', 'Client Order No'
					union select 'OrdDate', 'Order Date'
					union select 'OrdStatus', 'Status'
					union select 'OrdReqDate', 'Required Date'
					union select 'OrdSupp', 'Supplier Name'
					union select 'OrdSupPC', 'Supplier Postcode'
					union select 'OrdCollPoint', 'Collection Point'
					union select 'OrdCollPointPC', 'Collection Postcode'
					union select 'OrdSuppRef', 'Supplier Reference'
					union select 'OrdConsign', 'Consignee Name'
					union select 'OrdConsignPC', 'Consign Postcode'
					union select 'OrdDelPoint', 'Delivery Point'
					union select 'OrdDelPointPC', 'Delivery Postcode'
					union select 'OrdVATPaidBy', 'VAT Paid By'
					union select 'OrdVATNo', 'VAT Number'
					union select 'OrdDANNoFrom', 'DAN Number From'
					union select 'OrdDANNo', 'DAN Number'
					union select 'OrdBondFrom', 'REDS/Bond From'
					union select 'OrdBondCode', 'REDS/Bond Code'
					union select 'OrdCust', 'Client Name'
					union select 'OrdCustPC', 'Client Postcode'
					union select 'OrdDateAvail', 'Date Available'
					union select 'OrdJob', 'Order Job Number'
					union select 'OrdCollDate', 'Collection Date'
					union select 'OrdCollDate2', 'Collection Date 2'
					union select 'OrdDateDel', 'Date Delivered'
					union select 'OrdTimeAvail', 'Time Available'
					union select 'OrdDutyInv', 'Duty Inv'
					union select 'OrdPriceAllowed', 'Price Allowed'
					union select 'OrdReqdChanged', 'Reqd Changed'
					union select 'OrdAvailChanged', 'Available Changed'
					union select 'OrdCollChanged', 'Collected Changed'
					union select 'OrdDelChanged', 'Delivered Changed'
					union select 'OrdTescoRef', 'Tesco Ref'
					union select 'OrdCreatedBy', 'Created By'
					union select 'OrdGBWKNoFrom', 'GBWK No From'
					union select 'OrdGBWKNo', 'GBWK Number'
					union select 'OrdTescoPSWk', 'Tesco PS Wk'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "OrdEMTo":
					return new Orders_OrdEMToFieldDef();
							case "OrdFaxTo":
					return new Orders_OrdFaxToFieldDef();
							case "OrdAgentId":
					return new Orders_OrdAgentIdFieldDef();
							case "OrdAgent":
					return new Orders_OrdAgentFieldDef();
							case "OrdAADSys":
					return new Orders_OrdAADSysFieldDef();
							case "OrdARCRef":
					return new Orders_OrdARCRefFieldDef();
							case "OrdCollectCtry":
					return new Orders_OrdCollectCtryFieldDef();
							case "OrdSelEMTo":
					return new Orders_OrdSelEMToFieldDef();
							case "OrdSelFaxTo":
					return new Orders_OrdSelFaxToFieldDef();
							case "OrdCustName":
					return new Orders_OrdCustNameFieldDef();
							case "OrdConsOrd":
					return new Orders_OrdConsOrdFieldDef();
							case "OrdDelRef":
					return new Orders_OrdDelRefFieldDef();
							case "OrdNotes":
					return new Orders_OrdNotesFieldDef();
							case "OrdJobNo":
					return new Orders_OrdJobNoFieldDef();
							case "OrdJobLetter":
					return new Orders_OrdJobLetterFieldDef();
							case "OrdInvoiced":
					return new Orders_OrdInvoicedFieldDef();
							case "OrdFreightInv":
					return new Orders_OrdFreightInvFieldDef();
							case "OrdExpImp":
					return new Orders_OrdExpImpFieldDef();
							case "OrdId":
					return new Orders_OrdIdFieldDef();
							case "OrdCustOrd":
					return new Orders_OrdCustOrdFieldDef();
							case "OrdDate":
					return new Orders_OrdDateFieldDef();
							case "OrdStatus":
					return new Orders_OrdStatusFieldDef();
							case "OrdReqDate":
					return new Orders_OrdReqDateFieldDef();
							case "OrdSupp":
					return new Orders_OrdSuppFieldDef();
							case "OrdSupPC":
					return new Orders_OrdSupPCFieldDef();
							case "OrdCollPoint":
					return new Orders_OrdCollPointFieldDef();
							case "OrdCollPointPC":
					return new Orders_OrdCollPointPCFieldDef();
							case "OrdSuppRef":
					return new Orders_OrdSuppRefFieldDef();
							case "OrdConsign":
					return new Orders_OrdConsignFieldDef();
							case "OrdConsignPC":
					return new Orders_OrdConsignPCFieldDef();
							case "OrdDelPoint":
					return new Orders_OrdDelPointFieldDef();
							case "OrdDelPointPC":
					return new Orders_OrdDelPointPCFieldDef();
							case "OrdVATPaidBy":
					return new Orders_OrdVATPaidByFieldDef();
							case "OrdVATNo":
					return new Orders_OrdVATNoFieldDef();
							case "OrdDANNoFrom":
					return new Orders_OrdDANNoFromFieldDef();
							case "OrdDANNo":
					return new Orders_OrdDANNoFieldDef();
							case "OrdBondFrom":
					return new Orders_OrdBondFromFieldDef();
							case "OrdBondCode":
					return new Orders_OrdBondCodeFieldDef();
							case "OrdCust":
					return new Orders_OrdCustFieldDef();
							case "OrdCustPC":
					return new Orders_OrdCustPCFieldDef();
							case "OrdDateAvail":
					return new Orders_OrdDateAvailFieldDef();
							case "OrdJob":
					return new Orders_OrdJobFieldDef();
							case "OrdCollDate":
					return new Orders_OrdCollDateFieldDef();
							case "OrdCollDate2":
					return new Orders_OrdCollDate2FieldDef();
							case "OrdDateDel":
					return new Orders_OrdDateDelFieldDef();
							case "OrdTimeAvail":
					return new Orders_OrdTimeAvailFieldDef();
							case "OrdDutyInv":
					return new Orders_OrdDutyInvFieldDef();
							case "OrdPriceAllowed":
					return new Orders_OrdPriceAllowedFieldDef();
							case "OrdReqdChanged":
					return new Orders_OrdReqdChangedFieldDef();
							case "OrdAvailChanged":
					return new Orders_OrdAvailChangedFieldDef();
							case "OrdCollChanged":
					return new Orders_OrdCollChangedFieldDef();
							case "OrdDelChanged":
					return new Orders_OrdDelChangedFieldDef();
							case "OrdTescoRef":
					return new Orders_OrdTescoRefFieldDef();
							case "OrdCreatedBy":
					return new Orders_OrdCreatedByFieldDef();
							case "OrdGBWKNoFrom":
					return new Orders_OrdGBWKNoFromFieldDef();
							case "OrdGBWKNo":
					return new Orders_OrdGBWKNoFieldDef();
							case "OrdTescoPSWk":
					return new Orders_OrdTescoPSWkFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, OrdId as [Description] from Orders 
			where OrdId like @q or OrdId like @q";
	}
	
}
public class DSTypeOrderLine : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "OrdLCustOrd":
					return "Client Order No";
							case "OrdLOrder":
					return "Order Number";
							case "OrdLLineNo":
					return "Line Number";
							case "OrdLQty":
					return "Quantity";
							case "OrdLPackageType":
					return "Package Type";
							case "OrdLSize":
					return "Size";
							case "OrdLDesc":
					return "Description";
							case "OrdLWeight":
					return "Weight";
							case "OrdLNumPallet":
					return "Number of Pallets";
							case "OrdLPalletType":
					return "Pallet Type";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "OrdLCustOrd":
					return 328;
							case "OrdLOrder":
					return 67;
							case "OrdLLineNo":
					return 68;
							case "OrdLQty":
					return 69;
							case "OrdLPackageType":
					return 70;
							case "OrdLSize":
					return 71;
							case "OrdLDesc":
					return 72;
							case "OrdLWeight":
					return 73;
							case "OrdLNumPallet":
					return 74;
							case "OrdLPalletType":
					return 75;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "OrdLCustOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdLOrder":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdLLineNo":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdLQty":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdLPackageType":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdLSize":
				return IQApp.Operators.GetComboOperators(selected);							case "OrdLDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "OrdLWeight":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdLNumPallet":
				return IQApp.Operators.GetNumberOperators(selected);							case "OrdLPalletType":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'OrdLCustOrd', 'Client Order No'
					union select 'OrdLOrder', 'Order Number'
					union select 'OrdLLineNo', 'Line Number'
					union select 'OrdLQty', 'Quantity'
					union select 'OrdLPackageType', 'Package Type'
					union select 'OrdLSize', 'Size'
					union select 'OrdLDesc', 'Description'
					union select 'OrdLWeight', 'Weight'
					union select 'OrdLNumPallet', 'Number of Pallets'
					union select 'OrdLPalletType', 'Pallet Type'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "OrdLCustOrd":
					return new OrderLine_OrdLCustOrdFieldDef();
							case "OrdLOrder":
					return new OrderLine_OrdLOrderFieldDef();
							case "OrdLLineNo":
					return new OrderLine_OrdLLineNoFieldDef();
							case "OrdLQty":
					return new OrderLine_OrdLQtyFieldDef();
							case "OrdLPackageType":
					return new OrderLine_OrdLPackageTypeFieldDef();
							case "OrdLSize":
					return new OrderLine_OrdLSizeFieldDef();
							case "OrdLDesc":
					return new OrderLine_OrdLDescFieldDef();
							case "OrdLWeight":
					return new OrderLine_OrdLWeightFieldDef();
							case "OrdLNumPallet":
					return new OrderLine_OrdLNumPalletFieldDef();
							case "OrdLPalletType":
					return new OrderLine_OrdLPalletTypeFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, OrdLOrder as [Description] from OrderLine 
			where OrdLOrder like @q or OrdLOrder like @q";
	}
	
}
public class DSTypeJob : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "JobNo":
					return "Job Number";
							case "JobTransp":
					return "Transporter";
							case "JobTranspRate":
					return "Transporter Rate";
							case "JobVehNo":
					return "Vehicle Number";
							case "JobTrailerNo":
					return "Trailer Number";
							case "JobFerryName":
					return "Ferry Name";
							case "JobFerryDate":
					return "Ferry Date";
							case "JobFerryTime":
					return "Ferry Time";
							case "JobRouteFrom":
					return "Route From";
							case "JobRouteTo":
					return "Route To";
							case "JobCreatedBy":
					return "Created By";
							case "JobAccMonth":
					return "Accounting Month";
							case "JobChecked":
					return "Checked";
							case "JobId":
					return "Job Id";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "JobNo":
					return 76;
							case "JobTransp":
					return 77;
							case "JobTranspRate":
					return 78;
							case "JobVehNo":
					return 79;
							case "JobTrailerNo":
					return 80;
							case "JobFerryName":
					return 81;
							case "JobFerryDate":
					return 82;
							case "JobFerryTime":
					return 83;
							case "JobRouteFrom":
					return 84;
							case "JobRouteTo":
					return 85;
							case "JobCreatedBy":
					return 289;
							case "JobAccMonth":
					return 196;
							case "JobChecked":
					return 241;
							case "JobId":
					return 428;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "JobNo":
				return IQApp.Operators.GetTextOperators(selected);							case "JobTransp":
				return IQApp.Operators.GetComboOperators(selected);							case "JobTranspRate":
				return IQApp.Operators.GetTextOperators(selected);							case "JobVehNo":
				return IQApp.Operators.GetTextOperators(selected);							case "JobTrailerNo":
				return IQApp.Operators.GetTextOperators(selected);							case "JobFerryName":
				return IQApp.Operators.GetTextOperators(selected);							case "JobFerryDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "JobFerryTime":
				return IQApp.Operators.GetTextOperators(selected);							case "JobRouteFrom":
				return IQApp.Operators.GetComboOperators(selected);							case "JobRouteTo":
				return IQApp.Operators.GetComboOperators(selected);							case "JobCreatedBy":
				return IQApp.Operators.GetComboOperators(selected);							case "JobAccMonth":
				return IQApp.Operators.GetComboOperators(selected);							case "JobChecked":
				return IQApp.Operators.GetBooleanOperators(selected);							case "JobId":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'JobNo', 'Job Number'
					union select 'JobTransp', 'Transporter'
					union select 'JobTranspRate', 'Transporter Rate'
					union select 'JobVehNo', 'Vehicle Number'
					union select 'JobTrailerNo', 'Trailer Number'
					union select 'JobFerryName', 'Ferry Name'
					union select 'JobFerryDate', 'Ferry Date'
					union select 'JobFerryTime', 'Ferry Time'
					union select 'JobRouteFrom', 'Route From'
					union select 'JobRouteTo', 'Route To'
					union select 'JobCreatedBy', 'Created By'
					union select 'JobAccMonth', 'Accounting Month'
					union select 'JobChecked', 'Checked'
					union select 'JobId', 'Job Id'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "JobNo":
					return new Job_JobNoFieldDef();
							case "JobTransp":
					return new Job_JobTranspFieldDef();
							case "JobTranspRate":
					return new Job_JobTranspRateFieldDef();
							case "JobVehNo":
					return new Job_JobVehNoFieldDef();
							case "JobTrailerNo":
					return new Job_JobTrailerNoFieldDef();
							case "JobFerryName":
					return new Job_JobFerryNameFieldDef();
							case "JobFerryDate":
					return new Job_JobFerryDateFieldDef();
							case "JobFerryTime":
					return new Job_JobFerryTimeFieldDef();
							case "JobRouteFrom":
					return new Job_JobRouteFromFieldDef();
							case "JobRouteTo":
					return new Job_JobRouteToFieldDef();
							case "JobCreatedBy":
					return new Job_JobCreatedByFieldDef();
							case "JobAccMonth":
					return new Job_JobAccMonthFieldDef();
							case "JobChecked":
					return new Job_JobCheckedFieldDef();
							case "JobId":
					return new Job_JobIdFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, JobNo as [Description] from Job 
			where JobId like @q or JobNo like @q";
	}
	
}
public class DSTypeJobLine : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "JobLDelPoint":
					return "Delivery Point";
							case "JobLDelDate":
					return "Delivery Date";
							case "JobLDelTime":
					return "Delivery Time";
							case "JobLDelRef":
					return "Delivery Ref";
							case "JobLJobNo":
					return "Job Number";
							case "JobLLineLetter":
					return "Line Letter";
							case "JobLOrder":
					return "Order Number";
							case "JobLCust":
					return "Customer";
							case "JobLCollDate":
					return "Collection Date";
							case "JobLCollDate2":
					return "Collection Date 2";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "JobLDelPoint":
					return 158;
							case "JobLDelDate":
					return 159;
							case "JobLDelTime":
					return 160;
							case "JobLDelRef":
					return 161;
							case "JobLJobNo":
					return 88;
							case "JobLLineLetter":
					return 89;
							case "JobLOrder":
					return 90;
							case "JobLCust":
					return 91;
							case "JobLCollDate":
					return 92;
							case "JobLCollDate2":
					return 93;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "JobLDelPoint":
				return IQApp.Operators.GetComboOperators(selected);							case "JobLDelDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "JobLDelTime":
				return IQApp.Operators.GetTextOperators(selected);							case "JobLDelRef":
				return IQApp.Operators.GetTextOperators(selected);							case "JobLJobNo":
				return IQApp.Operators.GetComboOperators(selected);							case "JobLLineLetter":
				return IQApp.Operators.GetTextOperators(selected);							case "JobLOrder":
				return IQApp.Operators.GetNumberOperators(selected);							case "JobLCust":
				return IQApp.Operators.GetTextOperators(selected);							case "JobLCollDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "JobLCollDate2":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'JobLDelPoint', 'Delivery Point'
					union select 'JobLDelDate', 'Delivery Date'
					union select 'JobLDelTime', 'Delivery Time'
					union select 'JobLDelRef', 'Delivery Ref'
					union select 'JobLJobNo', 'Job Number'
					union select 'JobLLineLetter', 'Line Letter'
					union select 'JobLOrder', 'Order Number'
					union select 'JobLCust', 'Customer'
					union select 'JobLCollDate', 'Collection Date'
					union select 'JobLCollDate2', 'Collection Date 2'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "JobLDelPoint":
					return new JobLine_JobLDelPointFieldDef();
							case "JobLDelDate":
					return new JobLine_JobLDelDateFieldDef();
							case "JobLDelTime":
					return new JobLine_JobLDelTimeFieldDef();
							case "JobLDelRef":
					return new JobLine_JobLDelRefFieldDef();
							case "JobLJobNo":
					return new JobLine_JobLJobNoFieldDef();
							case "JobLLineLetter":
					return new JobLine_JobLLineLetterFieldDef();
							case "JobLOrder":
					return new JobLine_JobLOrderFieldDef();
							case "JobLCust":
					return new JobLine_JobLCustFieldDef();
							case "JobLCollDate":
					return new JobLine_JobLCollDateFieldDef();
							case "JobLCollDate2":
					return new JobLine_JobLCollDate2FieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, JobLJobNo as [Description] from JobLine 
			where JobLJobNo like @q or JobLJobNo like @q";
	}
	
}
public class DSTypeInv : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "InvId":
					return "Invoice Number";
							case "InvFreightDuty":
					return "Freight or Duty";
							case "InvJobNo":
					return "Job No";
							case "InvOrder":
					return "Order Number";
							case "InvVehicle":
					return "Vehicle";
							case "InvTrailer":
					return "Trailer";
							case "InvRouteFrom":
					return "Route From";
							case "InvRouteTo":
					return "Route To";
							case "InvFerryName":
					return "Ferry Name";
							case "InvFerryDate":
					return "Ferry Date";
							case "InvFerryTime":
					return "Ferry Time";
							case "InvTo":
					return "Invoice To";
							case "InvDesc":
					return "Invoice Description";
							case "InvNet":
					return "Net Amount";
							case "InvVAT":
					return "VAT Amount";
							case "InvTotal":
					return "Invoice Total";
							case "InvNote1":
					return "Comment 1";
							case "InvNote2":
					return "Comment 2";
							case "InvNote3":
					return "Comment 3";
							case "InvPrintBatch":
					return "Print Batch No";
							case "InvDate":
					return "Invoice Date";
							case "InvJobLetter":
					return "Job Letter";
							case "InvToExport":
					return "Send to Dover";
							case "InvExported":
					return "Sent to Dover";
							case "InvCustOrd":
					return "Client Order No";
							case "InvToId":
					return "Invoice To ID";
							case "InvAddr":
					return "Inv Co Address1";
							case "InvTown":
					return "Inv Co Town";
							case "InvPC":
					return "Inv Co Postcode";
							case "InvImpExp":
					return "Import or Export";
							case "InvCurr":
					return "Currency";
							case "InvExchRate":
					return "Exchange Rate";
							case "InvTescoRef":
					return "Tesco Ref";
							case "InvBelongsPInv":
					return "Belongs to P Inv";
							case "InvISPInv":
					return "Is Period Invoice";
							case "InvProforma":
					return "Proforma";
							case "InvSentTradeshift":
					return "Sent to Tradeshift";
							case "InvSentToClient":
					return "Sent to Client";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "InvId":
					return 94;
							case "InvFreightDuty":
					return 95;
							case "InvJobNo":
					return 96;
							case "InvOrder":
					return 97;
							case "InvVehicle":
					return 98;
							case "InvTrailer":
					return 99;
							case "InvRouteFrom":
					return 100;
							case "InvRouteTo":
					return 101;
							case "InvFerryName":
					return 102;
							case "InvFerryDate":
					return 103;
							case "InvFerryTime":
					return 104;
							case "InvTo":
					return 105;
							case "InvDesc":
					return 106;
							case "InvNet":
					return 107;
							case "InvVAT":
					return 108;
							case "InvTotal":
					return 109;
							case "InvNote1":
					return 110;
							case "InvNote2":
					return 111;
							case "InvNote3":
					return 112;
							case "InvPrintBatch":
					return 157;
							case "InvDate":
					return 128;
							case "InvJobLetter":
					return 162;
							case "InvToExport":
					return 171;
							case "InvExported":
					return 172;
							case "InvCustOrd":
					return 174;
							case "InvToId":
					return 175;
							case "InvAddr":
					return 242;
							case "InvTown":
					return 243;
							case "InvPC":
					return 244;
							case "InvImpExp":
					return 199;
							case "InvCurr":
					return 252;
							case "InvExchRate":
					return 253;
							case "InvTescoRef":
					return 268;
							case "InvBelongsPInv":
					return 269;
							case "InvISPInv":
					return 270;
							case "InvProforma":
					return 326;
							case "InvSentTradeshift":
					return 407;
							case "InvSentToClient":
					return 787;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "InvId":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvFreightDuty":
				return IQApp.Operators.GetComboOperators(selected);							case "InvJobNo":
				return IQApp.Operators.GetComboOperators(selected);							case "InvOrder":
				return IQApp.Operators.GetComboOperators(selected);							case "InvVehicle":
				return IQApp.Operators.GetTextOperators(selected);							case "InvTrailer":
				return IQApp.Operators.GetTextOperators(selected);							case "InvRouteFrom":
				return IQApp.Operators.GetComboOperators(selected);							case "InvRouteTo":
				return IQApp.Operators.GetComboOperators(selected);							case "InvFerryName":
				return IQApp.Operators.GetTextOperators(selected);							case "InvFerryDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvFerryTime":
				return IQApp.Operators.GetTextOperators(selected);							case "InvTo":
				return IQApp.Operators.GetComboOperators(selected);							case "InvDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "InvNet":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvVAT":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvTotal":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvNote1":
				return IQApp.Operators.GetComboOperators(selected);							case "InvNote2":
				return IQApp.Operators.GetComboOperators(selected);							case "InvNote3":
				return IQApp.Operators.GetComboOperators(selected);							case "InvPrintBatch":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvJobLetter":
				return IQApp.Operators.GetTextOperators(selected);							case "InvToExport":
				return IQApp.Operators.GetBooleanOperators(selected);							case "InvExported":
				return IQApp.Operators.GetBooleanOperators(selected);							case "InvCustOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "InvToId":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "InvTown":
				return IQApp.Operators.GetTextOperators(selected);							case "InvPC":
				return IQApp.Operators.GetTextOperators(selected);							case "InvImpExp":
				return IQApp.Operators.GetComboOperators(selected);							case "InvCurr":
				return IQApp.Operators.GetComboOperators(selected);							case "InvExchRate":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvTescoRef":
				return IQApp.Operators.GetTextOperators(selected);							case "InvBelongsPInv":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvISPInv":
				return IQApp.Operators.GetBooleanOperators(selected);							case "InvProforma":
				return IQApp.Operators.GetBooleanOperators(selected);							case "InvSentTradeshift":
				return IQApp.Operators.GetBooleanOperators(selected);							case "InvSentToClient":
				return IQApp.Operators.GetBooleanOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'InvId', 'Invoice Number'
					union select 'InvFreightDuty', 'Freight or Duty'
					union select 'InvJobNo', 'Job No'
					union select 'InvOrder', 'Order Number'
					union select 'InvVehicle', 'Vehicle'
					union select 'InvTrailer', 'Trailer'
					union select 'InvRouteFrom', 'Route From'
					union select 'InvRouteTo', 'Route To'
					union select 'InvFerryName', 'Ferry Name'
					union select 'InvFerryDate', 'Ferry Date'
					union select 'InvFerryTime', 'Ferry Time'
					union select 'InvTo', 'Invoice To'
					union select 'InvDesc', 'Invoice Description'
					union select 'InvNet', 'Net Amount'
					union select 'InvVAT', 'VAT Amount'
					union select 'InvTotal', 'Invoice Total'
					union select 'InvNote1', 'Comment 1'
					union select 'InvNote2', 'Comment 2'
					union select 'InvNote3', 'Comment 3'
					union select 'InvPrintBatch', 'Print Batch No'
					union select 'InvDate', 'Invoice Date'
					union select 'InvJobLetter', 'Job Letter'
					union select 'InvToExport', 'Send to Dover'
					union select 'InvExported', 'Sent to Dover'
					union select 'InvCustOrd', 'Client Order No'
					union select 'InvToId', 'Invoice To ID'
					union select 'InvAddr', 'Inv Co Address1'
					union select 'InvTown', 'Inv Co Town'
					union select 'InvPC', 'Inv Co Postcode'
					union select 'InvImpExp', 'Import or Export'
					union select 'InvCurr', 'Currency'
					union select 'InvExchRate', 'Exchange Rate'
					union select 'InvTescoRef', 'Tesco Ref'
					union select 'InvBelongsPInv', 'Belongs to P Inv'
					union select 'InvISPInv', 'Is Period Invoice'
					union select 'InvProforma', 'Proforma'
					union select 'InvSentTradeshift', 'Sent to Tradeshift'
					union select 'InvSentToClient', 'Sent to Client'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "InvId":
					return new Inv_InvIdFieldDef();
							case "InvFreightDuty":
					return new Inv_InvFreightDutyFieldDef();
							case "InvJobNo":
					return new Inv_InvJobNoFieldDef();
							case "InvOrder":
					return new Inv_InvOrderFieldDef();
							case "InvVehicle":
					return new Inv_InvVehicleFieldDef();
							case "InvTrailer":
					return new Inv_InvTrailerFieldDef();
							case "InvRouteFrom":
					return new Inv_InvRouteFromFieldDef();
							case "InvRouteTo":
					return new Inv_InvRouteToFieldDef();
							case "InvFerryName":
					return new Inv_InvFerryNameFieldDef();
							case "InvFerryDate":
					return new Inv_InvFerryDateFieldDef();
							case "InvFerryTime":
					return new Inv_InvFerryTimeFieldDef();
							case "InvTo":
					return new Inv_InvToFieldDef();
							case "InvDesc":
					return new Inv_InvDescFieldDef();
							case "InvNet":
					return new Inv_InvNetFieldDef();
							case "InvVAT":
					return new Inv_InvVATFieldDef();
							case "InvTotal":
					return new Inv_InvTotalFieldDef();
							case "InvNote1":
					return new Inv_InvNote1FieldDef();
							case "InvNote2":
					return new Inv_InvNote2FieldDef();
							case "InvNote3":
					return new Inv_InvNote3FieldDef();
							case "InvPrintBatch":
					return new Inv_InvPrintBatchFieldDef();
							case "InvDate":
					return new Inv_InvDateFieldDef();
							case "InvJobLetter":
					return new Inv_InvJobLetterFieldDef();
							case "InvToExport":
					return new Inv_InvToExportFieldDef();
							case "InvExported":
					return new Inv_InvExportedFieldDef();
							case "InvCustOrd":
					return new Inv_InvCustOrdFieldDef();
							case "InvToId":
					return new Inv_InvToIdFieldDef();
							case "InvAddr":
					return new Inv_InvAddrFieldDef();
							case "InvTown":
					return new Inv_InvTownFieldDef();
							case "InvPC":
					return new Inv_InvPCFieldDef();
							case "InvImpExp":
					return new Inv_InvImpExpFieldDef();
							case "InvCurr":
					return new Inv_InvCurrFieldDef();
							case "InvExchRate":
					return new Inv_InvExchRateFieldDef();
							case "InvTescoRef":
					return new Inv_InvTescoRefFieldDef();
							case "InvBelongsPInv":
					return new Inv_InvBelongsPInvFieldDef();
							case "InvISPInv":
					return new Inv_InvISPInvFieldDef();
							case "InvProforma":
					return new Inv_InvProformaFieldDef();
							case "InvSentTradeshift":
					return new Inv_InvSentTradeshiftFieldDef();
							case "InvSentToClient":
					return new Inv_InvSentToClientFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, InvId as [Description] from Inv 
			where InvId like @q or InvId like @q";
	}
	
}
public class DSTypeInvLine : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "InvLChargeType":
					return "Charge Type";
							case "InvLInvNo":
					return "Invoice Number";
							case "InvLLineNo":
					return "Line Number";
							case "InvLDesc":
					return "Description";
							case "InvLVATCode":
					return "VAT Code";
							case "InvLVATRate":
					return "VAT Rate";
							case "InvLAmt":
					return "Line Amount";
							case "InvLVATAmt":
					return "VAT Amount";
							case "InvLTotal":
					return "Line Total";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "InvLChargeType":
					return 170;
							case "InvLInvNo":
					return 117;
							case "InvLLineNo":
					return 118;
							case "InvLDesc":
					return 119;
							case "InvLVATCode":
					return 120;
							case "InvLVATRate":
					return 121;
							case "InvLAmt":
					return 122;
							case "InvLVATAmt":
					return 123;
							case "InvLTotal":
					return 124;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "InvLChargeType":
				return IQApp.Operators.GetComboOperators(selected);							case "InvLInvNo":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvLLineNo":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvLDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "InvLVATCode":
				return IQApp.Operators.GetComboOperators(selected);							case "InvLVATRate":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvLAmt":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvLVATAmt":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvLTotal":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'InvLChargeType', 'Charge Type'
					union select 'InvLInvNo', 'Invoice Number'
					union select 'InvLLineNo', 'Line Number'
					union select 'InvLDesc', 'Description'
					union select 'InvLVATCode', 'VAT Code'
					union select 'InvLVATRate', 'VAT Rate'
					union select 'InvLAmt', 'Line Amount'
					union select 'InvLVATAmt', 'VAT Amount'
					union select 'InvLTotal', 'Line Total'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "InvLChargeType":
					return new InvLine_InvLChargeTypeFieldDef();
							case "InvLInvNo":
					return new InvLine_InvLInvNoFieldDef();
							case "InvLLineNo":
					return new InvLine_InvLLineNoFieldDef();
							case "InvLDesc":
					return new InvLine_InvLDescFieldDef();
							case "InvLVATCode":
					return new InvLine_InvLVATCodeFieldDef();
							case "InvLVATRate":
					return new InvLine_InvLVATRateFieldDef();
							case "InvLAmt":
					return new InvLine_InvLAmtFieldDef();
							case "InvLVATAmt":
					return new InvLine_InvLVATAmtFieldDef();
							case "InvLTotal":
					return new InvLine_InvLTotalFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, InvLInvNo as [Description] from InvLine 
			where InvLInvNo like @q or InvLInvNo like @q";
	}
	
}
public class DSTypeCN : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "CNId":
					return "Credit Number";
							case "CNImpExp":
					return "Import or Export";
							case "CNJobNo":
					return "Job Number";
							case "CNOrder":
					return "Order Number";
							case "CNVehicle":
					return "Vehicle";
							case "CNTrailer":
					return "Trailer";
							case "CNRouteFrom":
					return "Route From";
							case "CNRouteTo":
					return "Route To";
							case "CNTo":
					return "Credit To";
							case "CNToId":
					return "Credit To ID";
							case "CNDesc":
					return "Credit Description";
							case "CNNet":
					return "Net Amount";
							case "CNVAT":
					return "VAT Amount";
							case "CNTotal":
					return "Credit Total";
							case "CNNote1":
					return "Comment 1";
							case "CNNote2":
					return "Comment 2";
							case "CNDate":
					return "Credit Date";
							case "CNPrintBatch":
					return "Print Batch No";
							case "CNJobLetter":
					return "Job Letter";
							case "CNToExport":
					return "Send to Dover";
							case "CNExported":
					return "Sent to Dover";
							case "CNCustOrd":
					return "Client Order No";
							case "CNCurr":
					return "Currency";
							case "CNExchRate":
					return "Exchange Rate";
							case "CNDutyCN":
					return "Duty CN";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "CNId":
					return 201;
							case "CNImpExp":
					return 202;
							case "CNJobNo":
					return 203;
							case "CNOrder":
					return 204;
							case "CNVehicle":
					return 205;
							case "CNTrailer":
					return 206;
							case "CNRouteFrom":
					return 207;
							case "CNRouteTo":
					return 208;
							case "CNTo":
					return 209;
							case "CNToId":
					return 210;
							case "CNDesc":
					return 211;
							case "CNNet":
					return 212;
							case "CNVAT":
					return 213;
							case "CNTotal":
					return 214;
							case "CNNote1":
					return 215;
							case "CNNote2":
					return 216;
							case "CNDate":
					return 217;
							case "CNPrintBatch":
					return 218;
							case "CNJobLetter":
					return 219;
							case "CNToExport":
					return 220;
							case "CNExported":
					return 221;
							case "CNCustOrd":
					return 222;
							case "CNCurr":
					return 257;
							case "CNExchRate":
					return 258;
							case "CNDutyCN":
					return 251;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "CNId":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNImpExp":
				return IQApp.Operators.GetComboOperators(selected);							case "CNJobNo":
				return IQApp.Operators.GetComboOperators(selected);							case "CNOrder":
				return IQApp.Operators.GetComboOperators(selected);							case "CNVehicle":
				return IQApp.Operators.GetTextOperators(selected);							case "CNTrailer":
				return IQApp.Operators.GetTextOperators(selected);							case "CNRouteFrom":
				return IQApp.Operators.GetComboOperators(selected);							case "CNRouteTo":
				return IQApp.Operators.GetComboOperators(selected);							case "CNTo":
				return IQApp.Operators.GetComboOperators(selected);							case "CNToId":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "CNNet":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNVAT":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNTotal":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNNote1":
				return IQApp.Operators.GetComboOperators(selected);							case "CNNote2":
				return IQApp.Operators.GetComboOperators(selected);							case "CNDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNPrintBatch":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNJobLetter":
				return IQApp.Operators.GetTextOperators(selected);							case "CNToExport":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CNExported":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CNCustOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "CNCurr":
				return IQApp.Operators.GetComboOperators(selected);							case "CNExchRate":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNDutyCN":
				return IQApp.Operators.GetBooleanOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'CNId', 'Credit Number'
					union select 'CNImpExp', 'Import or Export'
					union select 'CNJobNo', 'Job Number'
					union select 'CNOrder', 'Order Number'
					union select 'CNVehicle', 'Vehicle'
					union select 'CNTrailer', 'Trailer'
					union select 'CNRouteFrom', 'Route From'
					union select 'CNRouteTo', 'Route To'
					union select 'CNTo', 'Credit To'
					union select 'CNToId', 'Credit To ID'
					union select 'CNDesc', 'Credit Description'
					union select 'CNNet', 'Net Amount'
					union select 'CNVAT', 'VAT Amount'
					union select 'CNTotal', 'Credit Total'
					union select 'CNNote1', 'Comment 1'
					union select 'CNNote2', 'Comment 2'
					union select 'CNDate', 'Credit Date'
					union select 'CNPrintBatch', 'Print Batch No'
					union select 'CNJobLetter', 'Job Letter'
					union select 'CNToExport', 'Send to Dover'
					union select 'CNExported', 'Sent to Dover'
					union select 'CNCustOrd', 'Client Order No'
					union select 'CNCurr', 'Currency'
					union select 'CNExchRate', 'Exchange Rate'
					union select 'CNDutyCN', 'Duty CN'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "CNId":
					return new CN_CNIdFieldDef();
							case "CNImpExp":
					return new CN_CNImpExpFieldDef();
							case "CNJobNo":
					return new CN_CNJobNoFieldDef();
							case "CNOrder":
					return new CN_CNOrderFieldDef();
							case "CNVehicle":
					return new CN_CNVehicleFieldDef();
							case "CNTrailer":
					return new CN_CNTrailerFieldDef();
							case "CNRouteFrom":
					return new CN_CNRouteFromFieldDef();
							case "CNRouteTo":
					return new CN_CNRouteToFieldDef();
							case "CNTo":
					return new CN_CNToFieldDef();
							case "CNToId":
					return new CN_CNToIdFieldDef();
							case "CNDesc":
					return new CN_CNDescFieldDef();
							case "CNNet":
					return new CN_CNNetFieldDef();
							case "CNVAT":
					return new CN_CNVATFieldDef();
							case "CNTotal":
					return new CN_CNTotalFieldDef();
							case "CNNote1":
					return new CN_CNNote1FieldDef();
							case "CNNote2":
					return new CN_CNNote2FieldDef();
							case "CNDate":
					return new CN_CNDateFieldDef();
							case "CNPrintBatch":
					return new CN_CNPrintBatchFieldDef();
							case "CNJobLetter":
					return new CN_CNJobLetterFieldDef();
							case "CNToExport":
					return new CN_CNToExportFieldDef();
							case "CNExported":
					return new CN_CNExportedFieldDef();
							case "CNCustOrd":
					return new CN_CNCustOrdFieldDef();
							case "CNCurr":
					return new CN_CNCurrFieldDef();
							case "CNExchRate":
					return new CN_CNExchRateFieldDef();
							case "CNDutyCN":
					return new CN_CNDutyCNFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, CNId as [Description] from CN 
			where CNId like @q or CNId like @q";
	}
	
}
public class DSTypeUKOrder : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "UKOInvoiced":
					return "Invoiced";
							case "UKOCreatedBy":
					return "Created By";
							case "UKOWeight":
					return "Weight";
							case "UKOId":
					return "UK Order ID";
							case "UKOCollDate":
					return "Collection Date";
							case "UKOCustRef":
					return "Customer Ref";
							case "UKOCust":
					return "Customer Name";
							case "UKOCollFrom":
					return "Collection From";
							case "UKODelTo":
					return "Delivery To";
							case "UKODesc":
					return "Description";
							case "UKOQty":
					return "Quantity";
							case "UKOTransp":
					return "Haulier Name";
							case "UKOChargeCust":
					return "Charge Customer";
							case "UKOFTLCost":
					return "Cost to FTL";
							case "UKODelProof":
					return "Proof of Delivery";
							case "UKOJobNo":
					return "Job Number";
							case "UKONotes":
					return "Comments";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "UKOInvoiced":
					return 240;
							case "UKOCreatedBy":
					return 290;
							case "UKOWeight":
					return 194;
							case "UKOId":
					return 129;
							case "UKOCollDate":
					return 130;
							case "UKOCustRef":
					return 131;
							case "UKOCust":
					return 132;
							case "UKOCollFrom":
					return 133;
							case "UKODelTo":
					return 134;
							case "UKODesc":
					return 135;
							case "UKOQty":
					return 136;
							case "UKOTransp":
					return 137;
							case "UKOChargeCust":
					return 138;
							case "UKOFTLCost":
					return 139;
							case "UKODelProof":
					return 140;
							case "UKOJobNo":
					return 141;
							case "UKONotes":
					return 142;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "UKOInvoiced":
				return IQApp.Operators.GetBooleanOperators(selected);							case "UKOCreatedBy":
				return IQApp.Operators.GetComboOperators(selected);							case "UKOWeight":
				return IQApp.Operators.GetTextOperators(selected);							case "UKOId":
				return IQApp.Operators.GetNumberOperators(selected);							case "UKOCollDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "UKOCustRef":
				return IQApp.Operators.GetTextOperators(selected);							case "UKOCust":
				return IQApp.Operators.GetComboOperators(selected);							case "UKOCollFrom":
				return IQApp.Operators.GetTextOperators(selected);							case "UKODelTo":
				return IQApp.Operators.GetTextOperators(selected);							case "UKODesc":
				return IQApp.Operators.GetTextOperators(selected);							case "UKOQty":
				return IQApp.Operators.GetTextOperators(selected);							case "UKOTransp":
				return IQApp.Operators.GetComboOperators(selected);							case "UKOChargeCust":
				return IQApp.Operators.GetNumberOperators(selected);							case "UKOFTLCost":
				return IQApp.Operators.GetNumberOperators(selected);							case "UKODelProof":
				return IQApp.Operators.GetBooleanOperators(selected);							case "UKOJobNo":
				return IQApp.Operators.GetTextOperators(selected);							case "UKONotes":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'UKOInvoiced', 'Invoiced'
					union select 'UKOCreatedBy', 'Created By'
					union select 'UKOWeight', 'Weight'
					union select 'UKOId', 'UK Order ID'
					union select 'UKOCollDate', 'Collection Date'
					union select 'UKOCustRef', 'Customer Ref'
					union select 'UKOCust', 'Customer Name'
					union select 'UKOCollFrom', 'Collection From'
					union select 'UKODelTo', 'Delivery To'
					union select 'UKODesc', 'Description'
					union select 'UKOQty', 'Quantity'
					union select 'UKOTransp', 'Haulier Name'
					union select 'UKOChargeCust', 'Charge Customer'
					union select 'UKOFTLCost', 'Cost to FTL'
					union select 'UKODelProof', 'Proof of Delivery'
					union select 'UKOJobNo', 'Job Number'
					union select 'UKONotes', 'Comments'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "UKOInvoiced":
					return new UKOrder_UKOInvoicedFieldDef();
							case "UKOCreatedBy":
					return new UKOrder_UKOCreatedByFieldDef();
							case "UKOWeight":
					return new UKOrder_UKOWeightFieldDef();
							case "UKOId":
					return new UKOrder_UKOIdFieldDef();
							case "UKOCollDate":
					return new UKOrder_UKOCollDateFieldDef();
							case "UKOCustRef":
					return new UKOrder_UKOCustRefFieldDef();
							case "UKOCust":
					return new UKOrder_UKOCustFieldDef();
							case "UKOCollFrom":
					return new UKOrder_UKOCollFromFieldDef();
							case "UKODelTo":
					return new UKOrder_UKODelToFieldDef();
							case "UKODesc":
					return new UKOrder_UKODescFieldDef();
							case "UKOQty":
					return new UKOrder_UKOQtyFieldDef();
							case "UKOTransp":
					return new UKOrder_UKOTranspFieldDef();
							case "UKOChargeCust":
					return new UKOrder_UKOChargeCustFieldDef();
							case "UKOFTLCost":
					return new UKOrder_UKOFTLCostFieldDef();
							case "UKODelProof":
					return new UKOrder_UKODelProofFieldDef();
							case "UKOJobNo":
					return new UKOrder_UKOJobNoFieldDef();
							case "UKONotes":
					return new UKOrder_UKONotesFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, UKOId as [Description] from UKOrder 
			where UKOId like @q or UKOId like @q";
	}
	
}
public class DSTypeFerryRoute : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "FRCode":
					return "Route Code";
							case "FRName":
					return "Route";
							case "FRId":
					return "Route Id";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "FRCode":
					return 86;
							case "FRName":
					return 87;
							case "FRId":
					return 429;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "FRCode":
				return IQApp.Operators.GetTextOperators(selected);							case "FRName":
				return IQApp.Operators.GetTextOperators(selected);							case "FRId":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'FRCode', 'Route Code'
					union select 'FRName', 'Route'
					union select 'FRId', 'Route Id'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "FRCode":
					return new FerryRoute_FRCodeFieldDef();
							case "FRName":
					return new FerryRoute_FRNameFieldDef();
							case "FRId":
					return new FerryRoute_FRIdFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, FRName as [Description] from FerryRoute 
			where FRId like @q or FRName like @q";
	}
	
}
public class DSTypeInvComment : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "InvCId":
					return "Inv Comment ID";
							case "InvCName":
					return "Inv Comment";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "InvCId":
					return 115;
							case "InvCName":
					return 116;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "InvCId":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvCName":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'InvCId', 'Inv Comment ID'
					union select 'InvCName', 'Inv Comment'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "InvCId":
					return new InvComment_InvCIdFieldDef();
							case "InvCName":
					return new InvComment_InvCNameFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, InvCId as [Description] from InvComment 
			where InvCId like @q or InvCId like @q";
	}
	
}
public class DSTypeVATCodes : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "VATCode":
					return "VAT Code";
							case "VATName":
					return "Description";
							case "VATRate":
					return "VAT Rate";
							case "VATId":
					return "VAT Id";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "VATCode":
					return 125;
							case "VATName":
					return 126;
							case "VATRate":
					return 127;
							case "VATId":
					return 430;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "VATCode":
				return IQApp.Operators.GetTextOperators(selected);							case "VATName":
				return IQApp.Operators.GetTextOperators(selected);							case "VATRate":
				return IQApp.Operators.GetNumberOperators(selected);							case "VATId":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'VATCode', 'VAT Code'
					union select 'VATName', 'Description'
					union select 'VATRate', 'VAT Rate'
					union select 'VATId', 'VAT Id'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "VATCode":
					return new VATCodes_VATCodeFieldDef();
							case "VATName":
					return new VATCodes_VATNameFieldDef();
							case "VATRate":
					return new VATCodes_VATRateFieldDef();
							case "VATId":
					return new VATCodes_VATIdFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, VATCode as [Description] from VATCodes 
			where VATId like @q or VATCode like @q";
	}
	
}
public class DSTypeJobCost : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "JobCJobNo":
					return "Job Number";
							case "JobCServProvId":
					return "Service Provider Id";
							case "JobCServProv":
					return "Service Provider";
							case "JobCDesc":
					return "Description";
							case "JobCInvAmt":
					return "Invoice Amount";
							case "JobCInvNo":
					return "Invoice Number";
							case "JobCInvDate":
					return "Invoice Date";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "JobCJobNo":
					return 163;
							case "JobCServProvId":
					return 164;
							case "JobCServProv":
					return 165;
							case "JobCDesc":
					return 166;
							case "JobCInvAmt":
					return 167;
							case "JobCInvNo":
					return 168;
							case "JobCInvDate":
					return 169;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "JobCJobNo":
				return IQApp.Operators.GetComboOperators(selected);							case "JobCServProvId":
				return IQApp.Operators.GetNumberOperators(selected);							case "JobCServProv":
				return IQApp.Operators.GetComboOperators(selected);							case "JobCDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "JobCInvAmt":
				return IQApp.Operators.GetNumberOperators(selected);							case "JobCInvNo":
				return IQApp.Operators.GetTextOperators(selected);							case "JobCInvDate":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'JobCJobNo', 'Job Number'
					union select 'JobCServProvId', 'Service Provider Id'
					union select 'JobCServProv', 'Service Provider'
					union select 'JobCDesc', 'Description'
					union select 'JobCInvAmt', 'Invoice Amount'
					union select 'JobCInvNo', 'Invoice Number'
					union select 'JobCInvDate', 'Invoice Date'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "JobCJobNo":
					return new JobCost_JobCJobNoFieldDef();
							case "JobCServProvId":
					return new JobCost_JobCServProvIdFieldDef();
							case "JobCServProv":
					return new JobCost_JobCServProvFieldDef();
							case "JobCDesc":
					return new JobCost_JobCDescFieldDef();
							case "JobCInvAmt":
					return new JobCost_JobCInvAmtFieldDef();
							case "JobCInvNo":
					return new JobCost_JobCInvNoFieldDef();
							case "JobCInvDate":
					return new JobCost_JobCInvDateFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, JobCJobNo as [Description] from JobCost 
			where JobCJobNo like @q or JobCJobNo like @q";
	}
	
}
public class DSTypeCertShip : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "CSId":
					return "Certificate Number";
							case "CSJobNo":
					return "Job Number";
							case "CSJobLetter":
					return "Job Letter";
							case "CSOrder":
					return "Order Number";
							case "CSCust":
					return "Client";
							case "CSCustOrd":
					return "Client Order No";
							case "CSDelPoint":
					return "Delivery Point";
							case "CSGoodsDesc":
					return "Goods Desc";
							case "CSWeight":
					return "Weight";
							case "CSVehicle":
					return "Vehicle";
							case "CSRoute":
					return "Route";
							case "CSShip":
					return "Ship";
							case "CSDate":
					return "Date";
							case "CSTime":
					return "Time";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "CSId":
					return 178;
							case "CSJobNo":
					return 179;
							case "CSJobLetter":
					return 180;
							case "CSOrder":
					return 181;
							case "CSCust":
					return 182;
							case "CSCustOrd":
					return 183;
							case "CSDelPoint":
					return 184;
							case "CSGoodsDesc":
					return 185;
							case "CSWeight":
					return 186;
							case "CSVehicle":
					return 187;
							case "CSRoute":
					return 188;
							case "CSShip":
					return 189;
							case "CSDate":
					return 190;
							case "CSTime":
					return 191;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "CSId":
				return IQApp.Operators.GetNumberOperators(selected);							case "CSJobNo":
				return IQApp.Operators.GetComboOperators(selected);							case "CSJobLetter":
				return IQApp.Operators.GetTextOperators(selected);							case "CSOrder":
				return IQApp.Operators.GetComboOperators(selected);							case "CSCust":
				return IQApp.Operators.GetComboOperators(selected);							case "CSCustOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "CSDelPoint":
				return IQApp.Operators.GetComboOperators(selected);							case "CSGoodsDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "CSWeight":
				return IQApp.Operators.GetTextOperators(selected);							case "CSVehicle":
				return IQApp.Operators.GetTextOperators(selected);							case "CSRoute":
				return IQApp.Operators.GetTextOperators(selected);							case "CSShip":
				return IQApp.Operators.GetTextOperators(selected);							case "CSDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "CSTime":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'CSId', 'Certificate Number'
					union select 'CSJobNo', 'Job Number'
					union select 'CSJobLetter', 'Job Letter'
					union select 'CSOrder', 'Order Number'
					union select 'CSCust', 'Client'
					union select 'CSCustOrd', 'Client Order No'
					union select 'CSDelPoint', 'Delivery Point'
					union select 'CSGoodsDesc', 'Goods Desc'
					union select 'CSWeight', 'Weight'
					union select 'CSVehicle', 'Vehicle'
					union select 'CSRoute', 'Route'
					union select 'CSShip', 'Ship'
					union select 'CSDate', 'Date'
					union select 'CSTime', 'Time'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "CSId":
					return new CertShip_CSIdFieldDef();
							case "CSJobNo":
					return new CertShip_CSJobNoFieldDef();
							case "CSJobLetter":
					return new CertShip_CSJobLetterFieldDef();
							case "CSOrder":
					return new CertShip_CSOrderFieldDef();
							case "CSCust":
					return new CertShip_CSCustFieldDef();
							case "CSCustOrd":
					return new CertShip_CSCustOrdFieldDef();
							case "CSDelPoint":
					return new CertShip_CSDelPointFieldDef();
							case "CSGoodsDesc":
					return new CertShip_CSGoodsDescFieldDef();
							case "CSWeight":
					return new CertShip_CSWeightFieldDef();
							case "CSVehicle":
					return new CertShip_CSVehicleFieldDef();
							case "CSRoute":
					return new CertShip_CSRouteFieldDef();
							case "CSShip":
					return new CertShip_CSShipFieldDef();
							case "CSDate":
					return new CertShip_CSDateFieldDef();
							case "CSTime":
					return new CertShip_CSTimeFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, CSId as [Description] from CertShip 
			where CSId like @q or CSId like @q";
	}
	
}
public class DSTypeCNLine : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "CNLNo":
					return "Credit Number";
							case "CNLLineNo":
					return "Line Number";
							case "CNLDesc":
					return "Description";
							case "CNLVATCode":
					return "VAT Code";
							case "CNLVATRate":
					return "VAT Rate";
							case "CNLAmt":
					return "Line Amount";
							case "CNLVATAmt":
					return "VAT Amount";
							case "CNLTotal":
					return "Line Total";
							case "CNLChargeType":
					return "Charge Type";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "CNLNo":
					return 223;
							case "CNLLineNo":
					return 224;
							case "CNLDesc":
					return 225;
							case "CNLVATCode":
					return 226;
							case "CNLVATRate":
					return 227;
							case "CNLAmt":
					return 228;
							case "CNLVATAmt":
					return 229;
							case "CNLTotal":
					return 230;
							case "CNLChargeType":
					return 231;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "CNLNo":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNLLineNo":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNLDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "CNLVATCode":
				return IQApp.Operators.GetComboOperators(selected);							case "CNLVATRate":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNLAmt":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNLVATAmt":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNLTotal":
				return IQApp.Operators.GetNumberOperators(selected);							case "CNLChargeType":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'CNLNo', 'Credit Number'
					union select 'CNLLineNo', 'Line Number'
					union select 'CNLDesc', 'Description'
					union select 'CNLVATCode', 'VAT Code'
					union select 'CNLVATRate', 'VAT Rate'
					union select 'CNLAmt', 'Line Amount'
					union select 'CNLVATAmt', 'VAT Amount'
					union select 'CNLTotal', 'Line Total'
					union select 'CNLChargeType', 'Charge Type'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "CNLNo":
					return new CNLine_CNLNoFieldDef();
							case "CNLLineNo":
					return new CNLine_CNLLineNoFieldDef();
							case "CNLDesc":
					return new CNLine_CNLDescFieldDef();
							case "CNLVATCode":
					return new CNLine_CNLVATCodeFieldDef();
							case "CNLVATRate":
					return new CNLine_CNLVATRateFieldDef();
							case "CNLAmt":
					return new CNLine_CNLAmtFieldDef();
							case "CNLVATAmt":
					return new CNLine_CNLVATAmtFieldDef();
							case "CNLTotal":
					return new CNLine_CNLTotalFieldDef();
							case "CNLChargeType":
					return new CNLine_CNLChargeTypeFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, CNLNo as [Description] from CNLine 
			where CNLNo like @q or CNLNo like @q";
	}
	
}
public class DSTypeDriver : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "DrvId":
					return "Driver ID";
							case "DrvName":
					return "Driver Name";
							case "DrvVehicle":
					return "Vehicle Assigned To";
							case "DrvActive":
					return "Active";
							case "DrvSDate":
					return "Start Date";
							case "DrvPspExpiry":
					return "Passport Expiry";
							case "DrvAddress":
					return "Address";
							case "DrvDoB":
					return "Date Of Birth";
							case "DrvEmpStart":
					return "Emp Start Date";
							case "DrvLicense":
					return "Drivers License No";
							case "DrvTacho":
					return "Drivers Digital Tacho Card No";
							case "DrvCPC":
					return "Drivers CPC Card No";
							case "DrvPpNo":
					return "Passport No";
							case "DrvNextOfKin":
					return "Next of Kin";
							case "DrvMobile":
					return "Mobile Number";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "DrvId":
					return 232;
							case "DrvName":
					return 233;
							case "DrvVehicle":
					return 234;
							case "DrvActive":
					return 282;
							case "DrvSDate":
					return 273;
							case "DrvPspExpiry":
					return 772;
							case "DrvAddress":
					return 793;
							case "DrvDoB":
					return 794;
							case "DrvEmpStart":
					return 795;
							case "DrvLicense":
					return 796;
							case "DrvTacho":
					return 797;
							case "DrvCPC":
					return 798;
							case "DrvPpNo":
					return 799;
							case "DrvNextOfKin":
					return 800;
							case "DrvMobile":
					return 786;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "DrvId":
				return IQApp.Operators.GetNumberOperators(selected);							case "DrvName":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvVehicle":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvActive":
				return IQApp.Operators.GetBooleanOperators(selected);							case "DrvSDate":
				return IQApp.Operators.GetComboOperators(selected);							case "DrvPspExpiry":
				return IQApp.Operators.GetNumberOperators(selected);							case "DrvAddress":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvDoB":
				return IQApp.Operators.GetNumberOperators(selected);							case "DrvEmpStart":
				return IQApp.Operators.GetNumberOperators(selected);							case "DrvLicense":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvTacho":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvCPC":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvPpNo":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvNextOfKin":
				return IQApp.Operators.GetTextOperators(selected);							case "DrvMobile":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'DrvId', 'Driver ID'
					union select 'DrvName', 'Driver Name'
					union select 'DrvVehicle', 'Vehicle Assigned To'
					union select 'DrvActive', 'Active'
					union select 'DrvSDate', 'Start Date'
					union select 'DrvPspExpiry', 'Passport Expiry'
					union select 'DrvAddress', 'Address'
					union select 'DrvDoB', 'Date Of Birth'
					union select 'DrvEmpStart', 'Emp Start Date'
					union select 'DrvLicense', 'Drivers License No'
					union select 'DrvTacho', 'Drivers Digital Tacho Card No'
					union select 'DrvCPC', 'Drivers CPC Card No'
					union select 'DrvPpNo', 'Passport No'
					union select 'DrvNextOfKin', 'Next of Kin'
					union select 'DrvMobile', 'Mobile Number'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "DrvId":
					return new Driver_DrvIdFieldDef();
							case "DrvName":
					return new Driver_DrvNameFieldDef();
							case "DrvVehicle":
					return new Driver_DrvVehicleFieldDef();
							case "DrvActive":
					return new Driver_DrvActiveFieldDef();
							case "DrvSDate":
					return new Driver_DrvSDateFieldDef();
							case "DrvPspExpiry":
					return new Driver_DrvPspExpiryFieldDef();
							case "DrvAddress":
					return new Driver_DrvAddressFieldDef();
							case "DrvDoB":
					return new Driver_DrvDoBFieldDef();
							case "DrvEmpStart":
					return new Driver_DrvEmpStartFieldDef();
							case "DrvLicense":
					return new Driver_DrvLicenseFieldDef();
							case "DrvTacho":
					return new Driver_DrvTachoFieldDef();
							case "DrvCPC":
					return new Driver_DrvCPCFieldDef();
							case "DrvPpNo":
					return new Driver_DrvPpNoFieldDef();
							case "DrvNextOfKin":
					return new Driver_DrvNextOfKinFieldDef();
							case "DrvMobile":
					return new Driver_DrvMobileFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, DrvName as [Description] from Driver 
			where DrvId like @q or DrvName like @q";
	}
	
}
public class DSTypeExchRate : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "ExRSDate":
					return "From";
							case "ExREDate":
					return "To";
							case "ExRId":
					return "Period Rate ID";
							case "ExRName":
					return "Period Rate";
							case "ExRRate":
					return "Rate";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "ExRSDate":
					return 336;
							case "ExREDate":
					return 337;
							case "ExRId":
					return 254;
							case "ExRName":
					return 255;
							case "ExRRate":
					return 256;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "ExRSDate":
				return IQApp.Operators.GetTextOperators(selected);							case "ExREDate":
				return IQApp.Operators.GetTextOperators(selected);							case "ExRId":
				return IQApp.Operators.GetNumberOperators(selected);							case "ExRName":
				return IQApp.Operators.GetTextOperators(selected);							case "ExRRate":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'ExRSDate', 'From'
					union select 'ExREDate', 'To'
					union select 'ExRId', 'Period Rate ID'
					union select 'ExRName', 'Period Rate'
					union select 'ExRRate', 'Rate'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "ExRSDate":
					return new ExchRate_ExRSDateFieldDef();
							case "ExREDate":
					return new ExchRate_ExREDateFieldDef();
							case "ExRId":
					return new ExchRate_ExRIdFieldDef();
							case "ExRName":
					return new ExchRate_ExRNameFieldDef();
							case "ExRRate":
					return new ExchRate_ExRRateFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, ExRName as [Description] from ExchRate 
			where ExRId like @q or ExRName like @q";
	}
	
}
public class DSTypeTrailer : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "TrlFleetNo":
					return "Fleet Number";
							case "TrlLastServ":
					return "Last Service";
							case "TrlNextServDue":
					return "Next Service Due";
							case "TrlDaysRem":
					return "Days Remaining";
							case "TrlLastMOT":
					return "Last MOT";
							case "TrlNextMOTDue":
					return "Next MOT Due";
							case "TrlStatus":
					return "Status";
							case "TrlNotes":
					return "Comments";
							case "TrlId":
					return "Trailer Id";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "TrlFleetNo":
					return 259;
							case "TrlLastServ":
					return 260;
							case "TrlNextServDue":
					return 261;
							case "TrlDaysRem":
					return 262;
							case "TrlLastMOT":
					return 263;
							case "TrlNextMOTDue":
					return 264;
							case "TrlStatus":
					return 265;
							case "TrlNotes":
					return 266;
							case "TrlId":
					return 431;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "TrlFleetNo":
				return IQApp.Operators.GetTextOperators(selected);							case "TrlLastServ":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrlNextServDue":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrlDaysRem":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrlLastMOT":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrlNextMOTDue":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrlStatus":
				return IQApp.Operators.GetTextOperators(selected);							case "TrlNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "TrlId":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'TrlFleetNo', 'Fleet Number'
					union select 'TrlLastServ', 'Last Service'
					union select 'TrlNextServDue', 'Next Service Due'
					union select 'TrlDaysRem', 'Days Remaining'
					union select 'TrlLastMOT', 'Last MOT'
					union select 'TrlNextMOTDue', 'Next MOT Due'
					union select 'TrlStatus', 'Status'
					union select 'TrlNotes', 'Comments'
					union select 'TrlId', 'Trailer Id'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "TrlFleetNo":
					return new Trailer_TrlFleetNoFieldDef();
							case "TrlLastServ":
					return new Trailer_TrlLastServFieldDef();
							case "TrlNextServDue":
					return new Trailer_TrlNextServDueFieldDef();
							case "TrlDaysRem":
					return new Trailer_TrlDaysRemFieldDef();
							case "TrlLastMOT":
					return new Trailer_TrlLastMOTFieldDef();
							case "TrlNextMOTDue":
					return new Trailer_TrlNextMOTDueFieldDef();
							case "TrlStatus":
					return new Trailer_TrlStatusFieldDef();
							case "TrlNotes":
					return new Trailer_TrlNotesFieldDef();
							case "TrlId":
					return new Trailer_TrlIdFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, TrlFleetNo as [Description] from Trailer 
			where TrlId like @q or TrlFleetNo like @q";
	}
	
}
public class DSTypePeriodInv : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "PInvId":
					return "Period Inv No";
							case "PInvName":
					return "Include Invoice";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "PInvId":
					return 271;
							case "PInvName":
					return 272;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "PInvId":
				return IQApp.Operators.GetNumberOperators(selected);							case "PInvName":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'PInvId', 'Period Inv No'
					union select 'PInvName', 'Include Invoice'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "PInvId":
					return new PeriodInv_PInvIdFieldDef();
							case "PInvName":
					return new PeriodInv_PInvNameFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, PInvId as [Description] from PeriodInv 
			where PInvId like @q or PInvId like @q";
	}
	
}
public class DSTypeWeek : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "WkBelongsTo":
					return "Belongs to Period";
							case "WkId":
					return "Week ID";
							case "WkSDate":
					return "Week Start (Mon)";
							case "WkEDate":
					return "Week End (Sun)";
							case "WkSDateText":
					return "Monday Text";
							case "WkEDateText":
					return "Sunday Text";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "WkBelongsTo":
					return 284;
							case "WkId":
					return 279;
							case "WkSDate":
					return 280;
							case "WkEDate":
					return 281;
							case "WkSDateText":
					return 426;
							case "WkEDateText":
					return 427;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "WkBelongsTo":
				return IQApp.Operators.GetNumberOperators(selected);							case "WkId":
				return IQApp.Operators.GetNumberOperators(selected);							case "WkSDate":
				return IQApp.Operators.GetTextOperators(selected);							case "WkEDate":
				return IQApp.Operators.GetTextOperators(selected);							case "WkSDateText":
				return IQApp.Operators.GetTextOperators(selected);							case "WkEDateText":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'WkBelongsTo', 'Belongs to Period'
					union select 'WkId', 'Week ID'
					union select 'WkSDate', 'Week Start (Mon)'
					union select 'WkEDate', 'Week End (Sun)'
					union select 'WkSDateText', 'Monday Text'
					union select 'WkEDateText', 'Sunday Text'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "WkBelongsTo":
					return new Week_WkBelongsToFieldDef();
							case "WkId":
					return new Week_WkIdFieldDef();
							case "WkSDate":
					return new Week_WkSDateFieldDef();
							case "WkEDate":
					return new Week_WkEDateFieldDef();
							case "WkSDateText":
					return new Week_WkSDateTextFieldDef();
							case "WkEDateText":
					return new Week_WkEDateTextFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, WkId as [Description] from Week 
			where WkId like @q or WkId like @q";
	}
	
}
public class DSTypeDriverHrs : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "DrvHDriver":
					return "Driver";
							case "DrvHWk":
					return "Week";
							case "DrvHHrs":
					return "Hours";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "DrvHDriver":
					return 276;
							case "DrvHWk":
					return 277;
							case "DrvHHrs":
					return 278;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "DrvHDriver":
				return IQApp.Operators.GetComboOperators(selected);							case "DrvHWk":
				return IQApp.Operators.GetComboOperators(selected);							case "DrvHHrs":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'DrvHDriver', 'Driver'
					union select 'DrvHWk', 'Week'
					union select 'DrvHHrs', 'Hours'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "DrvHDriver":
					return new DriverHrs_DrvHDriverFieldDef();
							case "DrvHWk":
					return new DriverHrs_DrvHWkFieldDef();
							case "DrvHHrs":
					return new DriverHrs_DrvHHrsFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, DrvHDriver as [Description] from DriverHrs 
			where DrvHDriver like @q or DrvHDriver like @q";
	}
	
}
public class DSTypeInvBatch : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "InvBId":
					return "Batch Number";
							case "InvBType":
					return "Invoice Type";
							case "InvBPrintedOn":
					return "Printed On";
							case "InvBExportedDate":
					return "Sent to Dover On";
							case "InvBExported":
					return "Sent";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "InvBId":
					return 292;
							case "InvBType":
					return 293;
							case "InvBPrintedOn":
					return 294;
							case "InvBExportedDate":
					return 295;
							case "InvBExported":
					return 296;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "InvBId":
				return IQApp.Operators.GetNumberOperators(selected);							case "InvBType":
				return IQApp.Operators.GetComboOperators(selected);							case "InvBPrintedOn":
				return IQApp.Operators.GetTextOperators(selected);							case "InvBExportedDate":
				return IQApp.Operators.GetTextOperators(selected);							case "InvBExported":
				return IQApp.Operators.GetBooleanOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'InvBId', 'Batch Number'
					union select 'InvBType', 'Invoice Type'
					union select 'InvBPrintedOn', 'Printed On'
					union select 'InvBExportedDate', 'Sent to Dover On'
					union select 'InvBExported', 'Sent'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "InvBId":
					return new InvBatch_InvBIdFieldDef();
							case "InvBType":
					return new InvBatch_InvBTypeFieldDef();
							case "InvBPrintedOn":
					return new InvBatch_InvBPrintedOnFieldDef();
							case "InvBExportedDate":
					return new InvBatch_InvBExportedDateFieldDef();
							case "InvBExported":
					return new InvBatch_InvBExportedFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, InvBId as [Description] from InvBatch 
			where InvBId like @q or InvBId like @q";
	}
	
}
public class DSTypePackageType : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "PackId":
					return "Package Type ID";
							case "PackName":
					return "Package Type";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "PackId":
					return 318;
							case "PackName":
					return 319;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "PackId":
				return IQApp.Operators.GetNumberOperators(selected);							case "PackName":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'PackId', 'Package Type ID'
					union select 'PackName', 'Package Type'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "PackId":
					return new PackageType_PackIdFieldDef();
							case "PackName":
					return new PackageType_PackNameFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, PackName as [Description] from PackageType 
			where PackId like @q or PackName like @q";
	}
	
}
public class DSTypeBottleSize : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "BSzId":
					return "Size ID";
							case "BSzSize":
					return "Bottle Size";
							case "BSzOrder":
					return "Sort Order";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "BSzId":
					return 320;
							case "BSzSize":
					return 321;
							case "BSzOrder":
					return 324;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "BSzId":
				return IQApp.Operators.GetNumberOperators(selected);							case "BSzSize":
				return IQApp.Operators.GetTextOperators(selected);							case "BSzOrder":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'BSzId', 'Size ID'
					union select 'BSzSize', 'Bottle Size'
					union select 'BSzOrder', 'Sort Order'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "BSzId":
					return new BottleSize_BSzIdFieldDef();
							case "BSzSize":
					return new BottleSize_BSzSizeFieldDef();
							case "BSzOrder":
					return new BottleSize_BSzOrderFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, BSzSize as [Description] from BottleSize 
			where BSzId like @q or BSzSize like @q";
	}
	
}
public class DSTypePalletType : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "PallId":
					return "Pallet Type ID";
							case "PallName":
					return "Pallet Type";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "PallId":
					return 322;
							case "PallName":
					return 323;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "PallId":
				return IQApp.Operators.GetNumberOperators(selected);							case "PallName":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'PallId', 'Pallet Type ID'
					union select 'PallName', 'Pallet Type'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "PallId":
					return new PalletType_PallIdFieldDef();
							case "PallName":
					return new PalletType_PallNameFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, PallName as [Description] from PalletType 
			where PallId like @q or PallName like @q";
	}
	
}
public class DSTypeEADNum : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "EADNo":
					return "eAD Number";
							case "EADOrder":
					return "Order Number";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "EADNo":
					return 342;
							case "EADOrder":
					return 343;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "EADNo":
				return IQApp.Operators.GetTextOperators(selected);							case "EADOrder":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'EADNo', 'eAD Number'
					union select 'EADOrder', 'Order Number'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "EADNo":
					return new EADNum_EADNoFieldDef();
							case "EADOrder":
					return new EADNum_EADOrderFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, EADNo as [Description] from EADNum 
			where EADOrder like @q or EADNo like @q";
	}
	
}
public class DSTypeShipDoc : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "SDId":
					return "Document ID";
							case "SDSuppId":
					return "Supplier ID";
							case "SDSupp":
					return "Supplier Name";
							case "SDSuppAddr":
					return "Supplier Address";
							case "SDSuppVATNo":
					return "Supplier VAT No";
							case "SDTransRef":
					return "Transaction Ref";
							case "SDCompAuth":
					return "Competent Auth";
							case "SDRecipId":
					return "Recipient ID";
							case "SDRecip":
					return "Recipient Name";
							case "SDRecipAddr":
					return "Recipient Address";
							case "SDRecipVATNo":
					return "Recipient VAT No";
							case "SDRefNo":
					return "Reference Number";
							case "SDDeclareDate":
					return "Declaration Date";
							case "SDDelPlace":
					return "Place of delivery";
							case "SDDesc":
					return "Description (1)";
							case "SDCommCode1":
					return "Comm Code (1)";
							case "SDQty1":
					return "Quantity (1)";
							case "SDGWeight1":
					return "Gross weight (1)";
							case "SDNWeight1":
					return "Net weight (1)";
							case "SDValue1":
					return "Value (1)";
							case "SDDesc2":
					return "Description (2)";
							case "SDCommCode2":
					return "Comm Code (2)";
							case "SDQty2":
					return "Quantity (2)";
							case "SDGWeight2":
					return "Gross weight (2)";
							case "SDNWeight2":
					return "Net weight (2)";
							case "SDValue2":
					return "Value (2)";
							case "SDDesc3":
					return "Description (3)";
							case "SDCommCode3":
					return "Comm Code (3)";
							case "SDQty3":
					return "Quantity (3)";
							case "SDGWeight3":
					return "Gross weight (3)";
							case "SDNWeight3":
					return "Net weight (3)";
							case "SDValue3":
					return "Value (3)";
							case "SDDesc4":
					return "Description (4)";
							case "SDCommCode4":
					return "Comm Code (4)";
							case "SDQty4":
					return "Quantity (4)";
							case "SDGWeight4":
					return "Gross weight (4)";
							case "SDNWeight4":
					return "Net weight (4)";
							case "SDValue4":
					return "Value (4)";
							case "SDRecordControl":
					return "Record of Control";
							case "SDSignedBy":
					return "Signed by";
							case "SDSignedByText":
					return "Signed by text";
							case "SDVehNo":
					return "Vehicle / Trailer No";
							case "SDCurr":
					return "Currency";
							case "SDHMRCDets":
					return "Show HMRC details";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "SDId":
					return 347;
							case "SDSuppId":
					return 348;
							case "SDSupp":
					return 349;
							case "SDSuppAddr":
					return 350;
							case "SDSuppVATNo":
					return 351;
							case "SDTransRef":
					return 352;
							case "SDCompAuth":
					return 353;
							case "SDRecipId":
					return 354;
							case "SDRecip":
					return 355;
							case "SDRecipAddr":
					return 356;
							case "SDRecipVATNo":
					return 357;
							case "SDRefNo":
					return 358;
							case "SDDeclareDate":
					return 359;
							case "SDDelPlace":
					return 360;
							case "SDDesc":
					return 361;
							case "SDCommCode1":
					return 362;
							case "SDQty1":
					return 363;
							case "SDGWeight1":
					return 364;
							case "SDNWeight1":
					return 365;
							case "SDValue1":
					return 366;
							case "SDDesc2":
					return 367;
							case "SDCommCode2":
					return 368;
							case "SDQty2":
					return 369;
							case "SDGWeight2":
					return 370;
							case "SDNWeight2":
					return 371;
							case "SDValue2":
					return 372;
							case "SDDesc3":
					return 373;
							case "SDCommCode3":
					return 374;
							case "SDQty3":
					return 375;
							case "SDGWeight3":
					return 376;
							case "SDNWeight3":
					return 377;
							case "SDValue3":
					return 378;
							case "SDDesc4":
					return 379;
							case "SDCommCode4":
					return 380;
							case "SDQty4":
					return 381;
							case "SDGWeight4":
					return 382;
							case "SDNWeight4":
					return 383;
							case "SDValue4":
					return 384;
							case "SDRecordControl":
					return 391;
							case "SDSignedBy":
					return 392;
							case "SDSignedByText":
					return 393;
							case "SDVehNo":
					return 394;
							case "SDCurr":
					return 395;
							case "SDHMRCDets":
					return 396;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "SDId":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDSuppId":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDSupp":
				return IQApp.Operators.GetComboOperators(selected);							case "SDSuppAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "SDSuppVATNo":
				return IQApp.Operators.GetTextOperators(selected);							case "SDTransRef":
				return IQApp.Operators.GetTextOperators(selected);							case "SDCompAuth":
				return IQApp.Operators.GetTextOperators(selected);							case "SDRecipId":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDRecip":
				return IQApp.Operators.GetComboOperators(selected);							case "SDRecipAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "SDRecipVATNo":
				return IQApp.Operators.GetTextOperators(selected);							case "SDRefNo":
				return IQApp.Operators.GetTextOperators(selected);							case "SDDeclareDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDDelPlace":
				return IQApp.Operators.GetTextOperators(selected);							case "SDDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "SDCommCode1":
				return IQApp.Operators.GetTextOperators(selected);							case "SDQty1":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDGWeight1":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDNWeight1":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDValue1":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDDesc2":
				return IQApp.Operators.GetTextOperators(selected);							case "SDCommCode2":
				return IQApp.Operators.GetTextOperators(selected);							case "SDQty2":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDGWeight2":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDNWeight2":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDValue2":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDDesc3":
				return IQApp.Operators.GetTextOperators(selected);							case "SDCommCode3":
				return IQApp.Operators.GetTextOperators(selected);							case "SDQty3":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDGWeight3":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDNWeight3":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDValue3":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDDesc4":
				return IQApp.Operators.GetTextOperators(selected);							case "SDCommCode4":
				return IQApp.Operators.GetTextOperators(selected);							case "SDQty4":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDGWeight4":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDNWeight4":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDValue4":
				return IQApp.Operators.GetNumberOperators(selected);							case "SDRecordControl":
				return IQApp.Operators.GetTextOperators(selected);							case "SDSignedBy":
				return IQApp.Operators.GetComboOperators(selected);							case "SDSignedByText":
				return IQApp.Operators.GetTextOperators(selected);							case "SDVehNo":
				return IQApp.Operators.GetTextOperators(selected);							case "SDCurr":
				return IQApp.Operators.GetComboOperators(selected);							case "SDHMRCDets":
				return IQApp.Operators.GetBooleanOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'SDId', 'Document ID'
					union select 'SDSuppId', 'Supplier ID'
					union select 'SDSupp', 'Supplier Name'
					union select 'SDSuppAddr', 'Supplier Address'
					union select 'SDSuppVATNo', 'Supplier VAT No'
					union select 'SDTransRef', 'Transaction Ref'
					union select 'SDCompAuth', 'Competent Auth'
					union select 'SDRecipId', 'Recipient ID'
					union select 'SDRecip', 'Recipient Name'
					union select 'SDRecipAddr', 'Recipient Address'
					union select 'SDRecipVATNo', 'Recipient VAT No'
					union select 'SDRefNo', 'Reference Number'
					union select 'SDDeclareDate', 'Declaration Date'
					union select 'SDDelPlace', 'Place of delivery'
					union select 'SDDesc', 'Description (1)'
					union select 'SDCommCode1', 'Comm Code (1)'
					union select 'SDQty1', 'Quantity (1)'
					union select 'SDGWeight1', 'Gross weight (1)'
					union select 'SDNWeight1', 'Net weight (1)'
					union select 'SDValue1', 'Value (1)'
					union select 'SDDesc2', 'Description (2)'
					union select 'SDCommCode2', 'Comm Code (2)'
					union select 'SDQty2', 'Quantity (2)'
					union select 'SDGWeight2', 'Gross weight (2)'
					union select 'SDNWeight2', 'Net weight (2)'
					union select 'SDValue2', 'Value (2)'
					union select 'SDDesc3', 'Description (3)'
					union select 'SDCommCode3', 'Comm Code (3)'
					union select 'SDQty3', 'Quantity (3)'
					union select 'SDGWeight3', 'Gross weight (3)'
					union select 'SDNWeight3', 'Net weight (3)'
					union select 'SDValue3', 'Value (3)'
					union select 'SDDesc4', 'Description (4)'
					union select 'SDCommCode4', 'Comm Code (4)'
					union select 'SDQty4', 'Quantity (4)'
					union select 'SDGWeight4', 'Gross weight (4)'
					union select 'SDNWeight4', 'Net weight (4)'
					union select 'SDValue4', 'Value (4)'
					union select 'SDRecordControl', 'Record of Control'
					union select 'SDSignedBy', 'Signed by'
					union select 'SDSignedByText', 'Signed by text'
					union select 'SDVehNo', 'Vehicle / Trailer No'
					union select 'SDCurr', 'Currency'
					union select 'SDHMRCDets', 'Show HMRC details'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "SDId":
					return new ShipDoc_SDIdFieldDef();
							case "SDSuppId":
					return new ShipDoc_SDSuppIdFieldDef();
							case "SDSupp":
					return new ShipDoc_SDSuppFieldDef();
							case "SDSuppAddr":
					return new ShipDoc_SDSuppAddrFieldDef();
							case "SDSuppVATNo":
					return new ShipDoc_SDSuppVATNoFieldDef();
							case "SDTransRef":
					return new ShipDoc_SDTransRefFieldDef();
							case "SDCompAuth":
					return new ShipDoc_SDCompAuthFieldDef();
							case "SDRecipId":
					return new ShipDoc_SDRecipIdFieldDef();
							case "SDRecip":
					return new ShipDoc_SDRecipFieldDef();
							case "SDRecipAddr":
					return new ShipDoc_SDRecipAddrFieldDef();
							case "SDRecipVATNo":
					return new ShipDoc_SDRecipVATNoFieldDef();
							case "SDRefNo":
					return new ShipDoc_SDRefNoFieldDef();
							case "SDDeclareDate":
					return new ShipDoc_SDDeclareDateFieldDef();
							case "SDDelPlace":
					return new ShipDoc_SDDelPlaceFieldDef();
							case "SDDesc":
					return new ShipDoc_SDDescFieldDef();
							case "SDCommCode1":
					return new ShipDoc_SDCommCode1FieldDef();
							case "SDQty1":
					return new ShipDoc_SDQty1FieldDef();
							case "SDGWeight1":
					return new ShipDoc_SDGWeight1FieldDef();
							case "SDNWeight1":
					return new ShipDoc_SDNWeight1FieldDef();
							case "SDValue1":
					return new ShipDoc_SDValue1FieldDef();
							case "SDDesc2":
					return new ShipDoc_SDDesc2FieldDef();
							case "SDCommCode2":
					return new ShipDoc_SDCommCode2FieldDef();
							case "SDQty2":
					return new ShipDoc_SDQty2FieldDef();
							case "SDGWeight2":
					return new ShipDoc_SDGWeight2FieldDef();
							case "SDNWeight2":
					return new ShipDoc_SDNWeight2FieldDef();
							case "SDValue2":
					return new ShipDoc_SDValue2FieldDef();
							case "SDDesc3":
					return new ShipDoc_SDDesc3FieldDef();
							case "SDCommCode3":
					return new ShipDoc_SDCommCode3FieldDef();
							case "SDQty3":
					return new ShipDoc_SDQty3FieldDef();
							case "SDGWeight3":
					return new ShipDoc_SDGWeight3FieldDef();
							case "SDNWeight3":
					return new ShipDoc_SDNWeight3FieldDef();
							case "SDValue3":
					return new ShipDoc_SDValue3FieldDef();
							case "SDDesc4":
					return new ShipDoc_SDDesc4FieldDef();
							case "SDCommCode4":
					return new ShipDoc_SDCommCode4FieldDef();
							case "SDQty4":
					return new ShipDoc_SDQty4FieldDef();
							case "SDGWeight4":
					return new ShipDoc_SDGWeight4FieldDef();
							case "SDNWeight4":
					return new ShipDoc_SDNWeight4FieldDef();
							case "SDValue4":
					return new ShipDoc_SDValue4FieldDef();
							case "SDRecordControl":
					return new ShipDoc_SDRecordControlFieldDef();
							case "SDSignedBy":
					return new ShipDoc_SDSignedByFieldDef();
							case "SDSignedByText":
					return new ShipDoc_SDSignedByTextFieldDef();
							case "SDVehNo":
					return new ShipDoc_SDVehNoFieldDef();
							case "SDCurr":
					return new ShipDoc_SDCurrFieldDef();
							case "SDHMRCDets":
					return new ShipDoc_SDHMRCDetsFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, SDId as [Description] from ShipDoc 
			where SDId like @q or SDId like @q";
	}
	
}
public class DSTypeTruck : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "TrkId":
					return "Truck ID";
							case "TrkName":
					return "Registration No";
							case "TrkNotes":
					return "Notes";
							case "TrkMOTDate":
					return "MOT Date";
							case "TrkTAXDate":
					return "TAX Due Date";
							case "TrkDriver":
					return "Driver";
							case "TrkServiceDue":
					return "Service Due";
							case "TrkAS24No":
					return "AS24 Card No:";
							case "TrkAS24PIN":
					return "AS24 Pin No:";
							case "TrkDKVNo":
					return "DKV No:";
							case "TrkDKVPIN":
					return "DKV Pin No:";
							case "TrkShellNo":
					return "Shell No:";
							case "TrkShellPIN":
					return "Shell Pin No:";
							case "TrkPermitNo":
					return "Permit No:";
							case "TrkTruckMob":
					return "Truck Mobile:";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "TrkId":
					return 397;
							case "TrkName":
					return 398;
							case "TrkNotes":
					return 399;
							case "TrkMOTDate":
					return 767;
							case "TrkTAXDate":
					return 768;
							case "TrkDriver":
					return 769;
							case "TrkServiceDue":
					return 801;
							case "TrkAS24No":
					return 802;
							case "TrkAS24PIN":
					return 803;
							case "TrkDKVNo":
					return 804;
							case "TrkDKVPIN":
					return 805;
							case "TrkShellNo":
					return 806;
							case "TrkShellPIN":
					return 807;
							case "TrkPermitNo":
					return 808;
							case "TrkTruckMob":
					return 809;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "TrkId":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrkName":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkMOTDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrkTAXDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrkDriver":
				return IQApp.Operators.GetComboOperators(selected);							case "TrkServiceDue":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrkAS24No":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkAS24PIN":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkDKVNo":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkDKVPIN":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkShellNo":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkShellPIN":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkPermitNo":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkTruckMob":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'TrkId', 'Truck ID'
					union select 'TrkName', 'Registration No'
					union select 'TrkNotes', 'Notes'
					union select 'TrkMOTDate', 'MOT Date'
					union select 'TrkTAXDate', 'TAX Due Date'
					union select 'TrkDriver', 'Driver'
					union select 'TrkServiceDue', 'Service Due'
					union select 'TrkAS24No', 'AS24 Card No:'
					union select 'TrkAS24PIN', 'AS24 Pin No:'
					union select 'TrkDKVNo', 'DKV No:'
					union select 'TrkDKVPIN', 'DKV Pin No:'
					union select 'TrkShellNo', 'Shell No:'
					union select 'TrkShellPIN', 'Shell Pin No:'
					union select 'TrkPermitNo', 'Permit No:'
					union select 'TrkTruckMob', 'Truck Mobile:'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "TrkId":
					return new Truck_TrkIdFieldDef();
							case "TrkName":
					return new Truck_TrkNameFieldDef();
							case "TrkNotes":
					return new Truck_TrkNotesFieldDef();
							case "TrkMOTDate":
					return new Truck_TrkMOTDateFieldDef();
							case "TrkTAXDate":
					return new Truck_TrkTAXDateFieldDef();
							case "TrkDriver":
					return new Truck_TrkDriverFieldDef();
							case "TrkServiceDue":
					return new Truck_TrkServiceDueFieldDef();
							case "TrkAS24No":
					return new Truck_TrkAS24NoFieldDef();
							case "TrkAS24PIN":
					return new Truck_TrkAS24PINFieldDef();
							case "TrkDKVNo":
					return new Truck_TrkDKVNoFieldDef();
							case "TrkDKVPIN":
					return new Truck_TrkDKVPINFieldDef();
							case "TrkShellNo":
					return new Truck_TrkShellNoFieldDef();
							case "TrkShellPIN":
					return new Truck_TrkShellPINFieldDef();
							case "TrkPermitNo":
					return new Truck_TrkPermitNoFieldDef();
							case "TrkTruckMob":
					return new Truck_TrkTruckMobFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, TrkName as [Description] from Truck 
			where TrkId like @q or TrkName like @q";
	}
	
}
public class DSTypeTruckMileage : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "TrkMTruck":
					return "Truck";
							case "TrkMPurchDate":
					return "Date of Purchase";
							case "TrkMPurchLitre":
					return "Litres purchased";
							case "TrkMOdometer":
					return "Odometer (km)";
							case "TrkMNotes":
					return "Notes";
							case "TrkMNextReading":
					return "Next reading (km)";
							case "TrkMMpg":
					return "Mpg";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "TrkMTruck":
					return 400;
							case "TrkMPurchDate":
					return 401;
							case "TrkMPurchLitre":
					return 402;
							case "TrkMOdometer":
					return 403;
							case "TrkMNotes":
					return 404;
							case "TrkMNextReading":
					return 405;
							case "TrkMMpg":
					return 406;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "TrkMTruck":
				return IQApp.Operators.GetComboOperators(selected);							case "TrkMPurchDate":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkMPurchLitre":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrkMOdometer":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrkMNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "TrkMNextReading":
				return IQApp.Operators.GetNumberOperators(selected);							case "TrkMMpg":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'TrkMTruck', 'Truck'
					union select 'TrkMPurchDate', 'Date of Purchase'
					union select 'TrkMPurchLitre', 'Litres purchased'
					union select 'TrkMOdometer', 'Odometer (km)'
					union select 'TrkMNotes', 'Notes'
					union select 'TrkMNextReading', 'Next reading (km)'
					union select 'TrkMMpg', 'Mpg'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "TrkMTruck":
					return new TruckMileage_TrkMTruckFieldDef();
							case "TrkMPurchDate":
					return new TruckMileage_TrkMPurchDateFieldDef();
							case "TrkMPurchLitre":
					return new TruckMileage_TrkMPurchLitreFieldDef();
							case "TrkMOdometer":
					return new TruckMileage_TrkMOdometerFieldDef();
							case "TrkMNotes":
					return new TruckMileage_TrkMNotesFieldDef();
							case "TrkMNextReading":
					return new TruckMileage_TrkMNextReadingFieldDef();
							case "TrkMMpg":
					return new TruckMileage_TrkMMpgFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, TrkMTruck as [Description] from TruckMileage 
			where TrkMTruck like @q or TrkMTruck like @q";
	}
	
}
public class DSTypeCustomer : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "CustDelZone":
					return "Delivery Zone";
							case "CustEM2":
					return "E-Mail 2";
							case "CustEM3":
					return "E-Mail 3";
							case "CustEM4":
					return "E-Mail 4";
							case "CustCreatedBy":
					return "Created By";
							case "CustOnFTrack":
					return "On FreightTrack";
							case "CustFTLNotes":
					return "In House Notes";
							case "CustSendStatus":
					return "Send Status";
							case "CustLang":
					return "Language";
							case "CustSortCode":
					return "Sort Code";
							case "CustType":
					return "Client Type";
							case "CustVATNo":
					return "VAT Number";
							case "CustDANNo":
					return "DAN Number";
							case "CustBondCode":
					return "REDS / Bond Code";
							case "CustIntrastat":
					return "Intrastat";
							case "CustCurr":
					return "Currency";
							case "CustRates":
					return "Rates";
							case "CustGenNotes":
					return "General Notes";
							case "CustWebsite":
					return "Website";
							case "CustRecDueDil":
					return "Received Due Diligence";
							case "CustCrdChecked":
					return "Credit Score Checked";
							case "CustCrdScr":
					return "Credit Score";
							case "CustCrdRvDate":
					return "Credit Score Review Date";
							case "CustAccContact":
					return "Accounts Contact";
							case "CustAccEmail":
					return "Accounts Email";
							case "CustGBWK":
					return "GBWK";
							case "CustAADSys":
					return "AAD System";
							case "CustUserName":
					return "Portal UserName";
							case "CustPassword":
					return "Portal Password";
							case "CustId":
					return "Company ID";
							case "CustName":
					return "Company Name";
							case "CustAddr":
					return "Address1";
							case "CustAddr2":
					return "Address2";
							case "CustAddr3":
					return "Address3";
							case "CustTown":
					return "Town";
							case "CustCounty":
					return "County";
							case "CustPC":
					return "Postcode";
							case "CustCtry":
					return "Country";
							case "CustPhone":
					return "Telephone";
							case "CustFax":
					return "Fax";
							case "CustEM":
					return "EMail";
							case "CustDueDiligence":
					return "Due Diligence Received";
							case "CustCredScoreSearch":
					return "Credit Score Searched";
							case "CustCredScore":
					return "Credit Score Number";
							case "CustCredScoreReview":
					return "Credit Score Review date";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "CustDelZone":
					return 287;
							case "CustEM2":
					return 329;
							case "CustEM3":
					return 330;
							case "CustEM4":
					return 331;
							case "CustCreatedBy":
					return 291;
							case "CustOnFTrack":
					return 250;
							case "CustFTLNotes":
					return 200;
							case "CustSendStatus":
					return 193;
							case "CustLang":
					return 150;
							case "CustSortCode":
					return 21;
							case "CustType":
					return 22;
							case "CustVATNo":
					return 23;
							case "CustDANNo":
					return 24;
							case "CustBondCode":
					return 25;
							case "CustIntrastat":
					return 26;
							case "CustCurr":
					return 27;
							case "CustRates":
					return 28;
							case "CustGenNotes":
					return 29;
							case "CustWebsite":
					return 697;
							case "CustRecDueDil":
					return 773;
							case "CustCrdChecked":
					return 774;
							case "CustCrdScr":
					return 775;
							case "CustCrdRvDate":
					return 776;
							case "CustAccContact":
					return 788;
							case "CustAccEmail":
					return 789;
							case "CustGBWK":
					return 341;
							case "CustAADSys":
					return 338;
							case "CustUserName":
					return 432;
							case "CustPassword":
					return 433;
							case "CustId":
					return 409;
							case "CustName":
					return 410;
							case "CustAddr":
					return 411;
							case "CustAddr2":
					return 412;
							case "CustAddr3":
					return 413;
							case "CustTown":
					return 414;
							case "CustCounty":
					return 415;
							case "CustPC":
					return 416;
							case "CustCtry":
					return 417;
							case "CustPhone":
					return 418;
							case "CustFax":
					return 419;
							case "CustEM":
					return 420;
							case "CustDueDiligence":
					return 672;
							case "CustCredScoreSearch":
					return 673;
							case "CustCredScore":
					return 674;
							case "CustCredScoreReview":
					return 675;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "CustDelZone":
				return IQApp.Operators.GetComboOperators(selected);							case "CustEM2":
				return IQApp.Operators.GetTextOperators(selected);							case "CustEM3":
				return IQApp.Operators.GetTextOperators(selected);							case "CustEM4":
				return IQApp.Operators.GetTextOperators(selected);							case "CustCreatedBy":
				return IQApp.Operators.GetComboOperators(selected);							case "CustOnFTrack":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CustFTLNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "CustSendStatus":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CustLang":
				return IQApp.Operators.GetComboOperators(selected);							case "CustSortCode":
				return IQApp.Operators.GetTextOperators(selected);							case "CustType":
				return IQApp.Operators.GetComboOperators(selected);							case "CustVATNo":
				return IQApp.Operators.GetTextOperators(selected);							case "CustDANNo":
				return IQApp.Operators.GetTextOperators(selected);							case "CustBondCode":
				return IQApp.Operators.GetTextOperators(selected);							case "CustIntrastat":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CustCurr":
				return IQApp.Operators.GetComboOperators(selected);							case "CustRates":
				return IQApp.Operators.GetTextOperators(selected);							case "CustGenNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "CustWebsite":
				return IQApp.Operators.GetTextOperators(selected);							case "CustRecDueDil":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CustCrdChecked":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CustCrdScr":
				return IQApp.Operators.GetTextOperators(selected);							case "CustCrdRvDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "CustAccContact":
				return IQApp.Operators.GetTextOperators(selected);							case "CustAccEmail":
				return IQApp.Operators.GetTextOperators(selected);							case "CustGBWK":
				return IQApp.Operators.GetTextOperators(selected);							case "CustAADSys":
				return IQApp.Operators.GetComboOperators(selected);							case "CustUserName":
				return IQApp.Operators.GetTextOperators(selected);							case "CustPassword":
				return IQApp.Operators.GetTextOperators(selected);							case "CustId":
				return IQApp.Operators.GetNumberOperators(selected);							case "CustName":
				return IQApp.Operators.GetTextOperators(selected);							case "CustAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "CustAddr2":
				return IQApp.Operators.GetTextOperators(selected);							case "CustAddr3":
				return IQApp.Operators.GetTextOperators(selected);							case "CustTown":
				return IQApp.Operators.GetTextOperators(selected);							case "CustCounty":
				return IQApp.Operators.GetTextOperators(selected);							case "CustPC":
				return IQApp.Operators.GetTextOperators(selected);							case "CustCtry":
				return IQApp.Operators.GetComboOperators(selected);							case "CustPhone":
				return IQApp.Operators.GetTextOperators(selected);							case "CustFax":
				return IQApp.Operators.GetTextOperators(selected);							case "CustEM":
				return IQApp.Operators.GetTextOperators(selected);							case "CustDueDiligence":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CustCredScoreSearch":
				return IQApp.Operators.GetBooleanOperators(selected);							case "CustCredScore":
				return IQApp.Operators.GetNumberOperators(selected);							case "CustCredScoreReview":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'CustDelZone', 'Delivery Zone'
					union select 'CustEM2', 'E-Mail 2'
					union select 'CustEM3', 'E-Mail 3'
					union select 'CustEM4', 'E-Mail 4'
					union select 'CustCreatedBy', 'Created By'
					union select 'CustOnFTrack', 'On FreightTrack'
					union select 'CustFTLNotes', 'In House Notes'
					union select 'CustSendStatus', 'Send Status'
					union select 'CustLang', 'Language'
					union select 'CustSortCode', 'Sort Code'
					union select 'CustType', 'Client Type'
					union select 'CustVATNo', 'VAT Number'
					union select 'CustDANNo', 'DAN Number'
					union select 'CustBondCode', 'REDS / Bond Code'
					union select 'CustIntrastat', 'Intrastat'
					union select 'CustCurr', 'Currency'
					union select 'CustRates', 'Rates'
					union select 'CustGenNotes', 'General Notes'
					union select 'CustWebsite', 'Website'
					union select 'CustRecDueDil', 'Received Due Diligence'
					union select 'CustCrdChecked', 'Credit Score Checked'
					union select 'CustCrdScr', 'Credit Score'
					union select 'CustCrdRvDate', 'Credit Score Review Date'
					union select 'CustAccContact', 'Accounts Contact'
					union select 'CustAccEmail', 'Accounts Email'
					union select 'CustGBWK', 'GBWK'
					union select 'CustAADSys', 'AAD System'
					union select 'CustUserName', 'Portal UserName'
					union select 'CustPassword', 'Portal Password'
					union select 'CustId', 'Company ID'
					union select 'CustName', 'Company Name'
					union select 'CustAddr', 'Address1'
					union select 'CustAddr2', 'Address2'
					union select 'CustAddr3', 'Address3'
					union select 'CustTown', 'Town'
					union select 'CustCounty', 'County'
					union select 'CustPC', 'Postcode'
					union select 'CustCtry', 'Country'
					union select 'CustPhone', 'Telephone'
					union select 'CustFax', 'Fax'
					union select 'CustEM', 'EMail'
					union select 'CustDueDiligence', 'Due Diligence Received'
					union select 'CustCredScoreSearch', 'Credit Score Searched'
					union select 'CustCredScore', 'Credit Score Number'
					union select 'CustCredScoreReview', 'Credit Score Review date'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "CustDelZone":
					return new Customer_CustDelZoneFieldDef();
							case "CustEM2":
					return new Customer_CustEM2FieldDef();
							case "CustEM3":
					return new Customer_CustEM3FieldDef();
							case "CustEM4":
					return new Customer_CustEM4FieldDef();
							case "CustCreatedBy":
					return new Customer_CustCreatedByFieldDef();
							case "CustOnFTrack":
					return new Customer_CustOnFTrackFieldDef();
							case "CustFTLNotes":
					return new Customer_CustFTLNotesFieldDef();
							case "CustSendStatus":
					return new Customer_CustSendStatusFieldDef();
							case "CustLang":
					return new Customer_CustLangFieldDef();
							case "CustSortCode":
					return new Customer_CustSortCodeFieldDef();
							case "CustType":
					return new Customer_CustTypeFieldDef();
							case "CustVATNo":
					return new Customer_CustVATNoFieldDef();
							case "CustDANNo":
					return new Customer_CustDANNoFieldDef();
							case "CustBondCode":
					return new Customer_CustBondCodeFieldDef();
							case "CustIntrastat":
					return new Customer_CustIntrastatFieldDef();
							case "CustCurr":
					return new Customer_CustCurrFieldDef();
							case "CustRates":
					return new Customer_CustRatesFieldDef();
							case "CustGenNotes":
					return new Customer_CustGenNotesFieldDef();
							case "CustWebsite":
					return new Customer_CustWebsiteFieldDef();
							case "CustRecDueDil":
					return new Customer_CustRecDueDilFieldDef();
							case "CustCrdChecked":
					return new Customer_CustCrdCheckedFieldDef();
							case "CustCrdScr":
					return new Customer_CustCrdScrFieldDef();
							case "CustCrdRvDate":
					return new Customer_CustCrdRvDateFieldDef();
							case "CustAccContact":
					return new Customer_CustAccContactFieldDef();
							case "CustAccEmail":
					return new Customer_CustAccEmailFieldDef();
							case "CustGBWK":
					return new Customer_CustGBWKFieldDef();
							case "CustAADSys":
					return new Customer_CustAADSysFieldDef();
							case "CustUserName":
					return new Customer_CustUserNameFieldDef();
							case "CustPassword":
					return new Customer_CustPasswordFieldDef();
							case "CustId":
					return new Customer_CustIdFieldDef();
							case "CustName":
					return new Customer_CustNameFieldDef();
							case "CustAddr":
					return new Customer_CustAddrFieldDef();
							case "CustAddr2":
					return new Customer_CustAddr2FieldDef();
							case "CustAddr3":
					return new Customer_CustAddr3FieldDef();
							case "CustTown":
					return new Customer_CustTownFieldDef();
							case "CustCounty":
					return new Customer_CustCountyFieldDef();
							case "CustPC":
					return new Customer_CustPCFieldDef();
							case "CustCtry":
					return new Customer_CustCtryFieldDef();
							case "CustPhone":
					return new Customer_CustPhoneFieldDef();
							case "CustFax":
					return new Customer_CustFaxFieldDef();
							case "CustEM":
					return new Customer_CustEMFieldDef();
							case "CustDueDiligence":
					return new Customer_CustDueDiligenceFieldDef();
							case "CustCredScoreSearch":
					return new Customer_CustCredScoreSearchFieldDef();
							case "CustCredScore":
					return new Customer_CustCredScoreFieldDef();
							case "CustCredScoreReview":
					return new Customer_CustCredScoreReviewFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, CustName as [Description] from Customer 
			where CustId like @q or CustName like @q";
	}
	
}
public class DSTypeCountry : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "CtryId":
					return "Country ID";
							case "CtryCode":
					return "Country Code";
							case "CtryName":
					return "Country";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "CtryId":
					return 421;
							case "CtryCode":
					return 422;
							case "CtryName":
					return 423;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "CtryId":
				return IQApp.Operators.GetNumberOperators(selected);							case "CtryCode":
				return IQApp.Operators.GetTextOperators(selected);							case "CtryName":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'CtryId', 'Country ID'
					union select 'CtryCode', 'Country Code'
					union select 'CtryName', 'Country'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "CtryId":
					return new Country_CtryIdFieldDef();
							case "CtryCode":
					return new Country_CtryCodeFieldDef();
							case "CtryName":
					return new Country_CtryNameFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, CtryName as [Description] from Country 
			where CtryId like @q or CtryName like @q";
	}
	
}
public class DSTypeREDSOrder : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "RDOrdId":
					return "REDS ID";
							case "RDOrdCustId":
					return "Client ID";
							case "RDOrdDANNo":
					return "DAN Number";
							case "RDOrdJobNo":
					return "Job Number";
							case "RDOrdJobLetter":
					return "Job Letter";
							case "RDOrdCustOrd":
					return "Client Order No";
							case "RDOrdArrDate":
					return "Arrival Date";
							case "RDOrdDelDate":
					return "Delivery Date";
							case "RDOrdOrder":
					return "Order Number";
							case "RDOrdCust":
					return "Client Name";
							case "RDOrdInvCreated":
					return "Invoice Created";
							case "RDOrdDesc":
					return "Description";
							case "RDOrdLocked":
					return "Locked";
							case "RDOrdDutyPaid":
					return "Duty Paid";
							case "RDOrdARCNo":
					return "ARC Number";
							case "RDOrdHM10":
					return "HM10";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "RDOrdId":
					return 521;
							case "RDOrdCustId":
					return 522;
							case "RDOrdDANNo":
					return 523;
							case "RDOrdJobNo":
					return 524;
							case "RDOrdJobLetter":
					return 525;
							case "RDOrdCustOrd":
					return 526;
							case "RDOrdArrDate":
					return 527;
							case "RDOrdDelDate":
					return 528;
							case "RDOrdOrder":
					return 535;
							case "RDOrdCust":
					return 536;
							case "RDOrdInvCreated":
					return 545;
							case "RDOrdDesc":
					return 551;
							case "RDOrdLocked":
					return 552;
							case "RDOrdDutyPaid":
					return 553;
							case "RDOrdARCNo":
					return 554;
							case "RDOrdHM10":
					return 555;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "RDOrdId":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOrdCustId":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOrdDANNo":
				return IQApp.Operators.GetTextOperators(selected);							case "RDOrdJobNo":
				return IQApp.Operators.GetComboOperators(selected);							case "RDOrdJobLetter":
				return IQApp.Operators.GetTextOperators(selected);							case "RDOrdCustOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "RDOrdArrDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOrdDelDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOrdOrder":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOrdCust":
				return IQApp.Operators.GetTextOperators(selected);							case "RDOrdInvCreated":
				return IQApp.Operators.GetBooleanOperators(selected);							case "RDOrdDesc":
				return IQApp.Operators.GetTextOperators(selected);							case "RDOrdLocked":
				return IQApp.Operators.GetBooleanOperators(selected);							case "RDOrdDutyPaid":
				return IQApp.Operators.GetBooleanOperators(selected);							case "RDOrdARCNo":
				return IQApp.Operators.GetTextOperators(selected);							case "RDOrdHM10":
				return IQApp.Operators.GetBooleanOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'RDOrdId', 'REDS ID'
					union select 'RDOrdCustId', 'Client ID'
					union select 'RDOrdDANNo', 'DAN Number'
					union select 'RDOrdJobNo', 'Job Number'
					union select 'RDOrdJobLetter', 'Job Letter'
					union select 'RDOrdCustOrd', 'Client Order No'
					union select 'RDOrdArrDate', 'Arrival Date'
					union select 'RDOrdDelDate', 'Delivery Date'
					union select 'RDOrdOrder', 'Order Number'
					union select 'RDOrdCust', 'Client Name'
					union select 'RDOrdInvCreated', 'Invoice Created'
					union select 'RDOrdDesc', 'Description'
					union select 'RDOrdLocked', 'Locked'
					union select 'RDOrdDutyPaid', 'Duty Paid'
					union select 'RDOrdARCNo', 'ARC Number'
					union select 'RDOrdHM10', 'HM10'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "RDOrdId":
					return new REDSOrder_RDOrdIdFieldDef();
							case "RDOrdCustId":
					return new REDSOrder_RDOrdCustIdFieldDef();
							case "RDOrdDANNo":
					return new REDSOrder_RDOrdDANNoFieldDef();
							case "RDOrdJobNo":
					return new REDSOrder_RDOrdJobNoFieldDef();
							case "RDOrdJobLetter":
					return new REDSOrder_RDOrdJobLetterFieldDef();
							case "RDOrdCustOrd":
					return new REDSOrder_RDOrdCustOrdFieldDef();
							case "RDOrdArrDate":
					return new REDSOrder_RDOrdArrDateFieldDef();
							case "RDOrdDelDate":
					return new REDSOrder_RDOrdDelDateFieldDef();
							case "RDOrdOrder":
					return new REDSOrder_RDOrdOrderFieldDef();
							case "RDOrdCust":
					return new REDSOrder_RDOrdCustFieldDef();
							case "RDOrdInvCreated":
					return new REDSOrder_RDOrdInvCreatedFieldDef();
							case "RDOrdDesc":
					return new REDSOrder_RDOrdDescFieldDef();
							case "RDOrdLocked":
					return new REDSOrder_RDOrdLockedFieldDef();
							case "RDOrdDutyPaid":
					return new REDSOrder_RDOrdDutyPaidFieldDef();
							case "RDOrdARCNo":
					return new REDSOrder_RDOrdARCNoFieldDef();
							case "RDOrdHM10":
					return new REDSOrder_RDOrdHM10FieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, RDOrdId as [Description] from REDSOrder 
			where RDOrdId like @q or RDOrdId like @q";
	}
	
}
public class DSTypeREDSOrdLine : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "RDOLAlcPct":
					return "Alcohol Percentage";
							case "RDOLLitres":
					return "Litres";
							case "RDOLDutyDue":
					return "Duty Due";
							case "RDOLLocked":
					return "Locked";
							case "RDOLRDId":
					return "REDS ID";
							case "RDOLLineNo":
					return "Line Number";
							case "RDOLCases":
					return "Cases";
							case "RDOLBottleCase":
					return "Bottles per Case";
							case "RDOLBottleSize":
					return "Bottle Size (cl)";
							case "RDOLTaxCode":
					return "Tax Code";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "RDOLAlcPct":
					return 537;
							case "RDOLLitres":
					return 538;
							case "RDOLDutyDue":
					return 539;
							case "RDOLLocked":
					return 540;
							case "RDOLRDId":
					return 529;
							case "RDOLLineNo":
					return 530;
							case "RDOLCases":
					return 531;
							case "RDOLBottleCase":
					return 532;
							case "RDOLBottleSize":
					return 533;
							case "RDOLTaxCode":
					return 534;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "RDOLAlcPct":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLLitres":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLDutyDue":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLLocked":
				return IQApp.Operators.GetBooleanOperators(selected);							case "RDOLRDId":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLLineNo":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLCases":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLBottleCase":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLBottleSize":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDOLTaxCode":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'RDOLAlcPct', 'Alcohol Percentage'
					union select 'RDOLLitres', 'Litres'
					union select 'RDOLDutyDue', 'Duty Due'
					union select 'RDOLLocked', 'Locked'
					union select 'RDOLRDId', 'REDS ID'
					union select 'RDOLLineNo', 'Line Number'
					union select 'RDOLCases', 'Cases'
					union select 'RDOLBottleCase', 'Bottles per Case'
					union select 'RDOLBottleSize', 'Bottle Size (cl)'
					union select 'RDOLTaxCode', 'Tax Code'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "RDOLAlcPct":
					return new REDSOrdLine_RDOLAlcPctFieldDef();
							case "RDOLLitres":
					return new REDSOrdLine_RDOLLitresFieldDef();
							case "RDOLDutyDue":
					return new REDSOrdLine_RDOLDutyDueFieldDef();
							case "RDOLLocked":
					return new REDSOrdLine_RDOLLockedFieldDef();
							case "RDOLRDId":
					return new REDSOrdLine_RDOLRDIdFieldDef();
							case "RDOLLineNo":
					return new REDSOrdLine_RDOLLineNoFieldDef();
							case "RDOLCases":
					return new REDSOrdLine_RDOLCasesFieldDef();
							case "RDOLBottleCase":
					return new REDSOrdLine_RDOLBottleCaseFieldDef();
							case "RDOLBottleSize":
					return new REDSOrdLine_RDOLBottleSizeFieldDef();
							case "RDOLTaxCode":
					return new REDSOrdLine_RDOLTaxCodeFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, RDOLRDId as [Description] from REDSOrdLine 
			where RDOLRDId like @q or RDOLRDId like @q";
	}
	
}
public class DSTypeREDSTax : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "RDTaxCode":
					return "Tax Code";
							case "RDTaxAlcPct":
					return "Alcohol Percentage";
							case "RDTaxType":
					return "Type";
							case "RDTaxDutyRate":
					return "Duty Rate £ per ltr";
							case "RDTaxId":
					return "Tax Code Id";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "RDTaxCode":
					return 541;
							case "RDTaxAlcPct":
					return 542;
							case "RDTaxType":
					return 543;
							case "RDTaxDutyRate":
					return 544;
							case "RDTaxId":
					return 558;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "RDTaxCode":
				return IQApp.Operators.GetTextOperators(selected);							case "RDTaxAlcPct":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDTaxType":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDTaxDutyRate":
				return IQApp.Operators.GetNumberOperators(selected);							case "RDTaxId":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'RDTaxCode', 'Tax Code'
					union select 'RDTaxAlcPct', 'Alcohol Percentage'
					union select 'RDTaxType', 'Type'
					union select 'RDTaxDutyRate', 'Duty Rate £ per ltr'
					union select 'RDTaxId', 'Tax Code Id'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "RDTaxCode":
					return new REDSTax_RDTaxCodeFieldDef();
							case "RDTaxAlcPct":
					return new REDSTax_RDTaxAlcPctFieldDef();
							case "RDTaxType":
					return new REDSTax_RDTaxTypeFieldDef();
							case "RDTaxDutyRate":
					return new REDSTax_RDTaxDutyRateFieldDef();
							case "RDTaxId":
					return new REDSTax_RDTaxIdFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, RDTaxCode as [Description] from REDSTax 
			where RDTaxId like @q or RDTaxCode like @q";
	}
	
}
public class DSTypeDutyRateHist : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "DRHId":
					return "History Id";
							case "DRHTaxCode":
					return "Tax Code";
							case "DRHChangeDate":
					return "Date of Change";
							case "DRHDutyRate":
					return "Duty Rate";
							case "DRHAlcPct":
					return "Alcohol %age";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "DRHId":
					return 559;
							case "DRHTaxCode":
					return 546;
							case "DRHChangeDate":
					return 547;
							case "DRHDutyRate":
					return 548;
							case "DRHAlcPct":
					return 549;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "DRHId":
				return IQApp.Operators.GetNumberOperators(selected);							case "DRHTaxCode":
				return IQApp.Operators.GetComboOperators(selected);							case "DRHChangeDate":
				return IQApp.Operators.GetTextOperators(selected);							case "DRHDutyRate":
				return IQApp.Operators.GetNumberOperators(selected);							case "DRHAlcPct":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'DRHId', 'History Id'
					union select 'DRHTaxCode', 'Tax Code'
					union select 'DRHChangeDate', 'Date of Change'
					union select 'DRHDutyRate', 'Duty Rate'
					union select 'DRHAlcPct', 'Alcohol %age'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "DRHId":
					return new DutyRateHist_DRHIdFieldDef();
							case "DRHTaxCode":
					return new DutyRateHist_DRHTaxCodeFieldDef();
							case "DRHChangeDate":
					return new DutyRateHist_DRHChangeDateFieldDef();
							case "DRHDutyRate":
					return new DutyRateHist_DRHDutyRateFieldDef();
							case "DRHAlcPct":
					return new DutyRateHist_DRHAlcPctFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, DRHTaxCode as [Description] from DutyRateHist 
			where DRHId like @q or DRHTaxCode like @q";
	}
	
}
public class DSTypeREDSEAD : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "RDEADId":
					return "eAD Number";
							case "RDEADRDId":
					return "REDS ID";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "RDEADId":
					return 556;
							case "RDEADRDId":
					return 557;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "RDEADId":
				return IQApp.Operators.GetTextOperators(selected);							case "RDEADRDId":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'RDEADId', 'eAD Number'
					union select 'RDEADRDId', 'REDS ID'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "RDEADId":
					return new REDSEAD_RDEADIdFieldDef();
							case "RDEADRDId":
					return new REDSEAD_RDEADRDIdFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, RDEADId as [Description] from REDSEAD 
			where RDEADRDId like @q or RDEADId like @q";
	}
	
}
public class DSTypeIStatRec : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "IStId":
					return "Intrastat ID";
							case "IStOrder":
					return "Order Number";
							case "IStCustId":
					return "Client ID";
							case "IStCust":
					return "Client Name";
							case "IStSuppId":
					return "Supplier ID";
							case "IStSupp":
					return "Supplier Name";
							case "IStCustOrd":
					return "Client Order No";
							case "IStJobNo":
					return "Job Number";
							case "IStDate":
					return "Intrastat Date";
							case "IStCommCode":
					return "Commodity Code";
							case "IStInvVal":
					return "Invoice Value";
							case "IStInvCurr":
					return "Invoice Currency";
							case "IStSterlingVal":
					return "Sterling Value";
							case "IStProcessed":
					return "Processed";
							case "IStDelTerms":
					return "Delivery Terms";
							case "IStNAT1":
					return "NAT 1";
							case "IStNAT2":
					return "NAT 2";
							case "IStMass":
					return "Mass";
							case "IStSuppUnitVal":
					return "Supp Unit Value";
							case "IStSuppUnitType":
					return "Supp Unit Type";
							case "IStConsignCtry":
					return "Country (Consign)";
							case "IStTranspMode":
					return "Mode of Transport";
							case "IStInvNo":
					return "Invoice Number";
							case "IStOriginCtry":
					return "Country (Origin)";
							case "IStMonth":
					return "Month";
							case "IStMonthDec":
					return "Month Declared";
							case "IStRatePeriod":
					return "Exch Rate Period";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "IStId":
					return 626;
							case "IStOrder":
					return 627;
							case "IStCustId":
					return 628;
							case "IStCust":
					return 629;
							case "IStSuppId":
					return 630;
							case "IStSupp":
					return 631;
							case "IStCustOrd":
					return 632;
							case "IStJobNo":
					return 633;
							case "IStDate":
					return 634;
							case "IStCommCode":
					return 635;
							case "IStInvVal":
					return 636;
							case "IStInvCurr":
					return 637;
							case "IStSterlingVal":
					return 638;
							case "IStProcessed":
					return 639;
							case "IStDelTerms":
					return 640;
							case "IStNAT1":
					return 641;
							case "IStNAT2":
					return 642;
							case "IStMass":
					return 643;
							case "IStSuppUnitVal":
					return 644;
							case "IStSuppUnitType":
					return 645;
							case "IStConsignCtry":
					return 646;
							case "IStTranspMode":
					return 647;
							case "IStInvNo":
					return 648;
							case "IStOriginCtry":
					return 649;
							case "IStMonth":
					return 650;
							case "IStMonthDec":
					return 651;
							case "IStRatePeriod":
					return 658;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "IStId":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStOrder":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStCustId":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStCust":
				return IQApp.Operators.GetTextOperators(selected);							case "IStSuppId":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStSupp":
				return IQApp.Operators.GetTextOperators(selected);							case "IStCustOrd":
				return IQApp.Operators.GetTextOperators(selected);							case "IStJobNo":
				return IQApp.Operators.GetTextOperators(selected);							case "IStDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStCommCode":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStInvVal":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStInvCurr":
				return IQApp.Operators.GetComboOperators(selected);							case "IStSterlingVal":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStProcessed":
				return IQApp.Operators.GetBooleanOperators(selected);							case "IStDelTerms":
				return IQApp.Operators.GetComboOperators(selected);							case "IStNAT1":
				return IQApp.Operators.GetComboOperators(selected);							case "IStNAT2":
				return IQApp.Operators.GetComboOperators(selected);							case "IStMass":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStSuppUnitVal":
				return IQApp.Operators.GetNumberOperators(selected);							case "IStSuppUnitType":
				return IQApp.Operators.GetTextOperators(selected);							case "IStConsignCtry":
				return IQApp.Operators.GetComboOperators(selected);							case "IStTranspMode":
				return IQApp.Operators.GetComboOperators(selected);							case "IStInvNo":
				return IQApp.Operators.GetTextOperators(selected);							case "IStOriginCtry":
				return IQApp.Operators.GetComboOperators(selected);							case "IStMonth":
				return IQApp.Operators.GetComboOperators(selected);							case "IStMonthDec":
				return IQApp.Operators.GetComboOperators(selected);							case "IStRatePeriod":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'IStId', 'Intrastat ID'
					union select 'IStOrder', 'Order Number'
					union select 'IStCustId', 'Client ID'
					union select 'IStCust', 'Client Name'
					union select 'IStSuppId', 'Supplier ID'
					union select 'IStSupp', 'Supplier Name'
					union select 'IStCustOrd', 'Client Order No'
					union select 'IStJobNo', 'Job Number'
					union select 'IStDate', 'Intrastat Date'
					union select 'IStCommCode', 'Commodity Code'
					union select 'IStInvVal', 'Invoice Value'
					union select 'IStInvCurr', 'Invoice Currency'
					union select 'IStSterlingVal', 'Sterling Value'
					union select 'IStProcessed', 'Processed'
					union select 'IStDelTerms', 'Delivery Terms'
					union select 'IStNAT1', 'NAT 1'
					union select 'IStNAT2', 'NAT 2'
					union select 'IStMass', 'Mass'
					union select 'IStSuppUnitVal', 'Supp Unit Value'
					union select 'IStSuppUnitType', 'Supp Unit Type'
					union select 'IStConsignCtry', 'Country (Consign)'
					union select 'IStTranspMode', 'Mode of Transport'
					union select 'IStInvNo', 'Invoice Number'
					union select 'IStOriginCtry', 'Country (Origin)'
					union select 'IStMonth', 'Month'
					union select 'IStMonthDec', 'Month Declared'
					union select 'IStRatePeriod', 'Exch Rate Period'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "IStId":
					return new IStatRec_IStIdFieldDef();
							case "IStOrder":
					return new IStatRec_IStOrderFieldDef();
							case "IStCustId":
					return new IStatRec_IStCustIdFieldDef();
							case "IStCust":
					return new IStatRec_IStCustFieldDef();
							case "IStSuppId":
					return new IStatRec_IStSuppIdFieldDef();
							case "IStSupp":
					return new IStatRec_IStSuppFieldDef();
							case "IStCustOrd":
					return new IStatRec_IStCustOrdFieldDef();
							case "IStJobNo":
					return new IStatRec_IStJobNoFieldDef();
							case "IStDate":
					return new IStatRec_IStDateFieldDef();
							case "IStCommCode":
					return new IStatRec_IStCommCodeFieldDef();
							case "IStInvVal":
					return new IStatRec_IStInvValFieldDef();
							case "IStInvCurr":
					return new IStatRec_IStInvCurrFieldDef();
							case "IStSterlingVal":
					return new IStatRec_IStSterlingValFieldDef();
							case "IStProcessed":
					return new IStatRec_IStProcessedFieldDef();
							case "IStDelTerms":
					return new IStatRec_IStDelTermsFieldDef();
							case "IStNAT1":
					return new IStatRec_IStNAT1FieldDef();
							case "IStNAT2":
					return new IStatRec_IStNAT2FieldDef();
							case "IStMass":
					return new IStatRec_IStMassFieldDef();
							case "IStSuppUnitVal":
					return new IStatRec_IStSuppUnitValFieldDef();
							case "IStSuppUnitType":
					return new IStatRec_IStSuppUnitTypeFieldDef();
							case "IStConsignCtry":
					return new IStatRec_IStConsignCtryFieldDef();
							case "IStTranspMode":
					return new IStatRec_IStTranspModeFieldDef();
							case "IStInvNo":
					return new IStatRec_IStInvNoFieldDef();
							case "IStOriginCtry":
					return new IStatRec_IStOriginCtryFieldDef();
							case "IStMonth":
					return new IStatRec_IStMonthFieldDef();
							case "IStMonthDec":
					return new IStatRec_IStMonthDecFieldDef();
							case "IStRatePeriod":
					return new IStatRec_IStRatePeriodFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, IStId as [Description] from IStatRec 
			where IStId like @q or IStId like @q";
	}
	
}
public class DSTypeMonths : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "MthId":
					return "Month ID";
							case "MthName":
					return "Month Name";
							case "MthSDate":
					return "From";
							case "MthEDate":
					return "To";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "MthId":
					return 654;
							case "MthName":
					return 655;
							case "MthSDate":
					return 656;
							case "MthEDate":
					return 657;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "MthId":
				return IQApp.Operators.GetNumberOperators(selected);							case "MthName":
				return IQApp.Operators.GetTextOperators(selected);							case "MthSDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "MthEDate":
				return IQApp.Operators.GetNumberOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'MthId', 'Month ID'
					union select 'MthName', 'Month Name'
					union select 'MthSDate', 'From'
					union select 'MthEDate', 'To'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "MthId":
					return new Months_MthIdFieldDef();
							case "MthName":
					return new Months_MthNameFieldDef();
							case "MthSDate":
					return new Months_MthSDateFieldDef();
							case "MthEDate":
					return new Months_MthEDateFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, MthName as [Description] from Months 
			where MthId like @q or MthName like @q";
	}
	
}
public class DSTypeChangeReq : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "CRId":
					return "Id";
							case "CRName":
					return "Title";
							case "CRType":
					return "Type";
							case "CRPriority":
					return "Priority";
							case "CRStatus":
					return "Status";
							case "CRDate":
					return "Date Added";
							case "CRClosed":
					return "Date Closed";
							case "CRIssues":
					return "Description";
							case "CRIqNotes":
					return "Intrinsiq Notes";
							case "CRResolved":
					return "Resolved";
							case "CRIqNotesArch":
					return "Intrinsiq Notes Archive";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "CRId":
					return 659;
							case "CRName":
					return 660;
							case "CRType":
					return 661;
							case "CRPriority":
					return 662;
							case "CRStatus":
					return 663;
							case "CRDate":
					return 664;
							case "CRClosed":
					return 665;
							case "CRIssues":
					return 666;
							case "CRIqNotes":
					return 667;
							case "CRResolved":
					return 668;
							case "CRIqNotesArch":
					return 669;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "CRId":
				return IQApp.Operators.GetNumberOperators(selected);							case "CRName":
				return IQApp.Operators.GetTextOperators(selected);							case "CRType":
				return IQApp.Operators.GetComboOperators(selected);							case "CRPriority":
				return IQApp.Operators.GetComboOperators(selected);							case "CRStatus":
				return IQApp.Operators.GetComboOperators(selected);							case "CRDate":
				return IQApp.Operators.GetTextOperators(selected);							case "CRClosed":
				return IQApp.Operators.GetTextOperators(selected);							case "CRIssues":
				return IQApp.Operators.GetTextOperators(selected);							case "CRIqNotes":
				return IQApp.Operators.GetTextOperators(selected);							case "CRResolved":
				return IQApp.Operators.GetTextOperators(selected);							case "CRIqNotesArch":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'CRId', 'Id'
					union select 'CRName', 'Title'
					union select 'CRType', 'Type'
					union select 'CRPriority', 'Priority'
					union select 'CRStatus', 'Status'
					union select 'CRDate', 'Date Added'
					union select 'CRClosed', 'Date Closed'
					union select 'CRIssues', 'Description'
					union select 'CRIqNotes', 'Intrinsiq Notes'
					union select 'CRResolved', 'Resolved'
					union select 'CRIqNotesArch', 'Intrinsiq Notes Archive'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "CRId":
					return new ChangeReq_CRIdFieldDef();
							case "CRName":
					return new ChangeReq_CRNameFieldDef();
							case "CRType":
					return new ChangeReq_CRTypeFieldDef();
							case "CRPriority":
					return new ChangeReq_CRPriorityFieldDef();
							case "CRStatus":
					return new ChangeReq_CRStatusFieldDef();
							case "CRDate":
					return new ChangeReq_CRDateFieldDef();
							case "CRClosed":
					return new ChangeReq_CRClosedFieldDef();
							case "CRIssues":
					return new ChangeReq_CRIssuesFieldDef();
							case "CRIqNotes":
					return new ChangeReq_CRIqNotesFieldDef();
							case "CRResolved":
					return new ChangeReq_CRResolvedFieldDef();
							case "CRIqNotesArch":
					return new ChangeReq_CRIqNotesArchFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, CRName as [Description] from ChangeReq 
			where CRId like @q or CRName like @q";
	}
	
}
public class DSTypeEMail : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "EMId":
					return "Id";
							case "EMName":
					return "E-mail";
							case "EMFrom":
					return "From";
							case "EMDS":
					return "Dataset";
							case "EMTo":
					return "To";
							case "EMCC":
					return "CC";
							case "EMSubject":
					return "Subject";
							case "EMBody":
					return "Body";
							case "EMAttach":
					return "Attachments";
							case "EMStatus":
					return "Status";
							case "EMDateSent":
					return "Date Sent";
							case "EMToRecords":
					return "To (Records)";
							case "EMDF":
					return "DataField";
							case "EMCCRecords":
					return "CC (Records)";
							case "EMBCC":
					return "BCC";
							case "EMBCCRecords":
					return "BCC (Records)";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "EMId":
					return 684;
							case "EMName":
					return 685;
							case "EMFrom":
					return 686;
							case "EMDS":
					return 687;
							case "EMTo":
					return 689;
							case "EMCC":
					return 690;
							case "EMSubject":
					return 691;
							case "EMBody":
					return 692;
							case "EMAttach":
					return 693;
							case "EMStatus":
					return 694;
							case "EMDateSent":
					return 695;
							case "EMToRecords":
					return 717;
							case "EMDF":
					return 718;
							case "EMCCRecords":
					return 719;
							case "EMBCC":
					return 720;
							case "EMBCCRecords":
					return 721;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "EMId":
				return IQApp.Operators.GetNumberOperators(selected);							case "EMName":
				return IQApp.Operators.GetComboOperators(selected);							case "EMFrom":
				return IQApp.Operators.GetTextOperators(selected);							case "EMDS":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTo":
				return IQApp.Operators.GetTextOperators(selected);							case "EMCC":
				return IQApp.Operators.GetTextOperators(selected);							case "EMSubject":
				return IQApp.Operators.GetTextOperators(selected);							case "EMBody":
				return IQApp.Operators.GetTextOperators(selected);							case "EMAttach":
				return IQApp.Operators.GetTextOperators(selected);							case "EMStatus":
				return IQApp.Operators.GetComboOperators(selected);							case "EMDateSent":
				return IQApp.Operators.GetNumberOperators(selected);							case "EMToRecords":
				return IQApp.Operators.GetComboOperators(selected);							case "EMDF":
				return IQApp.Operators.GetTextOperators(selected);							case "EMCCRecords":
				return IQApp.Operators.GetComboOperators(selected);							case "EMBCC":
				return IQApp.Operators.GetTextOperators(selected);							case "EMBCCRecords":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'EMId', 'Id'
					union select 'EMName', 'E-mail'
					union select 'EMFrom', 'From'
					union select 'EMDS', 'Dataset'
					union select 'EMTo', 'To'
					union select 'EMCC', 'CC'
					union select 'EMSubject', 'Subject'
					union select 'EMBody', 'Body'
					union select 'EMAttach', 'Attachments'
					union select 'EMStatus', 'Status'
					union select 'EMDateSent', 'Date Sent'
					union select 'EMToRecords', 'To (Records)'
					union select 'EMDF', 'DataField'
					union select 'EMCCRecords', 'CC (Records)'
					union select 'EMBCC', 'BCC'
					union select 'EMBCCRecords', 'BCC (Records)'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "EMId":
					return new EMail_EMIdFieldDef();
							case "EMName":
					return new EMail_EMNameFieldDef();
							case "EMFrom":
					return new EMail_EMFromFieldDef();
							case "EMDS":
					return new EMail_EMDSFieldDef();
							case "EMTo":
					return new EMail_EMToFieldDef();
							case "EMCC":
					return new EMail_EMCCFieldDef();
							case "EMSubject":
					return new EMail_EMSubjectFieldDef();
							case "EMBody":
					return new EMail_EMBodyFieldDef();
							case "EMAttach":
					return new EMail_EMAttachFieldDef();
							case "EMStatus":
					return new EMail_EMStatusFieldDef();
							case "EMDateSent":
					return new EMail_EMDateSentFieldDef();
							case "EMToRecords":
					return new EMail_EMToRecordsFieldDef();
							case "EMDF":
					return new EMail_EMDFFieldDef();
							case "EMCCRecords":
					return new EMail_EMCCRecordsFieldDef();
							case "EMBCC":
					return new EMail_EMBCCFieldDef();
							case "EMBCCRecords":
					return new EMail_EMBCCRecordsFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, EMSubject as [Description] from EMail 
			where EMId like @q or EMSubject like @q";
	}
	
}
public class DSTypeWordDocument : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "WrDocQuery":
					return "Query";
							case "WrDocCategory":
					return "Category";
							case "WrDocQueryType":
					return "Query Type";
							case "WrDocBuiltInQuery":
					return "Query";
							case "WrDocUseSimple":
					return "Simple Merge Fields";
							case "WrDocId":
					return "Id";
							case "WrDocTemplate":
					return "Template";
							case "WrDocTitle":
					return "Title";
							case "WrDocDataset":
					return "Applies To";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "WrDocQuery":
					return 722;
							case "WrDocCategory":
					return 746;
							case "WrDocQueryType":
					return 747;
							case "WrDocBuiltInQuery":
					return 748;
							case "WrDocUseSimple":
					return 785;
							case "WrDocId":
					return 699;
							case "WrDocTemplate":
					return 700;
							case "WrDocTitle":
					return 701;
							case "WrDocDataset":
					return 702;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "WrDocQuery":
				return IQApp.Operators.GetComboOperators(selected);							case "WrDocCategory":
				return IQApp.Operators.GetTextOperators(selected);							case "WrDocQueryType":
				return IQApp.Operators.GetComboOperators(selected);							case "WrDocBuiltInQuery":
				return IQApp.Operators.GetTextOperators(selected);							case "WrDocUseSimple":
				return IQApp.Operators.GetBooleanOperators(selected);							case "WrDocId":
				return IQApp.Operators.GetNumberOperators(selected);							case "WrDocTemplate":
				return IQApp.Operators.GetTextOperators(selected);							case "WrDocTitle":
				return IQApp.Operators.GetTextOperators(selected);							case "WrDocDataset":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'WrDocQuery', 'Query'
					union select 'WrDocCategory', 'Category'
					union select 'WrDocQueryType', 'Query Type'
					union select 'WrDocBuiltInQuery', 'Query'
					union select 'WrDocUseSimple', 'Simple Merge Fields'
					union select 'WrDocId', 'Id'
					union select 'WrDocTemplate', 'Template'
					union select 'WrDocTitle', 'Title'
					union select 'WrDocDataset', 'Applies To'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "WrDocQuery":
					return new WordDocument_WrDocQueryFieldDef();
							case "WrDocCategory":
					return new WordDocument_WrDocCategoryFieldDef();
							case "WrDocQueryType":
					return new WordDocument_WrDocQueryTypeFieldDef();
							case "WrDocBuiltInQuery":
					return new WordDocument_WrDocBuiltInQueryFieldDef();
							case "WrDocUseSimple":
					return new WordDocument_WrDocUseSimpleFieldDef();
							case "WrDocId":
					return new WordDocument_WrDocIdFieldDef();
							case "WrDocTemplate":
					return new WordDocument_WrDocTemplateFieldDef();
							case "WrDocTitle":
					return new WordDocument_WrDocTitleFieldDef();
							case "WrDocDataset":
					return new WordDocument_WrDocDatasetFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, WrDocTitle as [Description] from WordDocument 
			where WrDocId like @q or WrDocTitle like @q";
	}
	
}
public class DSTypeQuery : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "QryId":
					return "Id";
							case "QryName":
					return "Name";
							case "QrySysName":
					return "System Name";
							case "QryContent":
					return "Content";
							case "QryPrimaryDS":
					return "Primary Data Source";
							case "QryCategory":
					return "Category";
							case "QryRelationships":
					return "Relationships";
							case "QryScreen":
					return "Screen";
							case "QryType":
					return "Type";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "QryId":
					return 703;
							case "QryName":
					return 704;
							case "QrySysName":
					return 705;
							case "QryContent":
					return 706;
							case "QryPrimaryDS":
					return 707;
							case "QryCategory":
					return 791;
							case "QryRelationships":
					return 792;
							case "QryScreen":
					return 723;
							case "QryType":
					return 784;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "QryId":
				return IQApp.Operators.GetNumberOperators(selected);							case "QryName":
				return IQApp.Operators.GetTextOperators(selected);							case "QrySysName":
				return IQApp.Operators.GetTextOperators(selected);							case "QryContent":
				return IQApp.Operators.GetTextOperators(selected);							case "QryPrimaryDS":
				return IQApp.Operators.GetComboOperators(selected);							case "QryCategory":
				return IQApp.Operators.GetTextOperators(selected);							case "QryRelationships":
				return IQApp.Operators.GetTextOperators(selected);							case "QryScreen":
				return IQApp.Operators.GetComboOperators(selected);							case "QryType":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'QryId', 'Id'
					union select 'QryName', 'Name'
					union select 'QrySysName', 'System Name'
					union select 'QryContent', 'Content'
					union select 'QryPrimaryDS', 'Primary Data Source'
					union select 'QryCategory', 'Category'
					union select 'QryRelationships', 'Relationships'
					union select 'QryScreen', 'Screen'
					union select 'QryType', 'Type'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "QryId":
					return new Query_QryIdFieldDef();
							case "QryName":
					return new Query_QryNameFieldDef();
							case "QrySysName":
					return new Query_QrySysNameFieldDef();
							case "QryContent":
					return new Query_QryContentFieldDef();
							case "QryPrimaryDS":
					return new Query_QryPrimaryDSFieldDef();
							case "QryCategory":
					return new Query_QryCategoryFieldDef();
							case "QryRelationships":
					return new Query_QryRelationshipsFieldDef();
							case "QryScreen":
					return new Query_QryScreenFieldDef();
							case "QryType":
					return new Query_QryTypeFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, QryName as [Description] from Query 
			where QryId like @q or QryName like @q";
	}
	
}
public class DSTypeEmailTemplatess : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "EMTId":
					return "Id";
							case "EMTName":
					return "Name";
							case "EMTBody":
					return "Body";
							case "EMTSubject":
					return "Subject";
							case "EMTFromAddr":
					return "From Address";
							case "EMTToAddr":
					return "To Address";
							case "EMTCCAddr":
					return "CC Address";
							case "EMTBCCAddr":
					return "BCC Address";
							case "EMTQuery":
					return "Query";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "EMTId":
					return 724;
							case "EMTName":
					return 725;
							case "EMTBody":
					return 726;
							case "EMTSubject":
					return 727;
							case "EMTFromAddr":
					return 728;
							case "EMTToAddr":
					return 729;
							case "EMTCCAddr":
					return 730;
							case "EMTBCCAddr":
					return 731;
							case "EMTQuery":
					return 737;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "EMTId":
				return IQApp.Operators.GetNumberOperators(selected);							case "EMTName":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTBody":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTSubject":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTFromAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTToAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTCCAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTBCCAddr":
				return IQApp.Operators.GetTextOperators(selected);							case "EMTQuery":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'EMTId', 'Id'
					union select 'EMTName', 'Name'
					union select 'EMTBody', 'Body'
					union select 'EMTSubject', 'Subject'
					union select 'EMTFromAddr', 'From Address'
					union select 'EMTToAddr', 'To Address'
					union select 'EMTCCAddr', 'CC Address'
					union select 'EMTBCCAddr', 'BCC Address'
					union select 'EMTQuery', 'Query'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "EMTId":
					return new EmailTemplatess_EMTIdFieldDef();
							case "EMTName":
					return new EmailTemplatess_EMTNameFieldDef();
							case "EMTBody":
					return new EmailTemplatess_EMTBodyFieldDef();
							case "EMTSubject":
					return new EmailTemplatess_EMTSubjectFieldDef();
							case "EMTFromAddr":
					return new EmailTemplatess_EMTFromAddrFieldDef();
							case "EMTToAddr":
					return new EmailTemplatess_EMTToAddrFieldDef();
							case "EMTCCAddr":
					return new EmailTemplatess_EMTCCAddrFieldDef();
							case "EMTBCCAddr":
					return new EmailTemplatess_EMTBCCAddrFieldDef();
							case "EMTQuery":
					return new EmailTemplatess_EMTQueryFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, EMTName as [Description] from EmailTemplatess 
			where EMTId like @q or EMTName like @q";
	}
	
}
public class DSTypeStaff : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "StfId":
					return "Id";
							case "StfFN":
					return "Forename";
							case "StfSN":
					return "Surname";
							case "StfName":
					return "Name";
							case "StfUsername":
					return "Username";
							case "StfPassword":
					return "Password";
							case "StfEM":
					return "Email";
							case "StfSG":
					return "Security Groups";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "StfId":
					return 738;
							case "StfFN":
					return 739;
							case "StfSN":
					return 740;
							case "StfName":
					return 741;
							case "StfUsername":
					return 742;
							case "StfPassword":
					return 743;
							case "StfEM":
					return 744;
							case "StfSG":
					return 745;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "StfId":
				return IQApp.Operators.GetNumberOperators(selected);							case "StfFN":
				return IQApp.Operators.GetTextOperators(selected);							case "StfSN":
				return IQApp.Operators.GetTextOperators(selected);							case "StfName":
				return IQApp.Operators.GetTextOperators(selected);							case "StfUsername":
				return IQApp.Operators.GetTextOperators(selected);							case "StfPassword":
				return IQApp.Operators.GetTextOperators(selected);							case "StfEM":
				return IQApp.Operators.GetTextOperators(selected);							case "StfSG":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'StfId', 'Id'
					union select 'StfFN', 'Forename'
					union select 'StfSN', 'Surname'
					union select 'StfName', 'Name'
					union select 'StfUsername', 'Username'
					union select 'StfPassword', 'Password'
					union select 'StfEM', 'Email'
					union select 'StfSG', 'Security Groups'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "StfId":
					return new Staff_StfIdFieldDef();
							case "StfFN":
					return new Staff_StfFNFieldDef();
							case "StfSN":
					return new Staff_StfSNFieldDef();
							case "StfName":
					return new Staff_StfNameFieldDef();
							case "StfUsername":
					return new Staff_StfUsernameFieldDef();
							case "StfPassword":
					return new Staff_StfPasswordFieldDef();
							case "StfEM":
					return new Staff_StfEMFieldDef();
							case "StfSG":
					return new Staff_StfSGFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, StfName as [Description] from Staff 
			where StfId like @q or StfName like @q";
	}
	
}
public class DSTypeSMS : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "SMSId":
					return "Id";
							case "SMSContent":
					return "Content";
							case "SMSDestination":
					return "Destination";
							case "SMSDataset":
					return "Dataset";
							case "SMSRecordID":
					return "RecordID";
							case "SMSDateQueued":
					return "Queued";
							case "SMSDateConfirmed":
					return "Delivered";
							case "SMSStatus":
					return "Status";
							case "SMSStatusMsg":
					return "Status Message";
							case "SMSSender":
					return "Sender";
							case "SMSTemplate":
					return "Template";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "SMSId":
					return 749;
							case "SMSContent":
					return 750;
							case "SMSDestination":
					return 751;
							case "SMSDataset":
					return 752;
							case "SMSRecordID":
					return 753;
							case "SMSDateQueued":
					return 754;
							case "SMSDateConfirmed":
					return 755;
							case "SMSStatus":
					return 756;
							case "SMSStatusMsg":
					return 757;
							case "SMSSender":
					return 764;
							case "SMSTemplate":
					return 765;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "SMSId":
				return IQApp.Operators.GetNumberOperators(selected);							case "SMSContent":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSDestination":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSDataset":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSRecordID":
				return IQApp.Operators.GetNumberOperators(selected);							case "SMSDateQueued":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSDateConfirmed":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSStatus":
				return IQApp.Operators.GetComboOperators(selected);							case "SMSStatusMsg":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSSender":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSTemplate":
				return IQApp.Operators.GetComboOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'SMSId', 'Id'
					union select 'SMSContent', 'Content'
					union select 'SMSDestination', 'Destination'
					union select 'SMSDataset', 'Dataset'
					union select 'SMSRecordID', 'RecordID'
					union select 'SMSDateQueued', 'Queued'
					union select 'SMSDateConfirmed', 'Delivered'
					union select 'SMSStatus', 'Status'
					union select 'SMSStatusMsg', 'Status Message'
					union select 'SMSSender', 'Sender'
					union select 'SMSTemplate', 'Template'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "SMSId":
					return new SMS_SMSIdFieldDef();
							case "SMSContent":
					return new SMS_SMSContentFieldDef();
							case "SMSDestination":
					return new SMS_SMSDestinationFieldDef();
							case "SMSDataset":
					return new SMS_SMSDatasetFieldDef();
							case "SMSRecordID":
					return new SMS_SMSRecordIDFieldDef();
							case "SMSDateQueued":
					return new SMS_SMSDateQueuedFieldDef();
							case "SMSDateConfirmed":
					return new SMS_SMSDateConfirmedFieldDef();
							case "SMSStatus":
					return new SMS_SMSStatusFieldDef();
							case "SMSStatusMsg":
					return new SMS_SMSStatusMsgFieldDef();
							case "SMSSender":
					return new SMS_SMSSenderFieldDef();
							case "SMSTemplate":
					return new SMS_SMSTemplateFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, SMSDestination as [Description] from SMS 
			where SMSId like @q or SMSDestination like @q";
	}
	
}
public class DSTypeSMSTemplate : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "SMSTQuery":
					return "Query";
							case "SMSTId":
					return "Id";
							case "SMSTContent":
					return "Content";
							case "SMSTDestination":
					return "Destination";
							case "SMSTName":
					return "Name";
							case "SMSTDataset":
					return "Applies To";
							case "SMSTSender":
					return "Sender";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "SMSTQuery":
					return 790;
							case "SMSTId":
					return 758;
							case "SMSTContent":
					return 759;
							case "SMSTDestination":
					return 760;
							case "SMSTName":
					return 761;
							case "SMSTDataset":
					return 762;
							case "SMSTSender":
					return 763;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "SMSTQuery":
				return IQApp.Operators.GetComboOperators(selected);							case "SMSTId":
				return IQApp.Operators.GetNumberOperators(selected);							case "SMSTContent":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSTDestination":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSTName":
				return IQApp.Operators.GetTextOperators(selected);							case "SMSTDataset":
				return IQApp.Operators.GetComboOperators(selected);							case "SMSTSender":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'SMSTQuery', 'Query'
					union select 'SMSTId', 'Id'
					union select 'SMSTContent', 'Content'
					union select 'SMSTDestination', 'Destination'
					union select 'SMSTName', 'Name'
					union select 'SMSTDataset', 'Applies To'
					union select 'SMSTSender', 'Sender'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "SMSTQuery":
					return new SMSTemplate_SMSTQueryFieldDef();
							case "SMSTId":
					return new SMSTemplate_SMSTIdFieldDef();
							case "SMSTContent":
					return new SMSTemplate_SMSTContentFieldDef();
							case "SMSTDestination":
					return new SMSTemplate_SMSTDestinationFieldDef();
							case "SMSTName":
					return new SMSTemplate_SMSTNameFieldDef();
							case "SMSTDataset":
					return new SMSTemplate_SMSTDatasetFieldDef();
							case "SMSTSender":
					return new SMSTemplate_SMSTSenderFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, SMSTName as [Description] from SMSTemplate 
			where SMSTId like @q or SMSTName like @q";
	}
	
}
public class DSTypeAlerts : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "AlrtId":
					return "Id";
							case "AlrtUserID":
					return "User";
							case "AlrtData":
					return "Data";
							case "AlrtTitle":
					return "Title";
							case "AlrtQueueDate":
					return "Alert Date";
							case "AlrtCompletedDat":
					return "CompletedDate";
							case "AlrtCallbackUrl":
					return "Callback URL";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "AlrtId":
					return 777;
							case "AlrtUserID":
					return 778;
							case "AlrtData":
					return 779;
							case "AlrtTitle":
					return 780;
							case "AlrtQueueDate":
					return 781;
							case "AlrtCompletedDat":
					return 782;
							case "AlrtCallbackUrl":
					return 783;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "AlrtId":
				return IQApp.Operators.GetNumberOperators(selected);							case "AlrtUserID":
				return IQApp.Operators.GetComboOperators(selected);							case "AlrtData":
				return IQApp.Operators.GetTextOperators(selected);							case "AlrtTitle":
				return IQApp.Operators.GetTextOperators(selected);							case "AlrtQueueDate":
				return IQApp.Operators.GetNumberOperators(selected);							case "AlrtCompletedDat":
				return IQApp.Operators.GetNumberOperators(selected);							case "AlrtCallbackUrl":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'AlrtId', 'Id'
					union select 'AlrtUserID', 'User'
					union select 'AlrtData', 'Data'
					union select 'AlrtTitle', 'Title'
					union select 'AlrtQueueDate', 'Alert Date'
					union select 'AlrtCompletedDat', 'CompletedDate'
					union select 'AlrtCallbackUrl', 'Callback URL'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "AlrtId":
					return new Alerts_AlrtIdFieldDef();
							case "AlrtUserID":
					return new Alerts_AlrtUserIDFieldDef();
							case "AlrtData":
					return new Alerts_AlrtDataFieldDef();
							case "AlrtTitle":
					return new Alerts_AlrtTitleFieldDef();
							case "AlrtQueueDate":
					return new Alerts_AlrtQueueDateFieldDef();
							case "AlrtCompletedDat":
					return new Alerts_AlrtCompletedDatFieldDef();
							case "AlrtCallbackUrl":
					return new Alerts_AlrtCallbackUrlFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, AlrtTitle as [Description] from Alerts 
			where AlrtId like @q or AlrtTitle like @q";
	}
	
}
public class DSTypeReporting : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "RptId":
					return "Id";
							case "RptTitle":
					return "New Field";
							case "RptContent":
					return "New Field";
							case "RptDataset":
					return "New Field";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "RptId":
					return 814;
							case "RptTitle":
					return 815;
							case "RptContent":
					return 816;
							case "RptDataset":
					return 817;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "RptId":
				return IQApp.Operators.GetNumberOperators(selected);							case "RptTitle":
				return IQApp.Operators.GetTextOperators(selected);							case "RptContent":
				return IQApp.Operators.GetTextOperators(selected);							case "RptDataset":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'RptId', 'Id'
					union select 'RptTitle', 'New Field'
					union select 'RptContent', 'New Field'
					union select 'RptDataset', 'New Field'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "RptId":
					return new Reporting_RptIdFieldDef();
							case "RptTitle":
					return new Reporting_RptTitleFieldDef();
							case "RptContent":
					return new Reporting_RptContentFieldDef();
							case "RptDataset":
					return new Reporting_RptDatasetFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, RptTitle as [Description] from Reporting 
			where RptId like @q or RptTitle like @q";
	}
	
}
public class DSTypeDelZone : IDSTypeMapper {
	
	public string GetFieldTitle(string DF) {
		switch(DF) {
							case "DelZId":
					return "Id";
							case "DelZName":
					return "Name";
					}
		return "";
	}
	public int GetFieldID(string DF) {
		switch(DF) {
							case "DelZId":
					return 818;
							case "DelZName":
					return 819;
					}
		return -1;
	}
	public string GetFieldOperators(string DF, int selected) {
		switch(DF) {
							case "DelZId":
				return IQApp.Operators.GetNumberOperators(selected);							case "DelZName":
				return IQApp.Operators.GetTextOperators(selected);					}
		return "";
	}
	public List<Pair<string, string>> DataFieldsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DataFieldsAsQuery());
    }
	public string DataFieldsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'DelZId', 'Id'
					union select 'DelZName', 'Name'
				";
	}

	public IFieldDefinition GetDFDefinition(string DF) {
		switch(DF) {
							case "DelZId":
					return new DelZone_DelZIdFieldDef();
							case "DelZName":
					return new DelZone_DelZNameFieldDef();
					}
		return null;
	}

	public string RecordsQuery() {
		return @"select RecordID as KeyValue, DelZName as [Description] from DelZone 
			where DelZId like @q or DelZName like @q";
	}
	
}
public class DSMapper : IDSMapper {
	
	public IDSTypeMapper GetDS(string DSName) {
		switch(DSName) {
					case "Contact":										
				return new DSTypeContact();
					case "Orders":										
				return new DSTypeOrders();
					case "OrderLine":										
				return new DSTypeOrderLine();
					case "Job":										
				return new DSTypeJob();
					case "JobLine":										
				return new DSTypeJobLine();
					case "Inv":										
				return new DSTypeInv();
					case "InvLine":										
				return new DSTypeInvLine();
					case "CN":										
				return new DSTypeCN();
					case "UKOrder":										
				return new DSTypeUKOrder();
					case "FerryRoute":										
				return new DSTypeFerryRoute();
					case "InvComment":										
				return new DSTypeInvComment();
					case "VATCodes":										
				return new DSTypeVATCodes();
					case "JobCost":										
				return new DSTypeJobCost();
					case "CertShip":										
				return new DSTypeCertShip();
					case "CNLine":										
				return new DSTypeCNLine();
					case "Driver":										
				return new DSTypeDriver();
					case "ExchRate":										
				return new DSTypeExchRate();
					case "Trailer":										
				return new DSTypeTrailer();
					case "PeriodInv":										
				return new DSTypePeriodInv();
					case "Week":										
				return new DSTypeWeek();
					case "DriverHrs":										
				return new DSTypeDriverHrs();
					case "InvBatch":										
				return new DSTypeInvBatch();
					case "PackageType":										
				return new DSTypePackageType();
					case "BottleSize":										
				return new DSTypeBottleSize();
					case "PalletType":										
				return new DSTypePalletType();
					case "EADNum":										
				return new DSTypeEADNum();
					case "ShipDoc":										
				return new DSTypeShipDoc();
					case "Truck":										
				return new DSTypeTruck();
					case "TruckMileage":										
				return new DSTypeTruckMileage();
					case "Customer":										
				return new DSTypeCustomer();
					case "Country":										
				return new DSTypeCountry();
					case "REDSOrder":										
				return new DSTypeREDSOrder();
					case "REDSOrdLine":										
				return new DSTypeREDSOrdLine();
					case "REDSTax":										
				return new DSTypeREDSTax();
					case "DutyRateHist":										
				return new DSTypeDutyRateHist();
					case "REDSEAD":										
				return new DSTypeREDSEAD();
					case "IStatRec":										
				return new DSTypeIStatRec();
					case "Months":										
				return new DSTypeMonths();
					case "ChangeReq":										
				return new DSTypeChangeReq();
					case "EMail":										
				return new DSTypeEMail();
					case "WordDocument":										
				return new DSTypeWordDocument();
					case "Query":										
				return new DSTypeQuery();
					case "EmailTemplatess":										
				return new DSTypeEmailTemplatess();
					case "Staff":										
				return new DSTypeStaff();
					case "SMS":										
				return new DSTypeSMS();
					case "SMSTemplate":										
				return new DSTypeSMSTemplate();
					case "Alerts":										
				return new DSTypeAlerts();
					case "Reporting":										
				return new DSTypeReporting();
					case "DelZone":										
				return new DSTypeDelZone();
				}
		return null;
	}
	public string GetDSName(int id) {
		switch(id) {
				case 1:
			return "Contact";

				case 2:
			return "Orders";

				case 3:
			return "OrderLine";

				case 4:
			return "Job";

				case 5:
			return "JobLine";

				case 6:
			return "Inv";

				case 7:
			return "InvLine";

				case 8:
			return "CN";

				case 9:
			return "UKOrder";

				case 10:
			return "FerryRoute";

				case 11:
			return "InvComment";

				case 12:
			return "VATCodes";

				case 14:
			return "JobCost";

				case 15:
			return "CertShip";

				case 16:
			return "CNLine";

				case 17:
			return "Driver";

				case 18:
			return "ExchRate";

				case 19:
			return "Trailer";

				case 20:
			return "PeriodInv";

				case 21:
			return "Week";

				case 22:
			return "DriverHrs";

				case 23:
			return "InvBatch";

				case 26:
			return "PackageType";

				case 27:
			return "BottleSize";

				case 28:
			return "PalletType";

				case 29:
			return "EADNum";

				case 30:
			return "ShipDoc";

				case 31:
			return "Truck";

				case 32:
			return "TruckMileage";

				case 33:
			return "Customer";

				case 34:
			return "Country";

				case 35:
			return "REDSOrder";

				case 36:
			return "REDSOrdLine";

				case 37:
			return "REDSTax";

				case 38:
			return "DutyRateHist";

				case 39:
			return "REDSEAD";

				case 40:
			return "IStatRec";

				case 42:
			return "Months";

				case 43:
			return "ChangeReq";

				case 45:
			return "EMail";

				case 46:
			return "WordDocument";

				case 47:
			return "Query";

				case 50:
			return "EmailTemplatess";

				case 51:
			return "Staff";

				case 52:
			return "SMS";

				case 53:
			return "SMSTemplate";

				case 54:
			return "Alerts";

				case 56:
			return "Reporting";

				case 57:
			return "DelZone";

				}
		return "";
	}
	public string GetKeyColumnName(string DS) {
		switch(DS) {
							case "Contact":
					return "ContId";
							case "Orders":
					return "OrdId";
							case "OrderLine":
					return "OrdLOrder";
							case "Job":
					return "JobId";
							case "JobLine":
					return "JobLJobNo";
							case "Inv":
					return "InvId";
							case "InvLine":
					return "InvLInvNo";
							case "CN":
					return "CNId";
							case "UKOrder":
					return "UKOId";
							case "FerryRoute":
					return "FRId";
							case "InvComment":
					return "InvCId";
							case "VATCodes":
					return "VATId";
							case "JobCost":
					return "JobCJobNo";
							case "CertShip":
					return "CSId";
							case "CNLine":
					return "CNLNo";
							case "Driver":
					return "DrvId";
							case "ExchRate":
					return "ExRId";
							case "Trailer":
					return "TrlId";
							case "PeriodInv":
					return "PInvId";
							case "Week":
					return "WkId";
							case "DriverHrs":
					return "DrvHDriver";
							case "InvBatch":
					return "InvBId";
							case "PackageType":
					return "PackId";
							case "BottleSize":
					return "BSzId";
							case "PalletType":
					return "PallId";
							case "EADNum":
					return "EADOrder";
							case "ShipDoc":
					return "SDId";
							case "Truck":
					return "TrkId";
							case "TruckMileage":
					return "TrkMTruck";
							case "Customer":
					return "CustId";
							case "Country":
					return "CtryId";
							case "REDSOrder":
					return "RDOrdId";
							case "REDSOrdLine":
					return "RDOLRDId";
							case "REDSTax":
					return "RDTaxId";
							case "DutyRateHist":
					return "DRHId";
							case "REDSEAD":
					return "RDEADRDId";
							case "IStatRec":
					return "IStId";
							case "Months":
					return "MthId";
							case "ChangeReq":
					return "CRId";
							case "EMail":
					return "EMId";
							case "WordDocument":
					return "WrDocId";
							case "Query":
					return "QryId";
							case "EmailTemplatess":
					return "EMTId";
							case "Staff":
					return "StfId";
							case "SMS":
					return "SMSId";
							case "SMSTemplate":
					return "SMSTId";
							case "Alerts":
					return "AlrtId";
							case "Reporting":
					return "RptId";
							case "DelZone":
					return "DelZId";
					}
		return "";
	}
	
	public string GetTitleColumnName(string DS) {
		switch(DS) {
							case "Contact":
					return "ContName";
							case "Orders":
					return "OrdId";
							case "OrderLine":
					return "OrdLOrder";
							case "Job":
					return "JobNo";
							case "JobLine":
					return "JobLJobNo";
							case "Inv":
					return "InvId";
							case "InvLine":
					return "InvLInvNo";
							case "CN":
					return "CNId";
							case "UKOrder":
					return "UKOId";
							case "FerryRoute":
					return "FRName";
							case "InvComment":
					return "InvCId";
							case "VATCodes":
					return "VATCode";
							case "JobCost":
					return "JobCJobNo";
							case "CertShip":
					return "CSId";
							case "CNLine":
					return "CNLNo";
							case "Driver":
					return "DrvName";
							case "ExchRate":
					return "ExRName";
							case "Trailer":
					return "TrlFleetNo";
							case "PeriodInv":
					return "PInvId";
							case "Week":
					return "WkId";
							case "DriverHrs":
					return "DrvHDriver";
							case "InvBatch":
					return "InvBId";
							case "PackageType":
					return "PackName";
							case "BottleSize":
					return "BSzSize";
							case "PalletType":
					return "PallName";
							case "EADNum":
					return "EADNo";
							case "ShipDoc":
					return "SDId";
							case "Truck":
					return "TrkName";
							case "TruckMileage":
					return "TrkMTruck";
							case "Customer":
					return "CustName";
							case "Country":
					return "CtryName";
							case "REDSOrder":
					return "RDOrdId";
							case "REDSOrdLine":
					return "RDOLRDId";
							case "REDSTax":
					return "RDTaxCode";
							case "DutyRateHist":
					return "DRHTaxCode";
							case "REDSEAD":
					return "RDEADId";
							case "IStatRec":
					return "IStId";
							case "Months":
					return "MthName";
							case "ChangeReq":
					return "CRName";
							case "EMail":
					return "EMSubject";
							case "WordDocument":
					return "WrDocTitle";
							case "Query":
					return "QryName";
							case "EmailTemplatess":
					return "EMTName";
							case "Staff":
					return "StfName";
							case "SMS":
					return "SMSDestination";
							case "SMSTemplate":
					return "SMSTName";
							case "Alerts":
					return "AlrtTitle";
							case "Reporting":
					return "RptTitle";
							case "DelZone":
					return "DelZName";
					}
		return "";
	}

	public string GetDefaultOrderBy(string DS) {
		switch(DS) {
							case "Contact":
					return " Order by DF31";
							case "Orders":
					return " Order by DF39";
							case "OrderLine":
					return " Order by DF68";
							case "Job":
					return " Order by DF76";
							case "JobLine":
					return " Order by DF89";
							case "Inv":
					return " Order by DF94";
							case "InvLine":
					return " Order by DF118";
							case "CN":
					return " Order by DF201";
							case "UKOrder":
					return " Order by DF129";
							case "FerryRoute":
					return " Order by DF87";
							case "InvComment":
					return " Order by DF115";
							case "VATCodes":
					return " Order by DF125, DF126, DF127";
							case "JobCost":
					return " Order by DF168";
							case "CertShip":
					return " Order by DF178";
							case "CNLine":
					return " Order by DF224";
							case "Driver":
					return " Order by DF233";
							case "ExchRate":
					return " Order by DF254 DESC";
							case "Trailer":
					return " Order by DF259";
							case "PeriodInv":
					return " Order by DF271";
							case "Week":
					return " Order by DF279";
							case "DriverHrs":
					return " Order by DF277 DESC";
							case "InvBatch":
					return " Order by DF292";
							case "PackageType":
					return " Order by DF319";
							case "BottleSize":
					return " Order by DF324";
							case "PalletType":
					return " Order by DF323";
							case "EADNum":
					return " Order by DF342";
							case "ShipDoc":
					return " Order by DF347";
							case "Truck":
					return " Order by DF398";
							case "TruckMileage":
					return " Order by DF400, DF401";
							case "Customer":
					return " Order by DF410";
							case "Country":
					return " Order by DF423";
							case "REDSOrder":
					return " Order by DF521";
							case "REDSOrdLine":
					return " Order by DF530";
							case "REDSTax":
					return " Order by DF541";
							case "DutyRateHist":
					return " Order by DF547, DF546";
							case "REDSEAD":
					return " Order by DF556";
							case "IStatRec":
					return " Order by DF626";
							case "Months":
					return " Order by DF656";
							case "ChangeReq":
					return " Order by DF660";
							case "EMail":
					return " Order by DF695";
							case "WordDocument":
					return "";
							case "Query":
					return "";
							case "EmailTemplatess":
					return "";
							case "Staff":
					return "";
							case "SMS":
					return "";
							case "SMSTemplate":
					return "";
							case "Alerts":
					return "";
							case "Reporting":
					return "";
							case "DelZone":
					return "";
					}
		return "";
	}
	public string GetFilterSQL(string DS, bool AppendWithWHERE = false) {
		switch(DS) {
							case "Contact":
					return AppendWithWHERE ? "" : "";
							case "Orders":
					return AppendWithWHERE ? "" : "";
							case "OrderLine":
					return AppendWithWHERE ? "" : "";
							case "Job":
					return AppendWithWHERE ? "" : "";
							case "JobLine":
					return AppendWithWHERE ? "" : "";
							case "Inv":
					return AppendWithWHERE ? "" : "";
							case "InvLine":
					return AppendWithWHERE ? "" : "";
							case "CN":
					return AppendWithWHERE ? "" : "";
							case "UKOrder":
					return AppendWithWHERE ? "" : "";
							case "FerryRoute":
					return AppendWithWHERE ? "" : "";
							case "InvComment":
					return AppendWithWHERE ? "" : "";
							case "VATCodes":
					return AppendWithWHERE ? "" : "";
							case "JobCost":
					return AppendWithWHERE ? "" : "";
							case "CertShip":
					return AppendWithWHERE ? "" : "";
							case "CNLine":
					return AppendWithWHERE ? "" : "";
							case "Driver":
					return AppendWithWHERE ? "" : "";
							case "ExchRate":
					return AppendWithWHERE ? "" : "";
							case "Trailer":
					return AppendWithWHERE ? "" : "";
							case "PeriodInv":
					return AppendWithWHERE ? "" : "";
							case "Week":
					return AppendWithWHERE ? "" : "";
							case "DriverHrs":
					return AppendWithWHERE ? "" : "";
							case "InvBatch":
					return AppendWithWHERE ? "" : "";
							case "PackageType":
					return AppendWithWHERE ? "" : "";
							case "BottleSize":
					return AppendWithWHERE ? "" : "";
							case "PalletType":
					return AppendWithWHERE ? "" : "";
							case "EADNum":
					return AppendWithWHERE ? "" : "";
							case "ShipDoc":
					return AppendWithWHERE ? "" : "";
							case "Truck":
					return AppendWithWHERE ? "" : "";
							case "TruckMileage":
					return AppendWithWHERE ? "" : "";
							case "Customer":
					return AppendWithWHERE ? "" : "";
							case "Country":
					return AppendWithWHERE ? "" : "";
							case "REDSOrder":
					return AppendWithWHERE ? "" : "";
							case "REDSOrdLine":
					return AppendWithWHERE ? "" : "";
							case "REDSTax":
					return AppendWithWHERE ? "" : "";
							case "DutyRateHist":
					return AppendWithWHERE ? "" : "";
							case "REDSEAD":
					return AppendWithWHERE ? "" : "";
							case "IStatRec":
					return AppendWithWHERE ? "" : "";
							case "Months":
					return AppendWithWHERE ? "" : "";
							case "ChangeReq":
					return AppendWithWHERE ? "" : "";
							case "EMail":
					return AppendWithWHERE ? "" : "";
							case "WordDocument":
					return AppendWithWHERE ? "" : "";
							case "Query":
					return AppendWithWHERE ? "" : "";
							case "EmailTemplatess":
					return AppendWithWHERE ? "" : "";
							case "Staff":
					return AppendWithWHERE ? "" : "";
							case "SMS":
					return AppendWithWHERE ? "" : "";
							case "SMSTemplate":
					return AppendWithWHERE ? "" : "";
							case "Alerts":
					return AppendWithWHERE ? "" : "";
							case "Reporting":
					return AppendWithWHERE ? "" : "";
							case "DelZone":
					return AppendWithWHERE ? "" : "";
					}
		return "";
	}

	public string SQLQueryAllFileFields  { get  { return  @" select * from (
			select 'EMail' as Dataset, RecordID, EMAttach as FilePath, isnull(cast(EMSubject as varchar), 'E-mails') as Name  from EMail where EMAttach is not null
		union
			select 'WordDocument' as Dataset, RecordID, WrDocTemplate as FilePath, isnull(cast(WrDocTitle as varchar), 'Word Document') as Name  from WordDocument where WrDocTemplate is not null
		union
			select '', 0, '','') P ";
		}
	}
	public List<Pair<string, string>> DatasetsAsPairs()
    {
        return IQApp.DB.Load<Pair<string, string>>(DatasetsAsQuery());
    }
	public string DatasetsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select 'Contact', 'Customer Contacts'
					union select 'Orders', 'Orders'
					union select 'OrderLine', 'Order Lines'
					union select 'Job', 'Jobs'
					union select 'JobLine', 'Job Lines'
					union select 'Inv', 'Invoices'
					union select 'InvLine', 'Invoice Lines'
					union select 'CN', 'Credit Notes'
					union select 'UKOrder', 'UK Orders'
					union select 'FerryRoute', 'Ferry Routes'
					union select 'InvComment', 'Invoice Comments'
					union select 'VATCodes', 'VAT Codes'
					union select 'JobCost', 'Job Costs'
					union select 'CertShip', 'Certificates of Shipment'
					union select 'CNLine', 'Credit Note Lines'
					union select 'Driver', 'Drivers'
					union select 'ExchRate', 'Exchange Rates'
					union select 'Trailer', 'Trailers'
					union select 'PeriodInv', 'Period Inv Includes'
					union select 'Week', 'Weeks'
					union select 'DriverHrs', 'Driver Hours'
					union select 'InvBatch', 'Invoice Batches'
					union select 'PackageType', 'Package Types'
					union select 'BottleSize', 'Bottle Sizes'
					union select 'PalletType', 'Pallet Types'
					union select 'EADNum', 'eAD Numbers'
					union select 'ShipDoc', 'Shipping Documents'
					union select 'Truck', 'Trucks'
					union select 'TruckMileage', 'Truck Fuel / Mileage'
					union select 'Customer', 'Customers'
					union select 'Country', 'Countries'
					union select 'REDSOrder', 'REDS Order Header'
					union select 'REDSOrdLine', 'REDS Order Lines'
					union select 'REDSTax', 'REDS Tax Codes'
					union select 'DutyRateHist', 'Duty Rate History'
					union select 'REDSEAD', 'REDS eAD Numbers'
					union select 'IStatRec', 'Intrastat Records'
					union select 'Months', 'Months'
					union select 'ChangeReq', 'Change Requests'
					union select 'EMail', 'E-mails'
					union select 'WordDocument', 'Word Document'
					union select 'Query', 'Query'
					union select 'EmailTemplatess', 'Email Templates'
					union select 'Staff', 'Staff'
					union select 'SMS', 'SMS'
					union select 'SMSTemplate', 'SMS Template'
					union select 'Alerts', 'Alerts'
					union select 'Reporting', 'Reporting'
					union select 'DelZone', 'Delivery Zones'
				";
	}
}

public static class DSUtil { 
	public static string CustTypeAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Client' as Description  union select '2' as KeyValue, 'Supplier' as Description  union select '3' as KeyValue, 'Bonded Warehouse' as Description  union select '4' as KeyValue, 'Duty Paid Delivery' as Description  union select '5' as KeyValue, 'Transporter' as Description  union select '6' as KeyValue, 'Collection Point' as Description  union select '7' as KeyValue, 'Exporter' as Description  union select '8' as KeyValue, 'Importer' as Description  union select '9' as KeyValue, 'Clearing Agent' as Description ";}public static string CustCurrAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Pound Sterling' as Description  union select '2' as KeyValue, 'Euro' as Description  union select '3' as KeyValue, 'US Dollar' as Description ";}public static string OrdExpImpAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Import' as Description  union select '2' as KeyValue, 'Export' as Description ";}public static string OrdStatusAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Duty Paid' as Description  union select '2' as KeyValue, 'Under Bond' as Description ";}public static string OrdVATPaidByAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Client' as Description  union select '2' as KeyValue, 'Consignee' as Description  union select '3' as KeyValue, 'Supplier' as Description  union select '4' as KeyValue, 'Delivery' as Description ";}public static string OrdBondFromAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Client' as Description  union select '2' as KeyValue, 'Consignee' as Description  union select '3' as KeyValue, 'Supplier' as Description  union select '4' as KeyValue, 'Delivery Point' as Description ";}public static string JobLDelPointAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'As Order' as Description  union select '2' as KeyValue, 'FTL' as Description ";}public static string JobAccMonthAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '101' as KeyValue, 'JAN 2003' as Description  union select '102' as KeyValue, 'FEB 2003' as Description  union select '103' as KeyValue, 'MARCH 2003' as Description  union select '104' as KeyValue, 'APRIL 2003' as Description  union select '105' as KeyValue, 'MAY 2003' as Description  union select '106' as KeyValue, 'JUNE 2003' as Description  union select '107' as KeyValue, 'JULY  2003' as Description  union select '108' as KeyValue, 'AUG 2003' as Description  union select '109' as KeyValue, 'SEPT 2003' as Description  union select '110' as KeyValue, 'OCT 2003' as Description  union select '111' as KeyValue, 'NOV 2003' as Description  union select '112' as KeyValue, 'DEC 2003' as Description  union select '113' as KeyValue, 'JAN 2004' as Description  union select '114' as KeyValue, 'FEB 2004' as Description  union select '115' as KeyValue, 'MARCH 2004' as Description  union select '116' as KeyValue, 'APRIL 2004' as Description  union select '117' as KeyValue, 'MAY 2004' as Description  union select '118' as KeyValue, 'JUNE 2004' as Description  union select '119' as KeyValue, 'JULY  2004' as Description  union select '120' as KeyValue, 'AUG 2004' as Description  union select '121' as KeyValue, 'SEPT 2004' as Description  union select '122' as KeyValue, 'OCT 2004' as Description  union select '123' as KeyValue, 'NOV 2004' as Description  union select '124' as KeyValue, 'DEC 2004' as Description  union select '125' as KeyValue, 'JAN 2005' as Description  union select '126' as KeyValue, 'FEB 2005' as Description  union select '127' as KeyValue, 'MAR 2005' as Description  union select '128' as KeyValue, 'APR 2005' as Description  union select '129' as KeyValue, 'MAY 2005' as Description  union select '130' as KeyValue, 'JUN 2005' as Description  union select '131' as KeyValue, 'JUL 2005' as Description  union select '132' as KeyValue, 'AUG 2005' as Description  union select '133' as KeyValue, 'SEP 2005' as Description  union select '134' as KeyValue, 'OCT 2005' as Description  union select '135' as KeyValue, 'NOV 2005' as Description  union select '136' as KeyValue, 'DEC 2005' as Description  union select '137' as KeyValue, 'JAN 2006' as Description  union select '138' as KeyValue, 'FEB 2006' as Description  union select '139' as KeyValue, 'MAR 2006' as Description  union select '140' as KeyValue, 'APR 2006' as Description  union select '141' as KeyValue, 'MAY 2006' as Description  union select '142' as KeyValue, 'JUN 2006' as Description  union select '143' as KeyValue, 'JUL 2006' as Description  union select '144' as KeyValue, 'AUG 2006' as Description  union select '145' as KeyValue, 'SEP 2006' as Description  union select '146' as KeyValue, 'OCT 2006' as Description  union select '147' as KeyValue, 'NOV 2006' as Description  union select '148' as KeyValue, 'DEC 2006' as Description  union select '149' as KeyValue, 'JAN 2007' as Description  union select '150' as KeyValue, 'FEB 2007' as Description  union select '255' as KeyValue, 'DUMMY' as Description ";}public static string CustDelZoneAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '11' as KeyValue, 'Northampton (Tesco)' as Description  union select '12' as KeyValue, 'Corsham' as Description  union select '13' as KeyValue, 'Nailsea' as Description  union select '14' as KeyValue, 'Burton-on-Trent' as Description  union select '15' as KeyValue, 'Preston' as Description  union select '16' as KeyValue, 'Rotherham' as Description  union select '17' as KeyValue, 'London E16' as Description  union select '18' as KeyValue, 'Hoddesdon' as Description  union select '19' as KeyValue, 'Dorchester' as Description  union select '20' as KeyValue, 'Barking' as Description  union select '21' as KeyValue, 'Basildon (Schenker)' as Description  union select '22' as KeyValue, 'Cirencester' as Description  union select '23' as KeyValue, 'Tilbury' as Description  union select '24' as KeyValue, 'Basildon (Eurobox)' as Description  union select '25' as KeyValue, 'Coventry (Morrisons)' as Description  union select '26' as KeyValue, 'Scotland' as Description  union select '27' as KeyValue, 'Moulton (Tesco)' as Description  union select '28' as KeyValue, 'Belvedere' as Description  union select '31' as KeyValue, 'North WEST' as Description  union select '32' as KeyValue, 'East Anglia' as Description  union select '33' as KeyValue, 'Midlands' as Description  union select '34' as KeyValue, 'Wales & Bristol' as Description  union select '35' as KeyValue, 'London' as Description  union select '36' as KeyValue, 'South-East' as Description  union select '37' as KeyValue, 'South-West' as Description  union select '38' as KeyValue, 'North EAST' as Description  union select '39' as KeyValue, 'Home Counties' as Description  union select '40' as KeyValue, 'Wakefield (Morrisons)' as Description  union select '41' as KeyValue, 'Basingstoke' as Description  union select '42' as KeyValue, 'West Hallam' as Description  union select '43' as KeyValue, 'Theale (Nr Reading)' as Description  union select '44' as KeyValue, 'Northampton (Morrisons)' as Description ";}public static string InvBTypeAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Import Inv' as Description  union select '2' as KeyValue, 'Export Inv' as Description  union select '3' as KeyValue, 'Duty Inv' as Description  union select '4' as KeyValue, 'Import CN' as Description  union select '5' as KeyValue, 'Export CN' as Description ";}public static string CustAADSysAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Electronic' as Description  union select '2' as KeyValue, 'Paper' as Description ";}public static string OrdGBWKNoFromAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '4' as KeyValue, 'Delivery Point' as Description ";}public static string IStNAT1AsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, '1' as Description  union select '2' as KeyValue, '2' as Description  union select '3' as KeyValue, '3' as Description  union select '4' as KeyValue, '4' as Description  union select '5' as KeyValue, '5' as Description  union select '6' as KeyValue, '6' as Description  union select '7' as KeyValue, '7' as Description  union select '8' as KeyValue, '8' as Description  union select '9' as KeyValue, '9' as Description ";}public static string IStNAT2AsQuery() { return @"select 0 as KeyValue, '' as Description  union select '0' as KeyValue, '0' as Description  union select '6' as KeyValue, '6' as Description  union select '7' as KeyValue, '7' as Description  union select '8' as KeyValue, '8' as Description ";}public static string IStTranspModeAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Sea' as Description  union select '2' as KeyValue, 'Rail' as Description  union select '3' as KeyValue, 'Road' as Description  union select '4' as KeyValue, 'Air' as Description  union select '5' as KeyValue, 'Post' as Description  union select '6' as KeyValue, 'Not Allocated' as Description  union select '7' as KeyValue, 'Fixed Installations' as Description  union select '8' as KeyValue, 'Inland Waterway' as Description  union select '9' as KeyValue, 'Own Propulsion' as Description ";}public static string CRTypeAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Fault / bug' as Description  union select '2' as KeyValue, 'Change request' as Description  union select '3' as KeyValue, 'Question' as Description ";}public static string CRPriorityAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Urgent' as Description  union select '2' as KeyValue, 'High' as Description  union select '3' as KeyValue, 'Medium' as Description  union select '4' as KeyValue, 'Low' as Description ";}public static string CRStatusAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Open - with Intrinsiq' as Description  union select '2' as KeyValue, 'Open - with FTL' as Description  union select '3' as KeyValue, 'On hold' as Description  union select '4' as KeyValue, 'Closed' as Description ";}public static string EMStatusAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Unsent' as Description  union select '2' as KeyValue, 'Sent' as Description  union select '3' as KeyValue, 'Delete' as Description ";}public static string StfSGAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Full Rights' as Description  union select '2' as KeyValue, 'Database User' as Description  union select '3' as KeyValue, 'Customer' as Description ";}public static string WrDocQueryTypeAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '0' as KeyValue, 'User Written' as Description  union select '1' as KeyValue, 'Built In' as Description ";}public static string SMSStatusAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'Pending' as Description  union select '2' as KeyValue, 'Sent' as Description  union select '3' as KeyValue, 'Delivered' as Description ";}public static string QryTypeAsQuery() { return @"select 0 as KeyValue, '' as Description  union select '1' as KeyValue, 'SQL' as Description  union select '2' as KeyValue, 'IronRuby' as Description  union select '3' as KeyValue, 'Excel Report' as Description ";}
	public static string InvFreightDutyAsQuery() { return @"select '0' as KeyValue, '' as Description  union select 'Duty' as KeyValue, 'Duty' as Description  union select 'Freight' as KeyValue, 'Freight' as Description ";}public static string CustLangAsQuery() { return @"select '0' as KeyValue, '' as Description  union select 'ENG' as KeyValue, 'English' as Description  union select 'FRA' as KeyValue, 'French' as Description  union select 'GER' as KeyValue, 'German' as Description  union select 'ITA' as KeyValue, 'Italian' as Description  union select 'SPN' as KeyValue, 'Spanish' as Description ";}public static string InvLChargeTypeAsQuery() { return @"select '0' as KeyValue, '' as Description  union select '001001' as KeyValue, 'Services rendered' as Description  union select '001003' as KeyValue, 'CMR Haulage' as Description  union select '001004' as KeyValue, 'RHA Haulage' as Description  union select '001005' as KeyValue, 'Ferry Charges' as Description  union select '001006' as KeyValue, 'Air Freight' as Description  union select '001007' as KeyValue, 'Ancillary Charges' as Description  union select '001009' as KeyValue, 'Warehousing' as Description  union select '001010' as KeyValue, 'Claims' as Description  union select '001012' as KeyValue, 'Operations Insurance' as Description  union select '001013' as KeyValue, 'Disbursements' as Description  union select '001014' as KeyValue, 'Rent' as Description  union select '001015' as KeyValue, 'Diesel Supplies' as Description  union select '001017' as KeyValue, 'Fuel Surcharge' as Description  union select '001041' as KeyValue, 'Trailer/Vehicle Hire' as Description  union select '001085' as KeyValue, 'Interest' as Description  union select '004001' as KeyValue, 'Duties and VAT' as Description  union select '004003' as KeyValue, 'Import VAT' as Description ";}public static string InvImpExpAsQuery() { return @"select '0' as KeyValue, '' as Description  union select 'Exp' as KeyValue, 'Export' as Description  union select 'Imp' as KeyValue, 'Import' as Description ";}public static string IStDelTermsAsQuery() { return @"select '0' as KeyValue, '' as Description  union select 'CIF' as KeyValue, 'CIF' as Description  union select 'DDU/DDP' as KeyValue, 'DDU/DDP' as Description  union select 'EXW' as KeyValue, 'EXW' as Description  union select 'FOB' as KeyValue, 'FOB' as Description  union select 'XXX' as KeyValue, 'XXX' as Description ";}
	public static List<QueryRelationship> FindRelationships(List<QueryResultInfo> q1, 
            List<QueryResultInfo> q2, string ParentTable)
    {
        // Step 1 - get rid of any DS tables (if they are using the older table structure)
   
        foreach(var itm in q1)
        {
            if(itm.source_table.ToNotNull().StartsWith("DS"))
                itm.source_table = IQApp.Datasets.GetDSName(itm.source_table.Replace("DS", "").ToInt());
        }
        foreach (var itm in q2)
        {
            if (itm.source_table.ToNotNull().StartsWith("DS"))
                itm.source_table = IQApp.Datasets.GetDSName(itm.source_table.Replace("DS", "").ToInt());
        }

        List<QueryRelationship> ret = new List<QueryRelationship>();

        // Step 2 - search for relationships
        List<string> parentTables = q1.Select(f => f.source_table).Distinct().ToList();
        List<string> childTables = q2.Select(f => f.source_table).Distinct().ToList();
        foreach (var itm in parentTables) {
            foreach (var child in childTables)
            {
                var qry = DSUtil.Relationships.Where(f => f.One == itm && f.Many == child
                && 
                q1.Where(g=> g.name == f.ParentKeyDFName).Any() && q2.Where(g=> g.name == f.LinkDFName).Any()
                );
                if(qry.Any())
                {
                    ret.Add(new QueryRelationship()
                    {
                        ChildCol = qry.First().LinkDFName,
                        ParentCol = qry.First().ParentKeyDFName,
                        ParentTable = ParentTable
                    });
                }
            }
        }
        return ret;
    }

	// Relationships
	public static List<DSRelationship> Relationships { 
		get { 
			List<DSRelationship> relations = new List<DSRelationship>();
						return relations;
		}
	}

	public static string DatasetsQueryRecId(string DS) {
		switch(DS) {
							case "Contact":
					return "select RecordID as KeyValue, cast(ContName as varchar) + ' (' + cast(ContId as varchar) + ')' as [Description], ContName as Search1, ContId as Search2 from Contact";
							case "Orders":
					return "select RecordID as KeyValue, cast(OrdId as varchar) + ' (' + cast(OrdId as varchar) + ')' as [Description], OrdId as Search1, OrdId as Search2 from Orders";
							case "OrderLine":
					return "select RecordID as KeyValue, cast(OrdLOrder as varchar) + ' (' + cast(OrdLOrder as varchar) + ')' as [Description], OrdLOrder as Search1, OrdLOrder as Search2 from OrderLine";
							case "Job":
					return "select RecordID as KeyValue, cast(JobNo as varchar) + ' (' + cast(JobId as varchar) + ')' as [Description], JobNo as Search1, JobId as Search2 from Job";
							case "JobLine":
					return "select RecordID as KeyValue, cast(JobLJobNo as varchar) + ' (' + cast(JobLJobNo as varchar) + ')' as [Description], JobLJobNo as Search1, JobLJobNo as Search2 from JobLine";
							case "Inv":
					return "select RecordID as KeyValue, cast(InvId as varchar) + ' (' + cast(InvId as varchar) + ')' as [Description], InvId as Search1, InvId as Search2 from Inv";
							case "InvLine":
					return "select RecordID as KeyValue, cast(InvLInvNo as varchar) + ' (' + cast(InvLInvNo as varchar) + ')' as [Description], InvLInvNo as Search1, InvLInvNo as Search2 from InvLine";
							case "CN":
					return "select RecordID as KeyValue, cast(CNId as varchar) + ' (' + cast(CNId as varchar) + ')' as [Description], CNId as Search1, CNId as Search2 from CN";
							case "UKOrder":
					return "select RecordID as KeyValue, cast(UKOId as varchar) + ' (' + cast(UKOId as varchar) + ')' as [Description], UKOId as Search1, UKOId as Search2 from UKOrder";
							case "FerryRoute":
					return "select RecordID as KeyValue, cast(FRName as varchar) + ' (' + cast(FRId as varchar) + ')' as [Description], FRName as Search1, FRId as Search2 from FerryRoute";
							case "InvComment":
					return "select RecordID as KeyValue, cast(InvCId as varchar) + ' (' + cast(InvCId as varchar) + ')' as [Description], InvCId as Search1, InvCId as Search2 from InvComment";
							case "VATCodes":
					return "select RecordID as KeyValue, cast(VATCode as varchar) + ' (' + cast(VATId as varchar) + ')' as [Description], VATCode as Search1, VATId as Search2 from VATCodes";
							case "JobCost":
					return "select RecordID as KeyValue, cast(JobCJobNo as varchar) + ' (' + cast(JobCJobNo as varchar) + ')' as [Description], JobCJobNo as Search1, JobCJobNo as Search2 from JobCost";
							case "CertShip":
					return "select RecordID as KeyValue, cast(CSId as varchar) + ' (' + cast(CSId as varchar) + ')' as [Description], CSId as Search1, CSId as Search2 from CertShip";
							case "CNLine":
					return "select RecordID as KeyValue, cast(CNLNo as varchar) + ' (' + cast(CNLNo as varchar) + ')' as [Description], CNLNo as Search1, CNLNo as Search2 from CNLine";
							case "Driver":
					return "select RecordID as KeyValue, cast(DrvName as varchar) + ' (' + cast(DrvId as varchar) + ')' as [Description], DrvName as Search1, DrvId as Search2 from Driver";
							case "ExchRate":
					return "select RecordID as KeyValue, cast(ExRName as varchar) + ' (' + cast(ExRId as varchar) + ')' as [Description], ExRName as Search1, ExRId as Search2 from ExchRate";
							case "Trailer":
					return "select RecordID as KeyValue, cast(TrlFleetNo as varchar) + ' (' + cast(TrlId as varchar) + ')' as [Description], TrlFleetNo as Search1, TrlId as Search2 from Trailer";
							case "PeriodInv":
					return "select RecordID as KeyValue, cast(PInvId as varchar) + ' (' + cast(PInvId as varchar) + ')' as [Description], PInvId as Search1, PInvId as Search2 from PeriodInv";
							case "Week":
					return "select RecordID as KeyValue, cast(WkId as varchar) + ' (' + cast(WkId as varchar) + ')' as [Description], WkId as Search1, WkId as Search2 from Week";
							case "DriverHrs":
					return "select RecordID as KeyValue, cast(DrvHDriver as varchar) + ' (' + cast(DrvHDriver as varchar) + ')' as [Description], DrvHDriver as Search1, DrvHDriver as Search2 from DriverHrs";
							case "InvBatch":
					return "select RecordID as KeyValue, cast(InvBId as varchar) + ' (' + cast(InvBId as varchar) + ')' as [Description], InvBId as Search1, InvBId as Search2 from InvBatch";
							case "PackageType":
					return "select RecordID as KeyValue, cast(PackName as varchar) + ' (' + cast(PackId as varchar) + ')' as [Description], PackName as Search1, PackId as Search2 from PackageType";
							case "BottleSize":
					return "select RecordID as KeyValue, cast(BSzSize as varchar) + ' (' + cast(BSzId as varchar) + ')' as [Description], BSzSize as Search1, BSzId as Search2 from BottleSize";
							case "PalletType":
					return "select RecordID as KeyValue, cast(PallName as varchar) + ' (' + cast(PallId as varchar) + ')' as [Description], PallName as Search1, PallId as Search2 from PalletType";
							case "EADNum":
					return "select RecordID as KeyValue, cast(EADNo as varchar) + ' (' + cast(EADOrder as varchar) + ')' as [Description], EADNo as Search1, EADOrder as Search2 from EADNum";
							case "ShipDoc":
					return "select RecordID as KeyValue, cast(SDId as varchar) + ' (' + cast(SDId as varchar) + ')' as [Description], SDId as Search1, SDId as Search2 from ShipDoc";
							case "Truck":
					return "select RecordID as KeyValue, cast(TrkName as varchar) + ' (' + cast(TrkId as varchar) + ')' as [Description], TrkName as Search1, TrkId as Search2 from Truck";
							case "TruckMileage":
					return "select RecordID as KeyValue, cast(TrkMTruck as varchar) + ' (' + cast(TrkMTruck as varchar) + ')' as [Description], TrkMTruck as Search1, TrkMTruck as Search2 from TruckMileage";
							case "Customer":
					return "select RecordID as KeyValue, cast(CustName as varchar) + ' (' + cast(CustId as varchar) + ')' as [Description], CustName as Search1, CustId as Search2 from Customer";
							case "Country":
					return "select RecordID as KeyValue, cast(CtryName as varchar) + ' (' + cast(CtryId as varchar) + ')' as [Description], CtryName as Search1, CtryId as Search2 from Country";
							case "REDSOrder":
					return "select RecordID as KeyValue, cast(RDOrdId as varchar) + ' (' + cast(RDOrdId as varchar) + ')' as [Description], RDOrdId as Search1, RDOrdId as Search2 from REDSOrder";
							case "REDSOrdLine":
					return "select RecordID as KeyValue, cast(RDOLRDId as varchar) + ' (' + cast(RDOLRDId as varchar) + ')' as [Description], RDOLRDId as Search1, RDOLRDId as Search2 from REDSOrdLine";
							case "REDSTax":
					return "select RecordID as KeyValue, cast(RDTaxCode as varchar) + ' (' + cast(RDTaxId as varchar) + ')' as [Description], RDTaxCode as Search1, RDTaxId as Search2 from REDSTax";
							case "DutyRateHist":
					return "select RecordID as KeyValue, cast(DRHTaxCode as varchar) + ' (' + cast(DRHId as varchar) + ')' as [Description], DRHTaxCode as Search1, DRHId as Search2 from DutyRateHist";
							case "REDSEAD":
					return "select RecordID as KeyValue, cast(RDEADId as varchar) + ' (' + cast(RDEADRDId as varchar) + ')' as [Description], RDEADId as Search1, RDEADRDId as Search2 from REDSEAD";
							case "IStatRec":
					return "select RecordID as KeyValue, cast(IStId as varchar) + ' (' + cast(IStId as varchar) + ')' as [Description], IStId as Search1, IStId as Search2 from IStatRec";
							case "Months":
					return "select RecordID as KeyValue, cast(MthName as varchar) + ' (' + cast(MthId as varchar) + ')' as [Description], MthName as Search1, MthId as Search2 from Months";
							case "ChangeReq":
					return "select RecordID as KeyValue, cast(CRName as varchar) + ' (' + cast(CRId as varchar) + ')' as [Description], CRName as Search1, CRId as Search2 from ChangeReq";
							case "EMail":
					return "select RecordID as KeyValue, cast(EMSubject as varchar) + ' (' + cast(EMId as varchar) + ')' as [Description], EMSubject as Search1, EMId as Search2 from EMail";
							case "WordDocument":
					return "select RecordID as KeyValue, cast(WrDocTitle as varchar) + ' (' + cast(WrDocId as varchar) + ')' as [Description], WrDocTitle as Search1, WrDocId as Search2 from WordDocument";
							case "Query":
					return "select RecordID as KeyValue, cast(QryName as varchar) + ' (' + cast(QryId as varchar) + ')' as [Description], QryName as Search1, QryId as Search2 from Query";
							case "EmailTemplatess":
					return "select RecordID as KeyValue, cast(EMTName as varchar) + ' (' + cast(EMTId as varchar) + ')' as [Description], EMTName as Search1, EMTId as Search2 from EmailTemplatess";
							case "Staff":
					return "select RecordID as KeyValue, cast(StfName as varchar) + ' (' + cast(StfId as varchar) + ')' as [Description], StfName as Search1, StfId as Search2 from Staff";
							case "SMS":
					return "select RecordID as KeyValue, cast(SMSDestination as varchar) + ' (' + cast(SMSId as varchar) + ')' as [Description], SMSDestination as Search1, SMSId as Search2 from SMS";
							case "SMSTemplate":
					return "select RecordID as KeyValue, cast(SMSTName as varchar) + ' (' + cast(SMSTId as varchar) + ')' as [Description], SMSTName as Search1, SMSTId as Search2 from SMSTemplate";
							case "Alerts":
					return "select RecordID as KeyValue, cast(AlrtTitle as varchar) + ' (' + cast(AlrtId as varchar) + ')' as [Description], AlrtTitle as Search1, AlrtId as Search2 from Alerts";
							case "Reporting":
					return "select RecordID as KeyValue, cast(RptTitle as varchar) + ' (' + cast(RptId as varchar) + ')' as [Description], RptTitle as Search1, RptId as Search2 from Reporting";
							case "DelZone":
					return "select RecordID as KeyValue, cast(DelZName as varchar) + ' (' + cast(DelZId as varchar) + ')' as [Description], DelZName as Search1, DelZId as Search2 from DelZone";
					}
		return "select '' as KeyValue, '' as [Description]";
	}
	public static string GetTitleField(string DSName) {
		switch(DSName) {
				case "Contact":
			return "ContName";

				case "Orders":
			return "OrdId";

				case "OrderLine":
			return "OrdLOrder";

				case "Job":
			return "JobNo";

				case "JobLine":
			return "JobLJobNo";

				case "Inv":
			return "InvId";

				case "InvLine":
			return "InvLInvNo";

				case "CN":
			return "CNId";

				case "UKOrder":
			return "UKOId";

				case "FerryRoute":
			return "FRName";

				case "InvComment":
			return "InvCId";

				case "VATCodes":
			return "VATCode";

				case "JobCost":
			return "JobCJobNo";

				case "CertShip":
			return "CSId";

				case "CNLine":
			return "CNLNo";

				case "Driver":
			return "DrvName";

				case "ExchRate":
			return "ExRName";

				case "Trailer":
			return "TrlFleetNo";

				case "PeriodInv":
			return "PInvId";

				case "Week":
			return "WkId";

				case "DriverHrs":
			return "DrvHDriver";

				case "InvBatch":
			return "InvBId";

				case "PackageType":
			return "PackName";

				case "BottleSize":
			return "BSzSize";

				case "PalletType":
			return "PallName";

				case "EADNum":
			return "EADNo";

				case "ShipDoc":
			return "SDId";

				case "Truck":
			return "TrkName";

				case "TruckMileage":
			return "TrkMTruck";

				case "Customer":
			return "CustName";

				case "Country":
			return "CtryName";

				case "REDSOrder":
			return "RDOrdId";

				case "REDSOrdLine":
			return "RDOLRDId";

				case "REDSTax":
			return "RDTaxCode";

				case "DutyRateHist":
			return "DRHTaxCode";

				case "REDSEAD":
			return "RDEADId";

				case "IStatRec":
			return "IStId";

				case "Months":
			return "MthName";

				case "ChangeReq":
			return "CRName";

				case "EMail":
			return "EMSubject";

				case "WordDocument":
			return "WrDocTitle";

				case "Query":
			return "QryName";

				case "EmailTemplatess":
			return "EMTName";

				case "Staff":
			return "StfName";

				case "SMS":
			return "SMSDestination";

				case "SMSTemplate":
			return "SMSTName";

				case "Alerts":
			return "AlrtTitle";

				case "Reporting":
			return "RptTitle";

				case "DelZone":
			return "DelZName";

				}
		return "";
	}
	public static string GetKeyField(string DSName) {
		switch(DSName) {
				case "Contact":
			return "ContId";

				case "Orders":
			return "OrdId";

				case "OrderLine":
			return "OrdLOrder";

				case "Job":
			return "JobId";

				case "JobLine":
			return "JobLJobNo";

				case "Inv":
			return "InvId";

				case "InvLine":
			return "InvLInvNo";

				case "CN":
			return "CNId";

				case "UKOrder":
			return "UKOId";

				case "FerryRoute":
			return "FRId";

				case "InvComment":
			return "InvCId";

				case "VATCodes":
			return "VATId";

				case "JobCost":
			return "JobCJobNo";

				case "CertShip":
			return "CSId";

				case "CNLine":
			return "CNLNo";

				case "Driver":
			return "DrvId";

				case "ExchRate":
			return "ExRId";

				case "Trailer":
			return "TrlId";

				case "PeriodInv":
			return "PInvId";

				case "Week":
			return "WkId";

				case "DriverHrs":
			return "DrvHDriver";

				case "InvBatch":
			return "InvBId";

				case "PackageType":
			return "PackId";

				case "BottleSize":
			return "BSzId";

				case "PalletType":
			return "PallId";

				case "EADNum":
			return "EADOrder";

				case "ShipDoc":
			return "SDId";

				case "Truck":
			return "TrkId";

				case "TruckMileage":
			return "TrkMTruck";

				case "Customer":
			return "CustId";

				case "Country":
			return "CtryId";

				case "REDSOrder":
			return "RDOrdId";

				case "REDSOrdLine":
			return "RDOLRDId";

				case "REDSTax":
			return "RDTaxId";

				case "DutyRateHist":
			return "DRHId";

				case "REDSEAD":
			return "RDEADRDId";

				case "IStatRec":
			return "IStId";

				case "Months":
			return "MthId";

				case "ChangeReq":
			return "CRId";

				case "EMail":
			return "EMId";

				case "WordDocument":
			return "WrDocId";

				case "Query":
			return "QryId";

				case "EmailTemplatess":
			return "EMTId";

				case "Staff":
			return "StfId";

				case "SMS":
			return "SMSId";

				case "SMSTemplate":
			return "SMSTId";

				case "Alerts":
			return "AlrtId";

				case "Reporting":
			return "RptId";

				case "DelZone":
			return "DelZId";

				}
		return "";
	}
}


public static class FunctionsUtil {

	public static List<Pair<string, string>> FunctionsAsPairs()
    { 
        return IQApp.DB.Load<Pair<string, string>>(FunctionsAsQuery());
    }
	public static string FunctionsAsQuery() {
		return @"select 
			'' as KeyValue, '' as [Description]
						union select '1', 'Copy Order to New'
					union select '2', 'Delete Job Line'
					union select '3', 'Delivery / Goods Update'
					union select '5', 'E-Mail Availability'
					union select '6', 'E-Mail FreightTrack Details'
					union select '7', 'Set FreightTrack Password'
					union select '8', 'Send E-Mail'
					union select '10', 'Re-Calculate Status'
					union select '11', 'Print Trailer Report'
					union select '12', 'Create Period Invoice'
					union select '13', 'Enter Driver Hours'
					union select '14', 'Delete Job'
					union select '15', 'View Order'
					union select '16', 'Export Selected Batch'
					union select '17', 'Edit Invoice'
					union select '19', 'Create Supplier Spreadsheet'
					union select '20', 'Delete Order(s)'
					union select '21', 'View Invoice(s)'
					union select '22', 'View Job'
					union select '23', 'Print Shipping Document'
					union select '24', 'Preview Shipping Document'
					union select '25', 'REDS Create Duty Invoices'
					union select '26', 'REDS Lock Down Previous Month'
					union select '27', 'Send Unsent Invoices'
					union select '82', 'Date From'
					union select '85', 'StaffAndDest'
					union select '86', 'StaffSelect'
					union select '87', 'TransportDet'
					union select '88', 'TransportCharges'
					union select '90', 'OrdersRequired'
					union select '91', 'DateFromTo'
					union select '94', 'DateType'
					union select '95', 'MonthRange'
					union select '96', 'Zone'
					union select '97', 'SummaryDetail'
					union select '98', 'ShowSeparatePageAddress'
					union select '99', 'ShowSeparatePage'
					union select '100', 'ShowFTLDAN'
					union select '101', 'UnDecWithDates'
					union select '102', 'UnDecWithMonth'
					union select '103', 'JobSingle'
					union select '104', 'ExciseDetail'
					union select '105', 'ExciseSummary'
					union select '106', 'HM2Form'
					union select '120', 'Job Search'
					union select '121', 'Order Search'
					union select '122', 'Customer Search'
				";
	}

}

public class CreateDutyInvModel : ScreenBase {
	public CreateDutyInvModel() {
			}
	public override void ForEachElement(Action<IElementBase> action) {
			}
	
	
			public override string GetView() {
				return "~/Views/Functions/CreateDutyInv.cshtml";
			}
}
public class CreateDutyInvController : ScreenController<CreateDutyInvModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/CreateDutyInv.cshtml")]
    public partial class IQ6_Views_CreateDutyInv_cshtml : System.Web.Mvc.WebViewPage<FTL.CreateDutyInvModel>
    {
        public IQ6_Views_CreateDutyInv_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "REDS Create Duty Invoices";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<CreateDutyInvModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 
 


public class CreateInvModel : ScreenBase {
	public CreateInvModel() {
			}
	public override void ForEachElement(Action<IElementBase> action) {
			}
	
	
			public override string GetView() {
				return "~/Views/Functions/CreateInv.cshtml";
			}
}
public class CreateInvController : ScreenController<CreateInvModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/CreateInv.cshtml")]
    public partial class IQ6_Views_CreateInv_cshtml : System.Web.Mvc.WebViewPage<FTL.CreateInvModel>
    {
        public IQ6_Views_CreateInv_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Create Invoice";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<CreateInvModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 
 

public class CreatePeriodInv_FEClientNo : 
	 ElementBase<string>{
	public CreatePeriodInv_FEClientNo() :base("ClientNoValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class CreatePeriodInv_FEInvoiceNo : 
	 ElementBase<string>{
	public CreatePeriodInv_FEInvoiceNo() :base("InvoiceNoValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class CreatePeriodInv_FECreateInv : 
	 ElementBase<string>{
	public CreatePeriodInv_FECreateInv() :base("CreateInvValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class CreatePeriodInv_FEPrintInv : 
	 ElementBase<string>{
	public CreatePeriodInv_FEPrintInv() :base("PrintInvValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class CreatePeriodInvModel : ScreenBase {
	public CreatePeriodInvModel() {
					ClientNo  = new CreatePeriodInv_FEClientNo();
					InvoiceNo  = new CreatePeriodInv_FEInvoiceNo();
					CreateInv  = new CreatePeriodInv_FECreateInv();
					PrintInv  = new CreatePeriodInv_FEPrintInv();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(ClientNo);
					action(InvoiceNo);
					action(CreateInv);
					action(PrintInv);
			}
	
	
				public CreatePeriodInv_FEClientNo ClientNo  { get;set;}
	
	public string ClientNoValue { 
		get { return ClientNo.DataValue;}
		set{ ClientNo.Value = value; }
	}
			public CreatePeriodInv_FEInvoiceNo InvoiceNo  { get;set;}
	
	public string InvoiceNoValue { 
		get { return InvoiceNo.DataValue;}
		set{ InvoiceNo.Value = value; }
	}
			public CreatePeriodInv_FECreateInv CreateInv  { get;set;}
	
	public string CreateInvValue { 
		get { return CreateInv.DataValue;}
		set{ CreateInv.Value = value; }
	}
			public CreatePeriodInv_FEPrintInv PrintInv  { get;set;}
	
	public string PrintInvValue { 
		get { return PrintInv.DataValue;}
		set{ PrintInv.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/CreatePeriodInv.cshtml";
			}
}
public class CreatePeriodInvController : ScreenController<CreatePeriodInvModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/CreatePeriodInv.cshtml")]
    public partial class IQ6_Views_CreatePeriodInv_cshtml : System.Web.Mvc.WebViewPage<FTL.CreatePeriodInvModel>
    {
        public IQ6_Views_CreatePeriodInv_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Create Period Invoice";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<CreatePeriodInvModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:99px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/CreatePeriodInv_PeriodInvIncludes.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/CreatePeriodInv_PeriodInvIncludes.cshtml")]
    public partial class IQ6_Views_CreatePeriodInv_PeriodInvIncludes_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_CreatePeriodInv_PeriodInvIncludes_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 112)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel505111", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.ClientNo.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#ClientNoValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Client No:\r\n\t\t</label><input ");
                   Write(!Model.ClientNo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.ClientNo.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/CreatePeriodInv/Callback/?fname=Cli" +
"entNo\',$(this));\" \r\n\t\t\ttype=\'text\' \r\n\t\t\tname=\'ClientNoValue\' \r\n\t\t\tvalue=\'");
              Write(Model.ClientNo.ValueFormatted);
WriteLiteral("\' \r\n\t\t\tstyle=\'position: absolute; left:210px;height:21px;width:80px;top:3px;\'/>\t\t" +
"<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'ClientNoOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 720), Tuple.Create("\'", 892)
, Tuple.Create(Tuple.Create("", 728), Tuple.Create("position:", 728), true)
, Tuple.Create(Tuple.Create(" ", 737), Tuple.Create("absolute;", 738), true)
, Tuple.Create(Tuple.Create(" ", 747), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 748), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 791), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.ClientNoOperator))
, 798), false)
, Tuple.Create(Tuple.Create("\t\t", 865), Tuple.Create("</select>", 867), true)
, Tuple.Create(Tuple.Create("\r\n\t", 876), Tuple.Create("<label", 879), true)
, Tuple.Create(Tuple.Create(" ", 885), Tuple.Create("class=", 886), true)
);
WriteLiteral("IQLabel505112 ");
                            Write(!Model.InvoiceNo.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#InvoiceNoValue-Popover\" style=\'position:absolute;font-size:12px;" +
"text-align:right;left:5px;height:21px;width:120px;top:28px;\'>Invoice No:\r\n\t\t</la" +
"bel><input ");
                   Write(!Model.InvoiceNo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.InvoiceNo.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("CreatePeriodInv/Callback/?fname=InvoiceNo");
WriteLiteral("\',$(this));\" \r\n\t\t\ttype=\'text\' \r\n\t\t\tname=\'InvoiceNoValue\' \r\n\t\t\tvalue=\'");
              Write(Model.InvoiceNo.ValueFormatted);
WriteLiteral("\' \r\n\t\t\tstyle=\'position: absolute; left:210px;height:21px;width:80px;top:28px;\'/>\t" +
"\t<select class=\'form-control\' name=\'InvoiceNoOperator\' style=\'position: absolute" +
"; left:130px;height:21px;width:80px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetTextOperators(Model.InvoiceNoOperator)));
WriteLiteral("\t\t</select>\r\n\t\t\t\t<button");
WriteLiteral(" type=\'button\'");
WriteLiteral(" class=\'btn btn-primary\'");
WriteLiteral("   onclick=\"javascript:IQDirtyCallback(\'/CreatePeriodInv/Callback/?fname=CreateIn" +
"v\',$(this));\"");
WriteLiteral("   style=\'position: absolute; left:230px;height:46px;width:100px;top:53px;\'");
WriteLiteral(">Create Invoice</button>\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'CreateInvOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2034), Tuple.Create("\'", 2212)
, Tuple.Create(Tuple.Create("", 2042), Tuple.Create("position:", 2042), true)
, Tuple.Create(Tuple.Create(" ", 2051), Tuple.Create("absolute;", 2052), true)
, Tuple.Create(Tuple.Create(" ", 2061), Tuple.Create("left:130px;height:46px;width:100px;top:53px;>", 2062), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2107), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.CreateInvOperator))
, 2114), false)
, Tuple.Create(Tuple.Create("\t\t", 2182), Tuple.Create("</select>", 2184), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t", 2193), Tuple.Create("<button", 2199), true)
, Tuple.Create(Tuple.Create(" ", 2206), Tuple.Create("type=", 2207), true)
);
WriteLiteral("button\'");
WriteLiteral(" class=\'btn btn-primary\'");
WriteLiteral("   onclick=\"javascript:IQDirtyCallback(\'/CreatePeriodInv/Callback/?fname=PrintInv" +
"\',$(this));\"");
WriteLiteral("   style=\'position: absolute; left:450px;height:46px;width:100px;top:53px;\'");
WriteLiteral(">Print Invoice</button>\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'PrintInvOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2493), Tuple.Create("", 2654)
, Tuple.Create(Tuple.Create("", 2501), Tuple.Create("position:", 2501), true)
, Tuple.Create(Tuple.Create(" ", 2510), Tuple.Create("absolute;", 2511), true)
, Tuple.Create(Tuple.Create(" ", 2520), Tuple.Create("left:350px;height:46px;width:100px;top:53px;>", 2521), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2566), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.PrintInvOperator))
, 2573), false)
, Tuple.Create(Tuple.Create("\t\t", 2640), Tuple.Create("</select>", 2642), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2651), Tuple.Create("", 2651), true)
);
        }
    }
}
 

public class CustomerSearch_FEOrdId : 
	 ElementBase<string>{
	public CustomerSearch_FEOrdId() :base("OrdIdValue", "OrdId"
		)
	{
		Enabled = true;
	}
		
}
public class CustomerSearch_FEOrdCustOrd : 
	 ElementBase<string>{
	public CustomerSearch_FEOrdCustOrd() :base("OrdCustOrdValue", "OrdCustOrd"
		)
	{
		Enabled = true;
	}
		
}

public class CustomerSearchModel : ListScreenBase<Orders> {
	public CustomerSearchModel() {
					OrdId  = new CustomerSearch_FEOrdId();
					OrdCustOrd  = new CustomerSearch_FEOrdCustOrd();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(OrdId);
					action(OrdCustOrd);
			}
	
	
		public override void ForEachSearchElement(Action<IElementBase, int> action) {
					action(OrdId, OrdIdOperator);
					action(OrdCustOrd, OrdCustOrdOperator);
			}
	protected override string OrderBy => "RecordID asc";
	public override List<ListFieldDetail> Fields =>
			new List<ListFieldDetail>() {
							new ListFieldDetail() { Width = 40, DFName="CustId", Title="Company ID"},
							new ListFieldDetail() { Width = 80, DFName="CustName", Title="Company Name"},
							new ListFieldDetail() { Width = 80, DFName="CustTown", Title="Town"},
							new ListFieldDetail() { Width = 80, DFName="CustCounty", Title="County"},
				
			};

					public int OrdIdOperator { get;set;}
		public CustomerSearch_FEOrdId OrdId  { get;set;}
	
	public string OrdIdValue { 
		get { return OrdId.DataValue;}
		set{ OrdId.Value = value; }
	}
				public int OrdCustOrdOperator { get;set;}
		public CustomerSearch_FEOrdCustOrd OrdCustOrd  { get;set;}
	
	public string OrdCustOrdValue { 
		get { return OrdCustOrd.DataValue;}
		set{ OrdCustOrd.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/CustomerSearch.cshtml";
			}
}
public class CustomerSearchController : ListScreenController<CustomerSearchModel,Orders> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/CustomerSearch.cshtml")]
    public partial class IQ6_Views_CustomerSearch_cshtml : System.Web.Mvc.WebViewPage<FTL.CustomerSearchModel>
    {
        public IQ6_Views_CustomerSearch_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Customer Search";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<CustomerSearchModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(" >\r\n\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" onclick=\'DSSearch_RunSearch(\"/CustomerSearch/DrawList\")\'");
WriteLiteral(" class=\"btn btn-primary\"");
WriteLiteral(" value=\"Search\"");
WriteLiteral(" />\r\n\t\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(">\r\n\t\t\t<button");
WriteLiteral(" class=\"btn btn-default dropdown-toggle\"");
WriteLiteral(" type=\"button\"");
WriteLiteral(" id=\"dropdownMenu1\"");
WriteLiteral(" data-toggle=\"dropdown\"");
WriteLiteral(" aria-haspopup=\"true\"");
WriteLiteral(" aria-expanded=\"true\"");
WriteLiteral(">Export <span");
WriteLiteral(" class=\"caret\"");
WriteLiteral("></span></button>\r\n\t\t\t<ul");
WriteLiteral(" class=\"dropdown-menu\"");
WriteLiteral(" aria-labelledby=\"dropdownMenu1\"");
WriteLiteral(">\r\n\t\t\t\t<li><a");
WriteLiteral(" href=\'#\'");
WriteLiteral(" onclick=\'javascript:DSSearch_RunPageAction(\"/CustomerSearch/SearchExport/\")\'");
WriteLiteral(">Export Current Page</a></li>\r\n\t\t\t\t<li><a");
WriteLiteral(" onclick=\'javascript:DSSearch_RunPageAction(\"/CustomerSearch/SearchExportAll/\")\'");
WriteLiteral(" href=\'#\'");
WriteLiteral(">Export All Results</a></li>\r\n\t\t\t\t<li><a");
WriteLiteral(" href=\'#\'");
WriteLiteral(" onclick=\'javascript:if($(\"input[name=RecordIDs]\").val().length) {DSSearch_RunPag" +
"eAction(\"/CustomerSearch/SearchExportSelected\");} else { alert(\"You have not sel" +
"ected any records\"); }\'");
WriteLiteral(">Export Selected</a></li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n");
         foreach(var itm in DS.GetManager<Orders>().OnDrawListToolbar) {
			foreach(var elm in itm()) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t\t");
         foreach (var itm in DS.GlobalManager.OnDrawListToolbar)
        {
            foreach (var elem in itm.Invoke("Orders"))
            {
WriteLiteral("                ");
                 Write(Html.Raw(elem.HTML));
WriteLiteral("\r\n");
            }
        }
WriteLiteral("\t</div>\r\n\t<input");
WriteLiteral(" type=\"hidden\"");
WriteLiteral(" name=\"start\"");
WriteLiteral(" value=\"1\"");
WriteLiteral(" />\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/CustomerSearch_OrderSearch.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t<br");
WriteLiteral(" style=\'clear:both\'");
WriteLiteral(" />\r\n\t<div");
WriteLiteral(" id=\"resultsView\"");
WriteLiteral(">\r\n");
          Html.RenderAction("DrawList", "CustomerSearch"); 
WriteLiteral("\r\n\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/CustomerSearch_OrderSearch.cshtml")]
    public partial class IQ6_Views_CustomerSearch_OrderSearch_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_CustomerSearch_OrderSearch_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 109)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel108101", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.OrdId.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#OrdIdValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Order Number\r\n\t\t</label><input ");
                   Write(!Model.OrdId.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.OrdId.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/CustomerSearch/Callback/?fname=\',$(" +
"this));\" \r\n\t\t\ttype=\'text\' \r\n\t\t\tname=\'OrdIdValue\' \r\n\t\t\tvalue=\'");
              Write(Model.OrdId.ValueFormatted);
WriteLiteral("\' \r\n\t\t\tstyle=\'position: absolute; left:285px;height:21px;width:155px;top:3px;\'/>\t" +
"\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'OrdIdOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 693), Tuple.Create("\'", 865)
, Tuple.Create(Tuple.Create("", 701), Tuple.Create("position:", 701), true)
, Tuple.Create(Tuple.Create(" ", 710), Tuple.Create("absolute;", 711), true)
, Tuple.Create(Tuple.Create(" ", 720), Tuple.Create("left:130px;height:21px;width:155px;top:3px;>", 721), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 765), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.OrdIdOperator))
, 772), false)
, Tuple.Create(Tuple.Create("\t\t", 838), Tuple.Create("</select>", 840), true)
, Tuple.Create(Tuple.Create("\r\n\t", 849), Tuple.Create("<label", 852), true)
, Tuple.Create(Tuple.Create(" ", 858), Tuple.Create("class=", 859), true)
);
WriteLiteral("IQLabel108102 ");
                            Write(!Model.OrdCustOrd.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#OrdCustOrdValue-Popover\" style=\'position:absolute;font-size:12px" +
";text-align:right;left:440px;height:21px;width:120px;top:3px;\'>Client Order No\r\n" +
"\t\t</label><input ");
                   Write(!Model.OrdCustOrd.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.OrdCustOrd.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("CustomerSearch/Callback/?fname=\',$(this));\" \r\n\t\t\ttype=\'");
WriteLiteral("text\'");
WriteLiteral(" \r\n\t\t\tname=\'OrdCustOrdValue\'");
WriteAttribute("value", Tuple.Create(" \r\n\t\t\tvalue=\'", 1367), Tuple.Create("\'", 1412)
, Tuple.Create(Tuple.Create("", 1380), Tuple.Create<System.Object, System.Int32>(Model.OrdCustOrd.ValueFormatted
, 1380), false)
);
WriteLiteral(" \r\n\t\t\tstyle=\'position: absolute; left:718px;height:21px;width:153px;top:3px;\'");
WriteLiteral("/>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'OrdCustOrdOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 1548), Tuple.Create("", 1710)
, Tuple.Create(Tuple.Create("", 1556), Tuple.Create("position:", 1556), true)
, Tuple.Create(Tuple.Create(" ", 1565), Tuple.Create("absolute;", 1566), true)
, Tuple.Create(Tuple.Create(" ", 1575), Tuple.Create("left:565px;height:21px;width:153px;top:3px;>", 1576), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 1620), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.OrdCustOrdOperator))
, 1627), false)
, Tuple.Create(Tuple.Create("\t\t", 1696), Tuple.Create("</select>", 1698), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1707), Tuple.Create("", 1707), true)
);
        }
    }
}
 

public class DateFrom_FEDateFrom : 
	 DateElementBase
	{
	public DateFrom_FEDateFrom() :base("DateFromValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class DateFromModel : ReportBase {
	public DateFromModel() {
					DateFrom  = new DateFrom_FEDateFrom();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(DateFrom);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<DateFromModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_DateFrom_cshtml));
    }
	
				public DateFrom_FEDateFrom DateFrom  { get;set;}
	
	public DateTime DateFromValue { 
		get { return DateFrom.DataValue;}
		set{ DateFrom.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/DateFrom.cshtml";
			}
}
public class DateFromController : ScreenController<DateFromModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/DateFrom.cshtml")]
    public partial class IQ6_Views_DateFrom_cshtml : System.Web.Mvc.WebViewPage<FTL.DateFromModel>
    {
        public IQ6_Views_DateFrom_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Date From";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<DateFromModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/DateFrom_DateFrom.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/DateFrom_DateFrom.cshtml")]
    public partial class IQ6_Views_DateFrom_DateFrom_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_DateFrom_DateFrom_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 112)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel405211", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.DateFrom.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#DateFromValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Date From:\r\n\t\t</label><input   ");
                     Write(!Model.DateFrom.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateFrom.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/DateFrom/Callback/?fname=DateFrom\',$(th" +
"is));\"  type=\'text\' name=\'DateFromValue\' value=\'");
                                                                                                                                                                                                                                               Write(Model.DateFrom.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:3px;\'/>\t\t<sele" +
"ct");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateFromOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 735), Tuple.Create("", 896)
, Tuple.Create(Tuple.Create("", 743), Tuple.Create("position:", 743), true)
, Tuple.Create(Tuple.Create(" ", 752), Tuple.Create("absolute;", 753), true)
, Tuple.Create(Tuple.Create(" ", 762), Tuple.Create("left:130px;height:21px;width:57px;top:3px;>", 763), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 806), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateFromOperator))
, 813), false)
, Tuple.Create(Tuple.Create("\t\t", 882), Tuple.Create("</select>", 884), true)
, Tuple.Create(Tuple.Create("\r\n\t", 893), Tuple.Create("", 893), true)
);
        }
    }
}
 

public class DateFromTo_FEDateFrom : 
	 DateElementBase
	{
	public DateFromTo_FEDateFrom() :base("DateFromValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class DateFromTo_FEDateTo : 
	 DateElementBase
	{
	public DateFromTo_FEDateTo() :base("DateToValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class DateFromToModel : ReportBase {
	public DateFromToModel() {
					DateFrom  = new DateFromTo_FEDateFrom();
					DateTo  = new DateFromTo_FEDateTo();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(DateFrom);
					action(DateTo);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<DateFromToModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_DateFromTo_cshtml));
    }
	
				public DateFromTo_FEDateFrom DateFrom  { get;set;}
	
	public DateTime DateFromValue { 
		get { return DateFrom.DataValue;}
		set{ DateFrom.Value = value; }
	}
			public DateFromTo_FEDateTo DateTo  { get;set;}
	
	public DateTime DateToValue { 
		get { return DateTo.DataValue;}
		set{ DateTo.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/DateFromTo.cshtml";
			}
}
public class DateFromToController : ScreenController<DateFromToModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/DateFromTo.cshtml")]
    public partial class IQ6_Views_DateFromTo_cshtml : System.Web.Mvc.WebViewPage<FTL.DateFromToModel>
    {
        public IQ6_Views_DateFromTo_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "DateFromTo";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<DateFromToModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:49px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/DateFromTo_DateFromTo.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/DateFromTo_DateFromTo.cshtml")]
    public partial class IQ6_Views_DateFromTo_DateFromTo_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_DateFromTo_DateFromTo_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 112)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406111", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.DateFrom.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#DateFromValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Date From:\r\n\t\t</label><input   ");
                     Write(!Model.DateFrom.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateFrom.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/DateFromTo/Callback/?fname=DateFrom\',$(" +
"this));\"  type=\'text\' name=\'DateFromValue\' value=\'");
                                                                                                                                                                                                                                                 Write(Model.DateFrom.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:3px;\'/>\t\t<sele" +
"ct");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateFromOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 737), Tuple.Create("\'", 911)
, Tuple.Create(Tuple.Create("", 745), Tuple.Create("position:", 745), true)
, Tuple.Create(Tuple.Create(" ", 754), Tuple.Create("absolute;", 755), true)
, Tuple.Create(Tuple.Create(" ", 764), Tuple.Create("left:130px;height:21px;width:57px;top:3px;>", 765), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 808), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateFromOperator))
, 815), false)
, Tuple.Create(Tuple.Create("\t\t", 884), Tuple.Create("</select>", 886), true)
, Tuple.Create(Tuple.Create("\r\n\t", 895), Tuple.Create("<label", 898), true)
, Tuple.Create(Tuple.Create(" ", 904), Tuple.Create("class=", 905), true)
);
WriteLiteral("IQLabel406112 ");
                            Write(!Model.DateTo.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#DateToValue-Popover\" style=\'position:absolute;font-size:12px;tex" +
"t-align:right;left:5px;height:21px;width:120px;top:28px;\'>Date To:\r\n\t\t</label><i" +
"nput   ");
                     Write(!Model.DateTo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateTo.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("DateFromTo/Callback/?fname=DateTo");
WriteLiteral("\',$(this));\"  type=\'text\' name=\'DateToValue\' value=\'");
                                                                                                                                                                                                                                           Write(Model.DateTo.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:28px;\'/>\t\t<sel" +
"ect class=\'form-control\' name=\'DateToOperator\' style=\'position: absolute; left:1" +
"30px;height:21px;width:57px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateToOperator)));
WriteLiteral("\t\t</select>\r\n\t");
        }
    }
}
 

public class DateType_FEDateType : 
	 SelectElementBase<string>
	{
	public DateType_FEDateType() :base("DateTypeValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class DateType_FEDateFrom : 
	 DateElementBase
	{
	public DateType_FEDateFrom() :base("DateFromValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class DateType_FEDateTo : 
	 DateElementBase
	{
	public DateType_FEDateTo() :base("DateToValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class DateTypeModel : ReportBase {
	public DateTypeModel() {
					DateType  = new DateType_FEDateType();
					DateFrom  = new DateType_FEDateFrom();
					DateTo  = new DateType_FEDateTo();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(DateType);
					action(DateFrom);
					action(DateTo);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<DateTypeModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_DateType_cshtml));
    }
	
				public DateType_FEDateType DateType  { get;set;}
	
	public string DateTypeValue { 
		get { return DateType.DataValue;}
		set{ DateType.Value = value; }
	}
			public DateType_FEDateFrom DateFrom  { get;set;}
	
	public DateTime DateFromValue { 
		get { return DateFrom.DataValue;}
		set{ DateFrom.Value = value; }
	}
			public DateType_FEDateTo DateTo  { get;set;}
	
	public DateTime DateToValue { 
		get { return DateTo.DataValue;}
		set{ DateTo.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/DateType.cshtml";
			}
}
public class DateTypeController : ScreenController<DateTypeModel> {
			public ActionResult AutoCompleteDateType(string q) {
			var mdl = new DateTypeModel();
			SC.GetManager<DateTypeModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.DateType.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/DateType.cshtml")]
    public partial class IQ6_Views_DateType_cshtml : System.Web.Mvc.WebViewPage<FTL.DateTypeModel>
    {
        public IQ6_Views_DateType_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "DateType";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<DateTypeModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:74px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/DateType_DateType.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/DateType_DateType.cshtml")]
    public partial class IQ6_Views_DateType_DateType_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_DateType_DateType_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 112)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406411", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.DateType.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#DateTypeValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:53px;\'");
WriteLiteral(">Date Type:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.DateType.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.DateType.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/DateType/Callback/?fname=DateType\',$(th" +
"is));\"  \r\n\t\t   name=\'DateTypeValue\'  style=\'position: absolute; left:210px;heigh" +
"t:21px;width:80px;top:53px;\'>\r\n");
             foreach(var itm in Model.DateType.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 682), Tuple.Create("\'", 703)
, Tuple.Create(Tuple.Create("", 690), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 690), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.DateTypeValue != null ? Model.DateTypeValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                                Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateTypeOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 906), Tuple.Create("\'", 1080)
, Tuple.Create(Tuple.Create("", 914), Tuple.Create("position:", 914), true)
, Tuple.Create(Tuple.Create(" ", 923), Tuple.Create("absolute;", 924), true)
, Tuple.Create(Tuple.Create(" ", 933), Tuple.Create("left:130px;height:21px;width:80px;top:53px;>", 934), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 978), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.DateTypeOperator))
, 985), false)
, Tuple.Create(Tuple.Create("\t\t", 1053), Tuple.Create("</select>", 1055), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1064), Tuple.Create("<label", 1067), true)
, Tuple.Create(Tuple.Create(" ", 1073), Tuple.Create("class=", 1074), true)
);
WriteLiteral("IQLabel406412 ");
                            Write(!Model.DateFrom.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#DateFromValue-Popover\" style=\'position:absolute;font-size:12px;t" +
"ext-align:right;left:5px;height:21px;width:120px;top:3px;\'>Date From:\r\n\t\t</label" +
"><input   ");
                     Write(!Model.DateFrom.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateFrom.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("DateType/Callback/?fname=DateFrom");
WriteLiteral("\',$(this));\"  type=\'text\' name=\'DateFromValue\' value=\'");
                                                                                                                                                                                                                                               Write(Model.DateFrom.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:3px;\'/>\t\t<sele" +
"ct class=\'form-control\' name=\'DateFromOperator\' style=\'position: absolute; left:" +
"130px;height:21px;width:57px;top:3px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateFromOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 1932), Tuple.Create("\'", 1999)
, Tuple.Create(Tuple.Create("", 1940), Tuple.Create("IQLabel406413", 1940), true)
, Tuple.Create(Tuple.Create(" ", 1953), Tuple.Create<System.Object, System.Int32>(!Model.DateTo.LabelVisible ? " hide " : ""
, 1954), false)
);
WriteLiteral("  data-target=\"#DateToValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:28px;\'");
WriteLiteral(">Date To:\r\n\t\t</label><input   ");
                     Write(!Model.DateTo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateTo.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/DateType/Callback/?fname=DateTo\',$(this" +
"));\"  type=\'text\' name=\'DateToValue\' value=\'");
                                                                                                                                                                                                                                         Write(Model.DateTo.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:28px;\'/>\t\t<sel" +
"ect");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateToOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2608), Tuple.Create("", 2768)
, Tuple.Create(Tuple.Create("", 2616), Tuple.Create("position:", 2616), true)
, Tuple.Create(Tuple.Create(" ", 2625), Tuple.Create("absolute;", 2626), true)
, Tuple.Create(Tuple.Create(" ", 2635), Tuple.Create("left:130px;height:21px;width:57px;top:28px;>", 2636), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2680), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateToOperator))
, 2687), false)
, Tuple.Create(Tuple.Create("\t\t", 2754), Tuple.Create("</select>", 2756), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2765), Tuple.Create("", 2765), true)
);
        }
    }
}
 

public class ExciseDetail_FEDateFrom : 
	 DateElementBase
	{
	public ExciseDetail_FEDateFrom() :base("DateFromValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class ExciseDetail_FEDateTo : 
	 DateElementBase
	{
	public ExciseDetail_FEDateTo() :base("DateToValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class ExciseDetail_FESelection : 
	 SelectElementBase<string>
	{
	public ExciseDetail_FESelection() :base("SelectionValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class ExciseDetail_FESepPage : 
	 ElementBase<bool>{
	public ExciseDetail_FESepPage() :base("SepPageValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class ExciseDetail_FEShowAddr : 
	 ElementBase<bool>{
	public ExciseDetail_FEShowAddr() :base("ShowAddrValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class ExciseDetailModel : ReportBase {
	public ExciseDetailModel() {
					DateFrom  = new ExciseDetail_FEDateFrom();
					DateTo  = new ExciseDetail_FEDateTo();
					Selection  = new ExciseDetail_FESelection();
					SepPage  = new ExciseDetail_FESepPage();
					ShowAddr  = new ExciseDetail_FEShowAddr();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(DateFrom);
					action(DateTo);
					action(Selection);
					action(SepPage);
					action(ShowAddr);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<ExciseDetailModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_ExciseDetail_cshtml));
    }
	
				public ExciseDetail_FEDateFrom DateFrom  { get;set;}
	
	public DateTime DateFromValue { 
		get { return DateFrom.DataValue;}
		set{ DateFrom.Value = value; }
	}
			public ExciseDetail_FEDateTo DateTo  { get;set;}
	
	public DateTime DateToValue { 
		get { return DateTo.DataValue;}
		set{ DateTo.Value = value; }
	}
			public ExciseDetail_FESelection Selection  { get;set;}
	
	public string SelectionValue { 
		get { return Selection.DataValue;}
		set{ Selection.Value = value; }
	}
			public ExciseDetail_FESepPage SepPage  { get;set;}
	
	public bool SepPageValue { 
		get { return SepPage.DataValue;}
		set{ SepPage.Value = value; }
	}
			public ExciseDetail_FEShowAddr ShowAddr  { get;set;}
	
	public bool ShowAddrValue { 
		get { return ShowAddr.DataValue;}
		set{ ShowAddr.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/ExciseDetail.cshtml";
			}
}
public class ExciseDetailController : ScreenController<ExciseDetailModel> {
			public ActionResult AutoCompleteSelection(string q) {
			var mdl = new ExciseDetailModel();
			SC.GetManager<ExciseDetailModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Selection.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ExciseDetail.cshtml")]
    public partial class IQ6_Views_ExciseDetail_cshtml : System.Web.Mvc.WebViewPage<FTL.ExciseDetailModel>
    {
        public IQ6_Views_ExciseDetail_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "ExciseDetail";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<ExciseDetailModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:124px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/ExciseDetail_ExciseDetail.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ExciseDetail_ExciseDetail.cshtml")]
    public partial class IQ6_Views_ExciseDetail_ExciseDetail_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_ExciseDetail_ExciseDetail_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 112)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel407411", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.DateFrom.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#DateFromValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Date From:\r\n\t\t</label><input   ");
                     Write(!Model.DateFrom.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateFrom.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/ExciseDetail/Callback/?fname=DateFrom\'," +
"$(this));\"  type=\'text\' name=\'DateFromValue\' value=\'");
                                                                                                                                                                                                                                                   Write(Model.DateFrom.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:3px;\'/>\t\t<sele" +
"ct");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateFromOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 739), Tuple.Create("\'", 913)
, Tuple.Create(Tuple.Create("", 747), Tuple.Create("position:", 747), true)
, Tuple.Create(Tuple.Create(" ", 756), Tuple.Create("absolute;", 757), true)
, Tuple.Create(Tuple.Create(" ", 766), Tuple.Create("left:130px;height:21px;width:57px;top:3px;>", 767), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 810), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateFromOperator))
, 817), false)
, Tuple.Create(Tuple.Create("\t\t", 886), Tuple.Create("</select>", 888), true)
, Tuple.Create(Tuple.Create("\r\n\t", 897), Tuple.Create("<label", 900), true)
, Tuple.Create(Tuple.Create(" ", 906), Tuple.Create("class=", 907), true)
);
WriteLiteral("IQLabel407412 ");
                            Write(!Model.DateTo.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#DateToValue-Popover\" style=\'position:absolute;font-size:12px;tex" +
"t-align:right;left:5px;height:21px;width:120px;top:28px;\'>Date To:\r\n\t\t</label><i" +
"nput   ");
                     Write(!Model.DateTo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateTo.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("ExciseDetail/Callback/?fname=DateTo");
WriteLiteral("\',$(this));\"  type=\'text\' name=\'DateToValue\' value=\'");
                                                                                                                                                                                                                                             Write(Model.DateTo.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:28px;\'/>\t\t<sel" +
"ect class=\'form-control\' name=\'DateToOperator\' style=\'position: absolute; left:1" +
"30px;height:21px;width:57px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateToOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 1752), Tuple.Create("\'", 1822)
, Tuple.Create(Tuple.Create("", 1760), Tuple.Create("IQLabel407413", 1760), true)
, Tuple.Create(Tuple.Create(" ", 1773), Tuple.Create<System.Object, System.Int32>(!Model.Selection.LabelVisible ? " hide " : ""
, 1774), false)
);
WriteLiteral("  data-target=\"#SelectionValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:53px;\'");
WriteLiteral(">Selection:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Selection.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Selection.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/ExciseDetail/Callback/?fname=Selection\'" +
",$(this));\"  \r\n\t\t   name=\'SelectionValue\'  style=\'position: absolute; left:210px" +
";height:21px;width:80px;top:53px;\'>\r\n");
             foreach(var itm in Model.Selection.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 2402), Tuple.Create("\'", 2423)
, Tuple.Create(Tuple.Create("", 2410), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 2410), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.SelectionValue != null ? Model.SelectionValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                                  Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'SelectionOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2629), Tuple.Create("\'", 2804)
, Tuple.Create(Tuple.Create("", 2637), Tuple.Create("position:", 2637), true)
, Tuple.Create(Tuple.Create(" ", 2646), Tuple.Create("absolute;", 2647), true)
, Tuple.Create(Tuple.Create(" ", 2656), Tuple.Create("left:130px;height:21px;width:80px;top:53px;>", 2657), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2701), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.SelectionOperator))
, 2708), false)
, Tuple.Create(Tuple.Create("\t\t", 2777), Tuple.Create("</select>", 2779), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2788), Tuple.Create("<label", 2791), true)
, Tuple.Create(Tuple.Create(" ", 2797), Tuple.Create("class=", 2798), true)
);
WriteLiteral("IQLabel407414 ");
                            Write(!Model.SepPage.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#SepPageValue-Popover\" style=\'position:absolute;font-size:12px;te" +
"xt-align:right;left:35px;height:21px;width:250px;top:78px;\'>Show separate page\r\n" +
"\t\t</label>\t\t\t\r\n\t\t<input  class=\'  ");
                     Write(!Model.SepPage.Visible ? " hide " : "");
WriteLiteral("\' \r\n");
WriteLiteral("\t\t ");
     Write(!Model.SepPage.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("ExciseDetail/Callback/?fname=SepPage");
WriteLiteral("\',$(this));\"  style=\'position: absolute; left:17px;height:21px;width:12px;top:78p" +
"x;\' name=\'SepPageValue\'   ");
                                                                                                                                                                                                                                                                              Write(Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input type=\'hidden\' name=\'SepPageValue\' value=\'false\' ");
                                                           Write(!Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select class=\'form-control\' name=\'SepPageOperator\' style=\'position: abs" +
"olute; left:5px;height:21px;width:12px;top:78px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.SepPageOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 3761), Tuple.Create("\'", 3830)
, Tuple.Create(Tuple.Create("", 3769), Tuple.Create("IQLabel407415", 3769), true)
, Tuple.Create(Tuple.Create(" ", 3782), Tuple.Create<System.Object, System.Int32>(!Model.ShowAddr.LabelVisible ? " hide " : ""
, 3783), false)
);
WriteLiteral("  data-target=\"#ShowAddrValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:35px;height:21px;w" +
"idth:250px;top:103px;\'");
WriteLiteral(">Show address details\r\n\t\t</label>\t\t\t\r\n\t\t<input");
WriteAttribute("class", Tuple.Create("  class=\'", 4018), Tuple.Create("\'", 4071)
, Tuple.Create(Tuple.Create("  ", 4027), Tuple.Create<System.Object, System.Int32>(!Model.ShowAddr.Visible ? " hide " : ""
, 4029), false)
);
WriteLiteral(" \r\n\t\t ");
     Write(!Model.ShowAddr.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/ExciseDetai" +
"l/Callback/?fname=ShowAddr\',$(this));\"  style=\'position: absolute; left:17px;hei" +
"ght:21px;width:12px;top:103px;\' name=\'ShowAddrValue\'   ");
                                                                                                                                                                                                                                                                                  Write(Model.ShowAddrValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input");
WriteLiteral(" type=\'hidden\'");
WriteLiteral(" name=\'ShowAddrValue\'");
WriteLiteral(" value=\'false\'");
WriteLiteral(" ");
                                                            Write(!Model.ShowAddrValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'ShowAddrOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 4573), Tuple.Create("", 4735)
, Tuple.Create(Tuple.Create("", 4581), Tuple.Create("position:", 4581), true)
, Tuple.Create(Tuple.Create(" ", 4590), Tuple.Create("absolute;", 4591), true)
, Tuple.Create(Tuple.Create(" ", 4600), Tuple.Create("left:5px;height:21px;width:12px;top:103px;>", 4601), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 4644), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.ShowAddrOperator))
, 4651), false)
, Tuple.Create(Tuple.Create("\t\t", 4721), Tuple.Create("</select>", 4723), true)
, Tuple.Create(Tuple.Create("\r\n\t", 4732), Tuple.Create("", 4732), true)
);
        }
    }
}
 

public class ExciseSummary_FEDateFrom : 
	 DateElementBase
	{
	public ExciseSummary_FEDateFrom() :base("DateFromValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class ExciseSummary_FEDateTo : 
	 DateElementBase
	{
	public ExciseSummary_FEDateTo() :base("DateToValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class ExciseSummary_FESepPage : 
	 ElementBase<bool>{
	public ExciseSummary_FESepPage() :base("SepPageValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class ExciseSummaryModel : ReportBase {
	public ExciseSummaryModel() {
					DateFrom  = new ExciseSummary_FEDateFrom();
					DateTo  = new ExciseSummary_FEDateTo();
					SepPage  = new ExciseSummary_FESepPage();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(DateFrom);
					action(DateTo);
					action(SepPage);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<ExciseSummaryModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_ExciseSummary_cshtml));
    }
	
				public ExciseSummary_FEDateFrom DateFrom  { get;set;}
	
	public DateTime DateFromValue { 
		get { return DateFrom.DataValue;}
		set{ DateFrom.Value = value; }
	}
			public ExciseSummary_FEDateTo DateTo  { get;set;}
	
	public DateTime DateToValue { 
		get { return DateTo.DataValue;}
		set{ DateTo.Value = value; }
	}
			public ExciseSummary_FESepPage SepPage  { get;set;}
	
	public bool SepPageValue { 
		get { return SepPage.DataValue;}
		set{ SepPage.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/ExciseSummary.cshtml";
			}
}
public class ExciseSummaryController : ScreenController<ExciseSummaryModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ExciseSummary.cshtml")]
    public partial class IQ6_Views_ExciseSummary_cshtml : System.Web.Mvc.WebViewPage<FTL.ExciseSummaryModel>
    {
        public IQ6_Views_ExciseSummary_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "ExciseSummary";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<ExciseSummaryModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:99px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/ExciseSummary_ExciseSummary.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ExciseSummary_ExciseSummary.cshtml")]
    public partial class IQ6_Views_ExciseSummary_ExciseSummary_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_ExciseSummary_ExciseSummary_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 112)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel407511", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.DateFrom.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#DateFromValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Date From:\r\n\t\t</label><input   ");
                     Write(!Model.DateFrom.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateFrom.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/ExciseSummary/Callback/?fname=DateFrom\'" +
",$(this));\"  type=\'text\' name=\'DateFromValue\' value=\'");
                                                                                                                                                                                                                                                    Write(Model.DateFrom.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:3px;\'/>\t\t<sele" +
"ct");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateFromOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 740), Tuple.Create("\'", 914)
, Tuple.Create(Tuple.Create("", 748), Tuple.Create("position:", 748), true)
, Tuple.Create(Tuple.Create(" ", 757), Tuple.Create("absolute;", 758), true)
, Tuple.Create(Tuple.Create(" ", 767), Tuple.Create("left:130px;height:21px;width:57px;top:3px;>", 768), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 811), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateFromOperator))
, 818), false)
, Tuple.Create(Tuple.Create("\t\t", 887), Tuple.Create("</select>", 889), true)
, Tuple.Create(Tuple.Create("\r\n\t", 898), Tuple.Create("<label", 901), true)
, Tuple.Create(Tuple.Create(" ", 907), Tuple.Create("class=", 908), true)
);
WriteLiteral("IQLabel407512 ");
                            Write(!Model.DateTo.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#DateToValue-Popover\" style=\'position:absolute;font-size:12px;tex" +
"t-align:right;left:5px;height:21px;width:120px;top:28px;\'>Date To:\r\n\t\t</label><i" +
"nput   ");
                     Write(!Model.DateTo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateTo.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("ExciseSummary/Callback/?fname=DateTo");
WriteLiteral("\',$(this));\"  type=\'text\' name=\'DateToValue\' value=\'");
                                                                                                                                                                                                                                              Write(Model.DateTo.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:28px;\'/>\t\t<sel" +
"ect class=\'form-control\' name=\'DateToOperator\' style=\'position: absolute; left:1" +
"30px;height:21px;width:57px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateToOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 1754), Tuple.Create("\'", 1822)
, Tuple.Create(Tuple.Create("", 1762), Tuple.Create("IQLabel407514", 1762), true)
, Tuple.Create(Tuple.Create(" ", 1775), Tuple.Create<System.Object, System.Int32>(!Model.SepPage.LabelVisible ? " hide " : ""
, 1776), false)
);
WriteLiteral("  data-target=\"#SepPageValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:35px;height:21px;w" +
"idth:250px;top:78px;\'");
WriteLiteral(">Show on separate page\r\n\t\t</label>\t\t\t\r\n\t\t<input");
WriteAttribute("class", Tuple.Create("  class=\'", 2009), Tuple.Create("\'", 2061)
, Tuple.Create(Tuple.Create("  ", 2018), Tuple.Create<System.Object, System.Int32>(!Model.SepPage.Visible ? " hide " : ""
, 2020), false)
);
WriteLiteral(" \r\n\t\t ");
     Write(!Model.SepPage.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/ExciseSumma" +
"ry/Callback/?fname=SepPage\',$(this));\"  style=\'position: absolute; left:17px;hei" +
"ght:21px;width:12px;top:78px;\' name=\'SepPageValue\'   ");
                                                                                                                                                                                                                                                                               Write(Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input");
WriteLiteral(" type=\'hidden\'");
WriteLiteral(" name=\'SepPageValue\'");
WriteLiteral(" value=\'false\'");
WriteLiteral(" ");
                                                           Write(!Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'SepPageOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2556), Tuple.Create("", 2716)
, Tuple.Create(Tuple.Create("", 2564), Tuple.Create("position:", 2564), true)
, Tuple.Create(Tuple.Create(" ", 2573), Tuple.Create("absolute;", 2574), true)
, Tuple.Create(Tuple.Create(" ", 2583), Tuple.Create("left:5px;height:21px;width:12px;top:78px;>", 2584), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2626), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.SepPageOperator))
, 2633), false)
, Tuple.Create(Tuple.Create("\t\t", 2702), Tuple.Create("</select>", 2704), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2713), Tuple.Create("", 2713), true)
);
        }
    }
}
 


public class ExportBatchModel : ScreenBase {
	public ExportBatchModel() {
			}
	public override void ForEachElement(Action<IElementBase> action) {
			}
	
	
			public override string GetView() {
				return "~/IQ6/Views/ExportBatch.cshtml";
			}
}
public class ExportBatchController : ScreenController<ExportBatchModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ExportBatch.cshtml")]
    public partial class IQ6_Views_ExportBatch_cshtml : System.Web.Mvc.WebViewPage<FTL.ExportBatchModel>
    {
        public IQ6_Views_ExportBatch_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Export Selected Batch";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<ExportBatchModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 
 

public class HM2Form_FEDateFrom : 
	 DateElementBase
	{
	public HM2Form_FEDateFrom() :base("DateFromValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class HM2Form_FEDateTo : 
	 DateElementBase
	{
	public HM2Form_FEDateTo() :base("DateToValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class HM2Form_FESelection : 
	 SelectElementBase<string>
	{
	public HM2Form_FESelection() :base("SelectionValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class HM2FormModel : ReportBase {
	public HM2FormModel() {
					DateFrom  = new HM2Form_FEDateFrom();
					DateTo  = new HM2Form_FEDateTo();
					Selection  = new HM2Form_FESelection();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(DateFrom);
					action(DateTo);
					action(Selection);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<HM2FormModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_HM2Form_cshtml));
    }
	
				public HM2Form_FEDateFrom DateFrom  { get;set;}
	
	public DateTime DateFromValue { 
		get { return DateFrom.DataValue;}
		set{ DateFrom.Value = value; }
	}
			public HM2Form_FEDateTo DateTo  { get;set;}
	
	public DateTime DateToValue { 
		get { return DateTo.DataValue;}
		set{ DateTo.Value = value; }
	}
			public HM2Form_FESelection Selection  { get;set;}
	
	public string SelectionValue { 
		get { return Selection.DataValue;}
		set{ Selection.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/HM2Form.cshtml";
			}
}
public class HM2FormController : ScreenController<HM2FormModel> {
			public ActionResult AutoCompleteSelection(string q) {
			var mdl = new HM2FormModel();
			SC.GetManager<HM2FormModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Selection.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/HM2Form.cshtml")]
    public partial class IQ6_Views_HM2Form_cshtml : System.Web.Mvc.WebViewPage<FTL.HM2FormModel>
    {
        public IQ6_Views_HM2Form_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "HM2Form";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<HM2FormModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:74px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/HM2Form_HM2Form.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/HM2Form_HM2Form.cshtml")]
    public partial class IQ6_Views_HM2Form_HM2Form_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_HM2Form_HM2Form_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 112)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel407611", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.DateFrom.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#DateFromValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Date From:\r\n\t\t</label><input   ");
                     Write(!Model.DateFrom.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateFrom.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/HM2Form/Callback/?fname=DateFrom\',$(thi" +
"s));\"  type=\'text\' name=\'DateFromValue\' value=\'");
                                                                                                                                                                                                                                              Write(Model.DateFrom.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:3px;\'/>\t\t<sele" +
"ct");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateFromOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 734), Tuple.Create("\'", 908)
, Tuple.Create(Tuple.Create("", 742), Tuple.Create("position:", 742), true)
, Tuple.Create(Tuple.Create(" ", 751), Tuple.Create("absolute;", 752), true)
, Tuple.Create(Tuple.Create(" ", 761), Tuple.Create("left:130px;height:21px;width:57px;top:3px;>", 762), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 805), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateFromOperator))
, 812), false)
, Tuple.Create(Tuple.Create("\t\t", 881), Tuple.Create("</select>", 883), true)
, Tuple.Create(Tuple.Create("\r\n\t", 892), Tuple.Create("<label", 895), true)
, Tuple.Create(Tuple.Create(" ", 901), Tuple.Create("class=", 902), true)
);
WriteLiteral("IQLabel407612 ");
                            Write(!Model.DateTo.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#DateToValue-Popover\" style=\'position:absolute;font-size:12px;tex" +
"t-align:right;left:5px;height:21px;width:120px;top:28px;\'>Date To:\r\n\t\t</label><i" +
"nput   ");
                     Write(!Model.DateTo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateTo.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("HM2Form/Callback/?fname=DateTo");
WriteLiteral("\',$(this));\"  type=\'text\' name=\'DateToValue\' value=\'");
                                                                                                                                                                                                                                        Write(Model.DateTo.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:28px;\'/>\t\t<sel" +
"ect class=\'form-control\' name=\'DateToOperator\' style=\'position: absolute; left:1" +
"30px;height:21px;width:57px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateToOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 1742), Tuple.Create("\'", 1812)
, Tuple.Create(Tuple.Create("", 1750), Tuple.Create("IQLabel407613", 1750), true)
, Tuple.Create(Tuple.Create(" ", 1763), Tuple.Create<System.Object, System.Int32>(!Model.Selection.LabelVisible ? " hide " : ""
, 1764), false)
);
WriteLiteral("  data-target=\"#SelectionValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:53px;\'");
WriteLiteral(">Selection:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Selection.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Selection.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/HM2Form/Callback/?fname=Selection\',$(th" +
"is));\"  \r\n\t\t   name=\'SelectionValue\'  style=\'position: absolute; left:210px;heig" +
"ht:21px;width:80px;top:53px;\'>\r\n");
             foreach(var itm in Model.Selection.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 2387), Tuple.Create("\'", 2408)
, Tuple.Create(Tuple.Create("", 2395), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 2395), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.SelectionValue != null ? Model.SelectionValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                                  Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'SelectionOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2614), Tuple.Create("", 2776)
, Tuple.Create(Tuple.Create("", 2622), Tuple.Create("position:", 2622), true)
, Tuple.Create(Tuple.Create(" ", 2631), Tuple.Create("absolute;", 2632), true)
, Tuple.Create(Tuple.Create(" ", 2641), Tuple.Create("left:130px;height:21px;width:80px;top:53px;>", 2642), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2686), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.SelectionOperator))
, 2693), false)
, Tuple.Create(Tuple.Create("\t\t", 2762), Tuple.Create("</select>", 2764), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2773), Tuple.Create("", 2773), true)
);
        }
    }
}
 

public class JobSearch_FEJobNo : 
	 ElementBase<string>{
	public JobSearch_FEJobNo() :base("JobNoValue", "JobNo"
		)
	{
		Enabled = true;
	}
		
}

public class JobSearchModel : ListScreenBase<Job> {
	public JobSearchModel() {
					JobNo  = new JobSearch_FEJobNo();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(JobNo);
			}
	
	
		public override void ForEachSearchElement(Action<IElementBase, int> action) {
					action(JobNo, JobNoOperator);
			}
	protected override string OrderBy => "RecordID asc";
	public override List<ListFieldDetail> Fields =>
			new List<ListFieldDetail>() {
							new ListFieldDetail() { Width = 80, DFName="JobNo", Title="Job Number"},
							new ListFieldDetail() { Width = 40, DFName="JobTransp", Title="Transporter"},
							new ListFieldDetail() { Width = 80, DFName="JobVehNo", Title="Vehicle Number"},
							new ListFieldDetail() { Width = 80, DFName="JobTrailerNo", Title="Trailer Number"},
				
			};

					public int JobNoOperator { get;set;}
		public JobSearch_FEJobNo JobNo  { get;set;}
	
	public string JobNoValue { 
		get { return JobNo.DataValue;}
		set{ JobNo.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/JobSearch.cshtml";
			}
}
public class JobSearchController : ListScreenController<JobSearchModel,Job> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/JobSearch.cshtml")]
    public partial class IQ6_Views_JobSearch_cshtml : System.Web.Mvc.WebViewPage<FTL.JobSearchModel>
    {
        public IQ6_Views_JobSearch_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Job Search";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<JobSearchModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(" >\r\n\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" onclick=\'DSSearch_RunSearch(\"/JobSearch/DrawList\")\'");
WriteLiteral(" class=\"btn btn-primary\"");
WriteLiteral(" value=\"Search\"");
WriteLiteral(" />\r\n\t\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(">\r\n\t\t\t<button");
WriteLiteral(" class=\"btn btn-default dropdown-toggle\"");
WriteLiteral(" type=\"button\"");
WriteLiteral(" id=\"dropdownMenu1\"");
WriteLiteral(" data-toggle=\"dropdown\"");
WriteLiteral(" aria-haspopup=\"true\"");
WriteLiteral(" aria-expanded=\"true\"");
WriteLiteral(">Export <span");
WriteLiteral(" class=\"caret\"");
WriteLiteral("></span></button>\r\n\t\t\t<ul");
WriteLiteral(" class=\"dropdown-menu\"");
WriteLiteral(" aria-labelledby=\"dropdownMenu1\"");
WriteLiteral(">\r\n\t\t\t\t<li><a");
WriteLiteral(" href=\'#\'");
WriteLiteral(" onclick=\'javascript:DSSearch_RunPageAction(\"/JobSearch/SearchExport/\")\'");
WriteLiteral(">Export Current Page</a></li>\r\n\t\t\t\t<li><a");
WriteLiteral(" onclick=\'javascript:DSSearch_RunPageAction(\"/JobSearch/SearchExportAll/\")\'");
WriteLiteral(" href=\'#\'");
WriteLiteral(">Export All Results</a></li>\r\n\t\t\t\t<li><a");
WriteLiteral(" href=\'#\'");
WriteLiteral(" onclick=\'javascript:if($(\"input[name=RecordIDs]\").val().length) {DSSearch_RunPag" +
"eAction(\"/JobSearch/SearchExportSelected\");} else { alert(\"You have not selected" +
" any records\"); }\'");
WriteLiteral(">Export Selected</a></li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n");
         foreach(var itm in DS.GetManager<Job>().OnDrawListToolbar) {
			foreach(var elm in itm()) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t\t");
         foreach (var itm in DS.GlobalManager.OnDrawListToolbar)
        {
            foreach (var elem in itm.Invoke("Job"))
            {
WriteLiteral("                ");
                 Write(Html.Raw(elem.HTML));
WriteLiteral("\r\n");
            }
        }
WriteLiteral("\t</div>\r\n\t<input");
WriteLiteral(" type=\"hidden\"");
WriteLiteral(" name=\"start\"");
WriteLiteral(" value=\"1\"");
WriteLiteral(" />\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/JobSearch_JobSearch.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t<br");
WriteLiteral(" style=\'clear:both\'");
WriteLiteral(" />\r\n\t<div");
WriteLiteral(" id=\"resultsView\"");
WriteLiteral(">\r\n");
          Html.RenderAction("DrawList", "JobSearch"); 
WriteLiteral("\r\n\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/JobSearch_JobSearch.cshtml")]
    public partial class IQ6_Views_JobSearch_JobSearch_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_JobSearch_JobSearch_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 109)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel107901", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.JobNo.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#JobNoValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Job Number\r\n\t\t</label><input ");
                   Write(!Model.JobNo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.JobNo.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/JobSearch/Callback/?fname=\',$(this)" +
");\" \r\n\t\t\ttype=\'text\' \r\n\t\t\tname=\'JobNoValue\' \r\n\t\t\tvalue=\'");
              Write(Model.JobNo.ValueFormatted);
WriteLiteral("\' \r\n\t\t\tstyle=\'position: absolute; left:256px;height:21px;width:126px;top:3px;\'/>\t" +
"\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'JobNoOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 686), Tuple.Create("", 843)
, Tuple.Create(Tuple.Create("", 694), Tuple.Create("position:", 694), true)
, Tuple.Create(Tuple.Create(" ", 703), Tuple.Create("absolute;", 704), true)
, Tuple.Create(Tuple.Create(" ", 713), Tuple.Create("left:130px;height:21px;width:126px;top:3px;>", 714), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 758), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.JobNoOperator))
, 765), false)
, Tuple.Create(Tuple.Create("\t\t", 829), Tuple.Create("</select>", 831), true)
, Tuple.Create(Tuple.Create("\r\n\t", 840), Tuple.Create("", 840), true)
);
        }
    }
}
 

public class JobSingle_FEJob : 
	 SelectElementBase<string>
	{
	public JobSingle_FEJob() :base("JobValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class JobSingle_FEOrder : 
	 SelectElementBase<string>
	{
	public JobSingle_FEOrder() :base("OrderValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class JobSingleModel : ReportBase {
	public JobSingleModel() {
					Job  = new JobSingle_FEJob();
					Order  = new JobSingle_FEOrder();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(Job);
					action(Order);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<JobSingleModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_JobSingle_cshtml));
    }
	
				public JobSingle_FEJob Job  { get;set;}
	
	public string JobValue { 
		get { return Job.DataValue;}
		set{ Job.Value = value; }
	}
			public JobSingle_FEOrder Order  { get;set;}
	
	public string OrderValue { 
		get { return Order.DataValue;}
		set{ Order.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/JobSingle.cshtml";
			}
}
public class JobSingleController : ScreenController<JobSingleModel> {
			public ActionResult AutoCompleteJob(string q) {
			var mdl = new JobSingleModel();
			SC.GetManager<JobSingleModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Job.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
			public ActionResult AutoCompleteOrder(string q) {
			var mdl = new JobSingleModel();
			SC.GetManager<JobSingleModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Order.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/JobSingle.cshtml")]
    public partial class IQ6_Views_JobSingle_cshtml : System.Web.Mvc.WebViewPage<FTL.JobSingleModel>
    {
        public IQ6_Views_JobSingle_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "JobSingle";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<JobSingleModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:74px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/JobSingle_JobSingle.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/JobSingle_JobSingle.cshtml")]
    public partial class IQ6_Views_JobSingle_JobSingle_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_JobSingle_JobSingle_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 107)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel407311", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.Job.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#JobValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Job\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("\r\n\t   ");
   Write(!Model.Job.Enabled ? "disabled=disabled" : "");
WriteLiteral("  class=\'form-control    ");
                                                                            Write(!Model.Job.Visible ? " hide " : "");
WriteLiteral(" searchautocomplete\' \r\n\t data-ajax--url=\'/JobSingle/AutoCompleteJob/\'  name=\'JobV" +
"alue\'  style=\'position: absolute; left:205px;height:21px;width:75px;top:3px;\'>\r\n" +
"");
                 if(Model.JobValue.ToString() != "" && Model.JobValue.ToString() != "0") {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(Model.Job.ValueFormatted));
WriteLiteral("\r\n");
				}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'JobOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 762), Tuple.Create("\'", 930)
, Tuple.Create(Tuple.Create("", 770), Tuple.Create("position:", 770), true)
, Tuple.Create(Tuple.Create(" ", 779), Tuple.Create("absolute;", 780), true)
, Tuple.Create(Tuple.Create(" ", 789), Tuple.Create("left:130px;height:21px;width:75px;top:3px;>", 790), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 833), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.JobOperator))
, 840), false)
, Tuple.Create(Tuple.Create("\t\t", 903), Tuple.Create("</select>", 905), true)
, Tuple.Create(Tuple.Create("\r\n\t", 914), Tuple.Create("<label", 917), true)
, Tuple.Create(Tuple.Create(" ", 923), Tuple.Create("class=", 924), true)
);
WriteLiteral("IQLabel407312 ");
                            Write(!Model.Order.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#OrderValue-Popover\" style=\'position:absolute;font-size:12px;text" +
"-align:right;left:5px;height:21px;width:120px;top:53px;\'>Order\r\n\t\t</label><selec" +
"t multiple=\"multiple\"\r\n");
WriteLiteral("\t   ");
   Write(!Model.Order.Enabled ? "disabled=disabled" : "");
WriteLiteral("  class=\'form-control    ");
                                                                              Write(!Model.Order.Visible ? " hide " : "");
WriteLiteral(" searchautocomplete\' \r\n\t data-ajax--url=\'/JobSingle/AutoCompleteOrder/\'");
WriteLiteral("  name=\'OrderValue\'");
WriteLiteral("  style=\'position: absolute; left:205px;height:21px;width:75px;top:53px;\'");
WriteLiteral(">\r\n");
                 if(Model.OrderValue.ToString() != "" && Model.OrderValue.ToString() != "0") {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(Model.Order.ValueFormatted));
WriteLiteral("\r\n");
				}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'OrderOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 1666), Tuple.Create("", 1824)
, Tuple.Create(Tuple.Create("", 1674), Tuple.Create("position:", 1674), true)
, Tuple.Create(Tuple.Create(" ", 1683), Tuple.Create("absolute;", 1684), true)
, Tuple.Create(Tuple.Create(" ", 1693), Tuple.Create("left:130px;height:21px;width:75px;top:53px;>", 1694), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 1738), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.OrderOperator))
, 1745), false)
, Tuple.Create(Tuple.Create("\t\t", 1810), Tuple.Create("</select>", 1812), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1821), Tuple.Create("", 1821), true)
);
        }
    }
}
 


public class LockDownPrevMonthModel : ScreenBase {
	public LockDownPrevMonthModel() {
			}
	public override void ForEachElement(Action<IElementBase> action) {
			}
	
	
			public override string GetView() {
				return "~/Views/Functions/LockDownPrevMonth.cshtml";
			}
}
public class LockDownPrevMonthController : ScreenController<LockDownPrevMonthModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/LockDownPrevMonth.cshtml")]
    public partial class IQ6_Views_LockDownPrevMonth_cshtml : System.Web.Mvc.WebViewPage<FTL.LockDownPrevMonthModel>
    {
        public IQ6_Views_LockDownPrevMonth_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "REDS Lock Down Previous Month";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<LockDownPrevMonthModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 
 

public class MonthRange_FEStartMonth : 
	 SelectElementBase<string>
	{
	public MonthRange_FEStartMonth() :base("StartMonthValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class MonthRange_FEEndMonth : 
	 SelectElementBase<string>
	{
	public MonthRange_FEEndMonth() :base("EndMonthValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class MonthRangeModel : ReportBase {
	public MonthRangeModel() {
					StartMonth  = new MonthRange_FEStartMonth();
					EndMonth  = new MonthRange_FEEndMonth();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(StartMonth);
					action(EndMonth);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<MonthRangeModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_MonthRange_cshtml));
    }
	
				public MonthRange_FEStartMonth StartMonth  { get;set;}
	
	public string StartMonthValue { 
		get { return StartMonth.DataValue;}
		set{ StartMonth.Value = value; }
	}
			public MonthRange_FEEndMonth EndMonth  { get;set;}
	
	public string EndMonthValue { 
		get { return EndMonth.DataValue;}
		set{ EndMonth.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/MonthRange.cshtml";
			}
}
public class MonthRangeController : ScreenController<MonthRangeModel> {
			public ActionResult AutoCompleteStartMonth(string q) {
			var mdl = new MonthRangeModel();
			SC.GetManager<MonthRangeModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.StartMonth.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
			public ActionResult AutoCompleteEndMonth(string q) {
			var mdl = new MonthRangeModel();
			SC.GetManager<MonthRangeModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.EndMonth.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/MonthRange.cshtml")]
    public partial class IQ6_Views_MonthRange_cshtml : System.Web.Mvc.WebViewPage<FTL.MonthRangeModel>
    {
        public IQ6_Views_MonthRange_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "MonthRange";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<MonthRangeModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:49px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/MonthRange_MonthRange.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/MonthRange_MonthRange.cshtml")]
    public partial class IQ6_Views_MonthRange_MonthRange_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_MonthRange_MonthRange_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 114)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406511", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.StartMonth.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#StartMonthValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Start Month:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.StartMonth.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.StartMonth.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/MonthRange/Callback/?fname=StartMonth\'," +
"$(this));\"  \r\n\t\t   name=\'StartMonthValue\'  style=\'position: absolute; left:210px" +
";height:21px;width:80px;top:3px;\'>\r\n");
             foreach(var itm in Model.StartMonth.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 698), Tuple.Create("\'", 719)
, Tuple.Create(Tuple.Create("", 706), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 706), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.StartMonthValue != null ? Model.StartMonthValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                                    Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'StartMonthOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 928), Tuple.Create("\'", 1103)
, Tuple.Create(Tuple.Create("", 936), Tuple.Create("position:", 936), true)
, Tuple.Create(Tuple.Create(" ", 945), Tuple.Create("absolute;", 946), true)
, Tuple.Create(Tuple.Create(" ", 955), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 956), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 999), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.StartMonthOperator))
, 1006), false)
, Tuple.Create(Tuple.Create("\t\t", 1076), Tuple.Create("</select>", 1078), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1087), Tuple.Create("<label", 1090), true)
, Tuple.Create(Tuple.Create(" ", 1096), Tuple.Create("class=", 1097), true)
);
WriteLiteral("IQLabel406512 ");
                            Write(!Model.EndMonth.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#EndMonthValue-Popover\" style=\'position:absolute;font-size:12px;t" +
"ext-align:right;left:5px;height:21px;width:120px;top:28px;\'>End Month:\r\n\t\t</labe" +
"l><select multiple=\"multiple\"  ");
                                         Write(!Model.EndMonth.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.EndMonth.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("MonthRange/Callback/?fname=EndMonth");
WriteLiteral("\',$(this));\"  \r\n\t\t   name=\'EndMonthValue\'  style=\'position: absolute; left:210px;" +
"height:21px;width:80px;top:28px;\'>\r\n");
             foreach(var itm in Model.EndMonth.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 1737), Tuple.Create("\'", 1758)
, Tuple.Create(Tuple.Create("", 1745), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 1745), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.EndMonthValue != null ? Model.EndMonthValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                                Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select class=\'form-control\' name=\'EndMonthOperator\' style=\'position" +
": absolute; left:130px;height:21px;width:80px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetComboOperators(Model.EndMonthOperator)));
WriteLiteral("\t\t</select>\r\n\t");
        }
    }
}
 

public class OrderSearch_FECustId : 
	 ElementBase<string>{
	public OrderSearch_FECustId() :base("CustIdValue", "CustId"
		)
	{
		Enabled = true;
	}
		
}
public class OrderSearch_FECustName : 
	 ElementBase<string>{
	public OrderSearch_FECustName() :base("CustNameValue", "CustName"
		)
	{
		Enabled = true;
	}
		
}
public class OrderSearch_FECustCounty : 
	 ElementBase<string>{
	public OrderSearch_FECustCounty() :base("CustCountyValue", "CustCounty"
		)
	{
		Enabled = true;
	}
		
}

public class OrderSearchModel : ListScreenBase<Customer> {
	public OrderSearchModel() {
					CustId  = new OrderSearch_FECustId();
					CustName  = new OrderSearch_FECustName();
					CustCounty  = new OrderSearch_FECustCounty();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(CustId);
					action(CustName);
					action(CustCounty);
			}
	
	
		public override void ForEachSearchElement(Action<IElementBase, int> action) {
					action(CustId, CustIdOperator);
					action(CustName, CustNameOperator);
					action(CustCounty, CustCountyOperator);
			}
	protected override string OrderBy => "RecordID asc";
	public override List<ListFieldDetail> Fields =>
			new List<ListFieldDetail>() {
							new ListFieldDetail() { Width = 40, DFName="OrdId", Title="Order Number"},
							new ListFieldDetail() { Width = 80, DFName="OrdCustOrd", Title="Client Order No"},
							new ListFieldDetail() { Width = 80, DFName="OrdDate", Title="Order Date"},
							new ListFieldDetail() { Width = 40, DFName="OrdStatus", Title="Status"},
				
			};

					public int CustIdOperator { get;set;}
		public OrderSearch_FECustId CustId  { get;set;}
	
	public string CustIdValue { 
		get { return CustId.DataValue;}
		set{ CustId.Value = value; }
	}
				public int CustNameOperator { get;set;}
		public OrderSearch_FECustName CustName  { get;set;}
	
	public string CustNameValue { 
		get { return CustName.DataValue;}
		set{ CustName.Value = value; }
	}
				public int CustCountyOperator { get;set;}
		public OrderSearch_FECustCounty CustCounty  { get;set;}
	
	public string CustCountyValue { 
		get { return CustCounty.DataValue;}
		set{ CustCounty.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/OrderSearch.cshtml";
			}
}
public class OrderSearchController : ListScreenController<OrderSearchModel,Customer> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/OrderSearch.cshtml")]
    public partial class IQ6_Views_OrderSearch_cshtml : System.Web.Mvc.WebViewPage<FTL.OrderSearchModel>
    {
        public IQ6_Views_OrderSearch_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Order Search";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<OrderSearchModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(" >\r\n\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" onclick=\'DSSearch_RunSearch(\"/OrderSearch/DrawList\")\'");
WriteLiteral(" class=\"btn btn-primary\"");
WriteLiteral(" value=\"Search\"");
WriteLiteral(" />\r\n\t\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(">\r\n\t\t\t<button");
WriteLiteral(" class=\"btn btn-default dropdown-toggle\"");
WriteLiteral(" type=\"button\"");
WriteLiteral(" id=\"dropdownMenu1\"");
WriteLiteral(" data-toggle=\"dropdown\"");
WriteLiteral(" aria-haspopup=\"true\"");
WriteLiteral(" aria-expanded=\"true\"");
WriteLiteral(">Export <span");
WriteLiteral(" class=\"caret\"");
WriteLiteral("></span></button>\r\n\t\t\t<ul");
WriteLiteral(" class=\"dropdown-menu\"");
WriteLiteral(" aria-labelledby=\"dropdownMenu1\"");
WriteLiteral(">\r\n\t\t\t\t<li><a");
WriteLiteral(" href=\'#\'");
WriteLiteral(" onclick=\'javascript:DSSearch_RunPageAction(\"/OrderSearch/SearchExport/\")\'");
WriteLiteral(">Export Current Page</a></li>\r\n\t\t\t\t<li><a");
WriteLiteral(" onclick=\'javascript:DSSearch_RunPageAction(\"/OrderSearch/SearchExportAll/\")\'");
WriteLiteral(" href=\'#\'");
WriteLiteral(">Export All Results</a></li>\r\n\t\t\t\t<li><a");
WriteLiteral(" href=\'#\'");
WriteLiteral(" onclick=\'javascript:if($(\"input[name=RecordIDs]\").val().length) {DSSearch_RunPag" +
"eAction(\"/OrderSearch/SearchExportSelected\");} else { alert(\"You have not select" +
"ed any records\"); }\'");
WriteLiteral(">Export Selected</a></li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n");
         foreach(var itm in DS.GetManager<Customer>().OnDrawListToolbar) {
			foreach(var elm in itm()) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t\t");
         foreach (var itm in DS.GlobalManager.OnDrawListToolbar)
        {
            foreach (var elem in itm.Invoke("Customer"))
            {
WriteLiteral("                ");
                 Write(Html.Raw(elem.HTML));
WriteLiteral("\r\n");
            }
        }
WriteLiteral("\t</div>\r\n\t<input");
WriteLiteral(" type=\"hidden\"");
WriteLiteral(" name=\"start\"");
WriteLiteral(" value=\"1\"");
WriteLiteral(" />\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:52px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/OrderSearch_CustomerSearch.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t<br");
WriteLiteral(" style=\'clear:both\'");
WriteLiteral(" />\r\n\t<div");
WriteLiteral(" id=\"resultsView\"");
WriteLiteral(">\r\n");
          Html.RenderAction("DrawList", "OrderSearch"); 
WriteLiteral("\r\n\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/OrderSearch_CustomerSearch.cshtml")]
    public partial class IQ6_Views_OrderSearch_CustomerSearch_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_OrderSearch_CustomerSearch_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 110)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel108001", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.CustId.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#CustIdValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Company ID\r\n\t\t</label><input ");
                   Write(!Model.CustId.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.CustId.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/OrderSearch/Callback/?fname=\',$(thi" +
"s));\" \r\n\t\t\ttype=\'text\' \r\n\t\t\tname=\'CustIdValue\' \r\n\t\t\tvalue=\'");
              Write(Model.CustId.ValueFormatted);
WriteLiteral("\' \r\n\t\t\tstyle=\'position: absolute; left:268px;height:21px;width:138px;top:4px;\'/>\t" +
"\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'CustIdOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 695), Tuple.Create("\'", 868)
, Tuple.Create(Tuple.Create("", 703), Tuple.Create("position:", 703), true)
, Tuple.Create(Tuple.Create(" ", 712), Tuple.Create("absolute;", 713), true)
, Tuple.Create(Tuple.Create(" ", 722), Tuple.Create("left:130px;height:21px;width:138px;top:4px;>", 723), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 767), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.CustIdOperator))
, 774), false)
, Tuple.Create(Tuple.Create("\t\t", 841), Tuple.Create("</select>", 843), true)
, Tuple.Create(Tuple.Create("\r\n\t", 852), Tuple.Create("<label", 855), true)
, Tuple.Create(Tuple.Create(" ", 861), Tuple.Create("class=", 862), true)
);
WriteLiteral("IQLabel108002 ");
                            Write(!Model.CustName.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#CustNameValue-Popover\" style=\'position:absolute;font-size:12px;t" +
"ext-align:right;left:440px;height:21px;width:120px;top:3px;\'>Company Name\r\n\t\t</l" +
"abel><input ");
                   Write(!Model.CustName.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.CustName.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("OrderSearch/Callback/?fname=\',$(this));\" \r\n\t\t\ttype=\'");
WriteLiteral("text\'");
WriteLiteral(" \r\n\t\t\tname=\'CustNameValue\'");
WriteAttribute("value", Tuple.Create(" \r\n\t\t\tvalue=\'", 1354), Tuple.Create("\'", 1397)
, Tuple.Create(Tuple.Create("", 1367), Tuple.Create<System.Object, System.Int32>(Model.CustName.ValueFormatted
, 1367), false)
);
WriteLiteral(" \r\n\t\t\tstyle=\'position: absolute; left:714px;height:21px;width:149px;top:3px;\'");
WriteLiteral("/>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'CustNameOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 1531), Tuple.Create("\'", 1704)
, Tuple.Create(Tuple.Create("", 1539), Tuple.Create("position:", 1539), true)
, Tuple.Create(Tuple.Create(" ", 1548), Tuple.Create("absolute;", 1549), true)
, Tuple.Create(Tuple.Create(" ", 1558), Tuple.Create("left:565px;height:21px;width:149px;top:3px;>", 1559), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 1603), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.CustNameOperator))
, 1610), false)
, Tuple.Create(Tuple.Create("\t\t", 1677), Tuple.Create("</select>", 1679), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1688), Tuple.Create("<label", 1691), true)
, Tuple.Create(Tuple.Create(" ", 1697), Tuple.Create("class=", 1698), true)
);
WriteLiteral("IQLabel108003 ");
                            Write(!Model.CustCounty.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#CustCountyValue-Popover\" style=\'position:absolute;font-size:12px" +
";text-align:right;left:5px;height:21px;width:120px;top:3px;\'>County\r\n\t\t</label><" +
"input ");
                   Write(!Model.CustCounty.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.CustCounty.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("OrderSearch/Callback/?fname=\',$(this));\" \r\n\t\t\ttype=\'");
WriteLiteral("text\'");
WriteLiteral(" \r\n\t\t\tname=\'CustCountyValue\'");
WriteAttribute("value", Tuple.Create(" \r\n\t\t\tvalue=\'", 2192), Tuple.Create("\'", 2237)
, Tuple.Create(Tuple.Create("", 2205), Tuple.Create<System.Object, System.Int32>(Model.CustCounty.ValueFormatted
, 2205), false)
);
WriteLiteral(" \r\n\t\t\tstyle=\'position: absolute; left:268px;height:21px;width:138px;top:31px;\'");
WriteLiteral("/>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'CustCountyOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2374), Tuple.Create("", 2537)
, Tuple.Create(Tuple.Create("", 2382), Tuple.Create("position:", 2382), true)
, Tuple.Create(Tuple.Create(" ", 2391), Tuple.Create("absolute;", 2392), true)
, Tuple.Create(Tuple.Create(" ", 2401), Tuple.Create("left:130px;height:21px;width:138px;top:31px;>", 2402), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2447), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.CustCountyOperator))
, 2454), false)
, Tuple.Create(Tuple.Create("\t\t", 2523), Tuple.Create("</select>", 2525), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2534), Tuple.Create("", 2534), true)
);
        }
    }
}
 

public class OrdersRequired_FEColPointID : 
	 ElementBase<string>{
	public OrdersRequired_FEColPointID() :base("ColPointIDValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class OrdersRequired_FEColPoint : 
	 SelectElementBase<string>
	{
	public OrdersRequired_FEColPoint() :base("ColPointValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class OrdersRequired_FEFrom : 
	 DateElementBase
	{
	public OrdersRequired_FEFrom() :base("FromValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class OrdersRequired_FETo : 
	 DateElementBase
	{
	public OrdersRequired_FETo() :base("ToValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class OrdersRequiredModel : ReportBase {
	public OrdersRequiredModel() {
					ColPointID  = new OrdersRequired_FEColPointID();
					ColPoint  = new OrdersRequired_FEColPoint();
					From  = new OrdersRequired_FEFrom();
					To  = new OrdersRequired_FETo();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(ColPointID);
					action(ColPoint);
					action(From);
					action(To);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<OrdersRequiredModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_OrdersRequired_cshtml));
    }
	
				public OrdersRequired_FEColPointID ColPointID  { get;set;}
	
	public string ColPointIDValue { 
		get { return ColPointID.DataValue;}
		set{ ColPointID.Value = value; }
	}
			public OrdersRequired_FEColPoint ColPoint  { get;set;}
	
	public string ColPointValue { 
		get { return ColPoint.DataValue;}
		set{ ColPoint.Value = value; }
	}
			public OrdersRequired_FEFrom From  { get;set;}
	
	public DateTime FromValue { 
		get { return From.DataValue;}
		set{ From.Value = value; }
	}
			public OrdersRequired_FETo To  { get;set;}
	
	public DateTime ToValue { 
		get { return To.DataValue;}
		set{ To.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/OrdersRequired.cshtml";
			}
}
public class OrdersRequiredController : ScreenController<OrdersRequiredModel> {
			public ActionResult AutoCompleteColPoint(string q) {
			var mdl = new OrdersRequiredModel();
			SC.GetManager<OrdersRequiredModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.ColPoint.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/OrdersRequired.cshtml")]
    public partial class IQ6_Views_OrdersRequired_cshtml : System.Web.Mvc.WebViewPage<FTL.OrdersRequiredModel>
    {
        public IQ6_Views_OrdersRequired_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "OrdersRequired";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<OrdersRequiredModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:124px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/OrdersRequired_OrdersRequired.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/OrdersRequired_OrdersRequired.cshtml")]
    public partial class IQ6_Views_OrdersRequired_OrdersRequired_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_OrdersRequired_OrdersRequired_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 114)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406011", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.ColPointID.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#ColPointIDValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Col Point ID:\r\n\t\t</label><input ");
                   Write(!Model.ColPointID.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.ColPointID.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/OrdersRequired/Callback/?fname=ColP" +
"ointID\',$(this));\" \r\n\t\t\ttype=\'text\' \r\n\t\t\tname=\'ColPointIDValue\' \r\n\t\t\tvalue=\'");
              Write(Model.ColPointID.ValueFormatted);
WriteLiteral("\' \r\n\t\t\tstyle=\'position: absolute; left:210px;height:21px;width:80px;top:3px;\'/>\t\t" +
"<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'ColPointIDOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 738), Tuple.Create("\'", 912)
, Tuple.Create(Tuple.Create("", 746), Tuple.Create("position:", 746), true)
, Tuple.Create(Tuple.Create(" ", 755), Tuple.Create("absolute;", 756), true)
, Tuple.Create(Tuple.Create(" ", 765), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 766), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 809), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.ColPointIDOperator))
, 816), false)
, Tuple.Create(Tuple.Create("\t\t", 885), Tuple.Create("</select>", 887), true)
, Tuple.Create(Tuple.Create("\r\n\t", 896), Tuple.Create("<label", 899), true)
, Tuple.Create(Tuple.Create(" ", 905), Tuple.Create("class=", 906), true)
);
WriteLiteral("IQLabel406012 ");
                            Write(!Model.ColPoint.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#ColPointValue-Popover\" style=\'position:absolute;font-size:12px;t" +
"ext-align:right;left:5px;height:21px;width:120px;top:28px;\'>Collect Point:\r\n\t\t</" +
"label><select multiple=\"multiple\"  ");
                                         Write(!Model.ColPoint.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.ColPoint.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("OrdersRequired/Callback/?fname=ColPoint");
WriteLiteral("\',$(this));\"  \r\n\t\t   name=\'ColPointValue\'  style=\'position: absolute; left:210px;" +
"height:21px;width:80px;top:28px;\'>\r\n");
             foreach(var itm in Model.ColPoint.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 1554), Tuple.Create("\'", 1575)
, Tuple.Create(Tuple.Create("", 1562), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 1562), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.ColPointValue != null ? Model.ColPointValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                                Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select class=\'form-control\' name=\'ColPointOperator\' style=\'position" +
": absolute; left:130px;height:21px;width:80px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetComboOperators(Model.ColPointOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 1945), Tuple.Create("\'", 2010)
, Tuple.Create(Tuple.Create("", 1953), Tuple.Create("IQLabel406014", 1953), true)
, Tuple.Create(Tuple.Create(" ", 1966), Tuple.Create<System.Object, System.Int32>(!Model.From.LabelVisible ? " hide " : ""
, 1967), false)
);
WriteLiteral("  data-target=\"#FromValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:78px;\'");
WriteLiteral(">From:\r\n\t\t</label><input   ");
                     Write(!Model.From.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.From.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/OrdersRequired/Callback/?fname=From\',$(" +
"this));\"  type=\'text\' name=\'FromValue\' value=\'");
                                                                                                                                                                                                                                         Write(Model.From.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:78px;\'/>\t\t<sel" +
"ect");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'FromOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2608), Tuple.Create("\'", 2779)
, Tuple.Create(Tuple.Create("", 2616), Tuple.Create("position:", 2616), true)
, Tuple.Create(Tuple.Create(" ", 2625), Tuple.Create("absolute;", 2626), true)
, Tuple.Create(Tuple.Create(" ", 2635), Tuple.Create("left:130px;height:21px;width:57px;top:78px;>", 2636), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2680), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.FromOperator))
, 2687), false)
, Tuple.Create(Tuple.Create("\t\t", 2752), Tuple.Create("</select>", 2754), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2763), Tuple.Create("<label", 2766), true)
, Tuple.Create(Tuple.Create(" ", 2772), Tuple.Create("class=", 2773), true)
);
WriteLiteral("IQLabel406015 ");
                            Write(!Model.To.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#ToValue-Popover\" style=\'position:absolute;font-size:12px;text-al" +
"ign:right;left:5px;height:21px;width:120px;top:103px;\'>To:\r\n\t\t</label><input   ");
                     Write(!Model.To.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.To.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("OrdersRequired/Callback/?fname=To");
WriteLiteral("\',$(this));\"  type=\'text\' name=\'ToValue\' value=\'");
                                                                                                                                                                                                                                   Write(Model.To.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:103px;\'/>\t\t<se" +
"lect class=\'form-control\' name=\'ToOperator\' style=\'position: absolute; left:130p" +
"x;height:21px;width:57px;top:103px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetNumberOperators(Model.ToOperator)));
WriteLiteral("\t\t</select>\r\n\t");
        }
    }
}
 


public class SendUnsentInvoicesModel : ScreenBase {
	public SendUnsentInvoicesModel() {
			}
	public override void ForEachElement(Action<IElementBase> action) {
			}
	
	
			public override string GetView() {
				return "~/Views/Functions/SendUnsentInvoices.cshtml";
			}
}
public class SendUnsentInvoicesController : ScreenController<SendUnsentInvoicesModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/SendUnsentInvoices.cshtml")]
    public partial class IQ6_Views_SendUnsentInvoices_cshtml : System.Web.Mvc.WebViewPage<FTL.SendUnsentInvoicesModel>
    {
        public IQ6_Views_SendUnsentInvoices_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Send Unsent Invoices";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<SendUnsentInvoicesModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 
 

public class ShowFTLDAN_FEFTLDAN : 
	 ElementBase<bool>{
	public ShowFTLDAN_FEFTLDAN() :base("FTLDANValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class ShowFTLDANModel : ReportBase {
	public ShowFTLDANModel() {
					FTLDAN  = new ShowFTLDAN_FEFTLDAN();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(FTLDAN);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<ShowFTLDANModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_ShowFTLDAN_cshtml));
    }
	
				public ShowFTLDAN_FEFTLDAN FTLDAN  { get;set;}
	
	public bool FTLDANValue { 
		get { return FTLDAN.DataValue;}
		set{ FTLDAN.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/ShowFTLDAN.cshtml";
			}
}
public class ShowFTLDANController : ScreenController<ShowFTLDANModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ShowFTLDAN.cshtml")]
    public partial class IQ6_Views_ShowFTLDAN_cshtml : System.Web.Mvc.WebViewPage<FTL.ShowFTLDANModel>
    {
        public IQ6_Views_ShowFTLDAN_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "ShowFTLDAN";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<ShowFTLDANModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/ShowFTLDAN_ShowFTLDAN.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ShowFTLDAN_ShowFTLDAN.cshtml")]
    public partial class IQ6_Views_ShowFTLDAN_ShowFTLDAN_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_ShowFTLDAN_ShowFTLDAN_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 110)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel407011", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.FTLDAN.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#FTLDANValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:35px;height:21px;w" +
"idth:120px;top:3px;\'");
WriteLiteral(">Show only FTL DAN\r\n\t\t</label>\t\t\t\r\n\t\t<input");
WriteAttribute("class", Tuple.Create("  class=\'", 291), Tuple.Create("\'", 342)
, Tuple.Create(Tuple.Create("  ", 300), Tuple.Create<System.Object, System.Int32>(!Model.FTLDAN.Visible ? " hide " : ""
, 302), false)
);
WriteLiteral(" \r\n\t\t ");
     Write(!Model.FTLDAN.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/ShowFTLDAN/" +
"Callback/?fname=FTLDAN\',$(this));\"  style=\'position: absolute; left:17px;height:" +
"21px;width:12px;top:3px;\' name=\'FTLDANValue\'   ");
                                                                                                                                                                                                                                                                        Write(Model.FTLDANValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input");
WriteLiteral(" type=\'hidden\'");
WriteLiteral(" name=\'FTLDANValue\'");
WriteLiteral(" value=\'false\'");
WriteLiteral(" ");
                                                          Write(!Model.FTLDANValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'FTLDANOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 826), Tuple.Create("", 984)
, Tuple.Create(Tuple.Create("", 834), Tuple.Create("position:", 834), true)
, Tuple.Create(Tuple.Create(" ", 843), Tuple.Create("absolute;", 844), true)
, Tuple.Create(Tuple.Create(" ", 853), Tuple.Create("left:5px;height:21px;width:12px;top:3px;>", 854), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 895), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.FTLDANOperator))
, 902), false)
, Tuple.Create(Tuple.Create("\t\t", 970), Tuple.Create("</select>", 972), true)
, Tuple.Create(Tuple.Create("\r\n\t", 981), Tuple.Create("", 981), true)
);
        }
    }
}
 

public class ShowSeparatePage_FESepPage : 
	 ElementBase<bool>{
	public ShowSeparatePage_FESepPage() :base("SepPageValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class ShowSeparatePageModel : ReportBase {
	public ShowSeparatePageModel() {
					SepPage  = new ShowSeparatePage_FESepPage();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(SepPage);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<ShowSeparatePageModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_ShowSeparatePage_cshtml));
    }
	
				public ShowSeparatePage_FESepPage SepPage  { get;set;}
	
	public bool SepPageValue { 
		get { return SepPage.DataValue;}
		set{ SepPage.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/ShowSeparatePage.cshtml";
			}
}
public class ShowSeparatePageController : ScreenController<ShowSeparatePageModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ShowSeparatePage.cshtml")]
    public partial class IQ6_Views_ShowSeparatePage_cshtml : System.Web.Mvc.WebViewPage<FTL.ShowSeparatePageModel>
    {
        public IQ6_Views_ShowSeparatePage_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "ShowSeparatePage";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<ShowSeparatePageModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/ShowSeparatePage_ShowSeparatePage.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ShowSeparatePage_ShowSeparatePage.cshtml")]
    public partial class IQ6_Views_ShowSeparatePage_ShowSeparatePage_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_ShowSeparatePage_ShowSeparatePage_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 111)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406911", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.SepPage.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#SepPageValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:35px;height:21px;w" +
"idth:250px;top:3px;\'");
WriteLiteral(">Show each record on separate page\r\n\t\t</label>\t\t\t\r\n\t\t<input");
WriteAttribute("class", Tuple.Create("  class=\'", 309), Tuple.Create("\'", 361)
, Tuple.Create(Tuple.Create("  ", 318), Tuple.Create<System.Object, System.Int32>(!Model.SepPage.Visible ? " hide " : ""
, 320), false)
);
WriteLiteral(" \r\n\t\t ");
     Write(!Model.SepPage.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/ShowSeparat" +
"ePage/Callback/?fname=SepPage\',$(this));\"  style=\'position: absolute; left:17px;" +
"height:21px;width:12px;top:3px;\' name=\'SepPageValue\'   ");
                                                                                                                                                                                                                                                                                 Write(Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input");
WriteLiteral(" type=\'hidden\'");
WriteLiteral(" name=\'SepPageValue\'");
WriteLiteral(" value=\'false\'");
WriteLiteral(" ");
                                                           Write(!Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'SepPageOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 858), Tuple.Create("", 1017)
, Tuple.Create(Tuple.Create("", 866), Tuple.Create("position:", 866), true)
, Tuple.Create(Tuple.Create(" ", 875), Tuple.Create("absolute;", 876), true)
, Tuple.Create(Tuple.Create(" ", 885), Tuple.Create("left:5px;height:21px;width:12px;top:3px;>", 886), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 927), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.SepPageOperator))
, 934), false)
, Tuple.Create(Tuple.Create("\t\t", 1003), Tuple.Create("</select>", 1005), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1014), Tuple.Create("", 1014), true)
);
        }
    }
}
 

public class ShowSeparatePageAddress_FESepPage : 
	 ElementBase<bool>{
	public ShowSeparatePageAddress_FESepPage() :base("SepPageValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class ShowSeparatePageAddress_FEShowAddress : 
	 ElementBase<bool>{
	public ShowSeparatePageAddress_FEShowAddress() :base("ShowAddressValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class ShowSeparatePageAddressModel : ReportBase {
	public ShowSeparatePageAddressModel() {
					SepPage  = new ShowSeparatePageAddress_FESepPage();
					ShowAddress  = new ShowSeparatePageAddress_FEShowAddress();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(SepPage);
					action(ShowAddress);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<ShowSeparatePageAddressModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_ShowSeparatePageAddress_cshtml));
    }
	
				public ShowSeparatePageAddress_FESepPage SepPage  { get;set;}
	
	public bool SepPageValue { 
		get { return SepPage.DataValue;}
		set{ SepPage.Value = value; }
	}
			public ShowSeparatePageAddress_FEShowAddress ShowAddress  { get;set;}
	
	public bool ShowAddressValue { 
		get { return ShowAddress.DataValue;}
		set{ ShowAddress.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/ShowSeparatePageAddress.cshtml";
			}
}
public class ShowSeparatePageAddressController : ScreenController<ShowSeparatePageAddressModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ShowSeparatePageAddress.cshtml")]
    public partial class IQ6_Views_ShowSeparatePageAddress_cshtml : System.Web.Mvc.WebViewPage<FTL.ShowSeparatePageAddressModel>
    {
        public IQ6_Views_ShowSeparatePageAddress_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "ShowSeparatePageAddress";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<ShowSeparatePageAddressModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:49px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/ShowSeparatePageAddress_ShowSeparatePageAddress.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/ShowSeparatePageAddress_ShowSeparatePageAddress.cshtml")]
    public partial class IQ6_Views_ShowSeparatePageAddress_ShowSeparatePageAddress_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_ShowSeparatePageAddress_ShowSeparatePageAddress_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 111)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406811", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.SepPage.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#SepPageValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:35px;height:21px;w" +
"idth:250px;top:3px;\'");
WriteLiteral(">Show each record on separate page\r\n\t\t</label>\t\t\t\r\n\t\t<input");
WriteAttribute("class", Tuple.Create("  class=\'", 309), Tuple.Create("\'", 361)
, Tuple.Create(Tuple.Create("  ", 318), Tuple.Create<System.Object, System.Int32>(!Model.SepPage.Visible ? " hide " : ""
, 320), false)
);
WriteLiteral(" \r\n\t\t ");
     Write(!Model.SepPage.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/ShowSeparat" +
"ePageAddress/Callback/?fname=SepPage\',$(this));\"  style=\'position: absolute; lef" +
"t:17px;height:21px;width:12px;top:3px;\' name=\'SepPageValue\'   ");
                                                                                                                                                                                                                                                                                        Write(Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input");
WriteLiteral(" type=\'hidden\'");
WriteLiteral(" name=\'SepPageValue\'");
WriteLiteral(" value=\'false\'");
WriteLiteral(" ");
                                                           Write(!Model.SepPageValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'SepPageOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 865), Tuple.Create("\'", 1037)
, Tuple.Create(Tuple.Create("", 873), Tuple.Create("position:", 873), true)
, Tuple.Create(Tuple.Create(" ", 882), Tuple.Create("absolute;", 883), true)
, Tuple.Create(Tuple.Create(" ", 892), Tuple.Create("left:5px;height:21px;width:12px;top:3px;>", 893), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 934), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.SepPageOperator))
, 941), false)
, Tuple.Create(Tuple.Create("\t\t", 1010), Tuple.Create("</select>", 1012), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1021), Tuple.Create("<label", 1024), true)
, Tuple.Create(Tuple.Create(" ", 1030), Tuple.Create("class=", 1031), true)
);
WriteLiteral("IQLabel406812 ");
                            Write(!Model.ShowAddress.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#ShowAddressValue-Popover\" style=\'position:absolute;font-size:12p" +
"x;text-align:right;left:35px;height:21px;width:250px;top:28px;\'>Show Address det" +
"ails\r\n\t\t</label>\t\t\t\r\n\t\t<input  class=\'  ");
                     Write(!Model.ShowAddress.Visible ? " hide " : "");
WriteLiteral("\' \r\n");
WriteLiteral("\t\t ");
     Write(!Model.ShowAddress.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("ShowSeparatePageAddress/Callback/?fname=ShowAddress");
WriteLiteral("\',$(this));\"  style=\'position: absolute; left:17px;height:21px;width:12px;top:28p" +
"x;\' name=\'ShowAddressValue\'   ");
                                                                                                                                                                                                                                                                                                     Write(Model.ShowAddressValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input type=\'hidden\' name=\'ShowAddressValue\' value=\'false\' ");
                                                               Write(!Model.ShowAddressValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select class=\'form-control\' name=\'ShowAddressOperator\' style=\'position:" +
" absolute; left:5px;height:21px;width:12px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.ShowAddressOperator)));
WriteLiteral("\t\t</select>\r\n\t");
        }
    }
}
 

public class StaffAndDest_FEFrom : 
	 SelectElementBase<string>
	{
	public StaffAndDest_FEFrom() :base("FromValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class StaffAndDest_FEEmailTo : 
	 SelectElementBase<string>
	{
	public StaffAndDest_FEEmailTo() :base("EmailToValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class StaffAndDestModel : ReportBase {
	public StaffAndDestModel() {
					From  = new StaffAndDest_FEFrom();
					EmailTo  = new StaffAndDest_FEEmailTo();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(From);
					action(EmailTo);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<StaffAndDestModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_StaffAndDest_cshtml));
    }
	
				public StaffAndDest_FEFrom From  { get;set;}
	
	public string FromValue { 
		get { return From.DataValue;}
		set{ From.Value = value; }
	}
			public StaffAndDest_FEEmailTo EmailTo  { get;set;}
	
	public string EmailToValue { 
		get { return EmailTo.DataValue;}
		set{ EmailTo.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/StaffAndDest.cshtml";
			}
}
public class StaffAndDestController : ScreenController<StaffAndDestModel> {
			public ActionResult AutoCompleteFrom(string q) {
			var mdl = new StaffAndDestModel();
			SC.GetManager<StaffAndDestModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.From.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
			public ActionResult AutoCompleteEmailTo(string q) {
			var mdl = new StaffAndDestModel();
			SC.GetManager<StaffAndDestModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.EmailTo.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/StaffAndDest.cshtml")]
    public partial class IQ6_Views_StaffAndDest_cshtml : System.Web.Mvc.WebViewPage<FTL.StaffAndDestModel>
    {
        public IQ6_Views_StaffAndDest_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "StaffAndDest";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<StaffAndDestModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:49px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/StaffAndDest_StaffAndDest.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/StaffAndDest_StaffAndDest.cshtml")]
    public partial class IQ6_Views_StaffAndDest_StaffAndDest_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_StaffAndDest_StaffAndDest_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 108)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel405511", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.From.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#FromValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">From:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.From.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.From.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/StaffAndDest/Callback/?fname=From\',$(th" +
"is));\"  \r\n\t\t   name=\'FromValue\'  style=\'position: absolute; left:210px;height:21" +
"px;width:80px;top:3px;\'>\r\n");
             foreach(var itm in Model.From.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 651), Tuple.Create("\'", 672)
, Tuple.Create(Tuple.Create("", 659), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 659), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.FromValue != null ? Model.FromValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                        Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'FromOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 863), Tuple.Create("\'", 1032)
, Tuple.Create(Tuple.Create("", 871), Tuple.Create("position:", 871), true)
, Tuple.Create(Tuple.Create(" ", 880), Tuple.Create("absolute;", 881), true)
, Tuple.Create(Tuple.Create(" ", 890), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 891), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 934), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.FromOperator))
, 941), false)
, Tuple.Create(Tuple.Create("\t\t", 1005), Tuple.Create("</select>", 1007), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1016), Tuple.Create("<label", 1019), true)
, Tuple.Create(Tuple.Create(" ", 1025), Tuple.Create("class=", 1026), true)
);
WriteLiteral("IQLabel405512 ");
                            Write(!Model.EmailTo.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#EmailToValue-Popover\" style=\'position:absolute;font-size:12px;te" +
"xt-align:right;left:5px;height:21px;width:120px;top:28px;\'>Email To:\r\n\t\t</label>" +
"<select multiple=\"multiple\"  ");
                                         Write(!Model.EmailTo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.EmailTo.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("StaffAndDest/Callback/?fname=EmailTo");
WriteLiteral("\',$(this));\"  \r\n\t\t   name=\'EmailToValue\'  style=\'position: absolute; left:210px;h" +
"eight:21px;width:80px;top:28px;\'>\r\n");
             foreach(var itm in Model.EmailTo.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 1660), Tuple.Create("\'", 1681)
, Tuple.Create(Tuple.Create("", 1668), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 1668), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.EmailToValue != null ? Model.EmailToValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                              Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select class=\'form-control\' name=\'EmailToOperator\' style=\'position:" +
" absolute; left:130px;height:21px;width:80px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetComboOperators(Model.EmailToOperator)));
WriteLiteral("\t\t</select>\r\n\t");
        }
    }
}
 

public class StaffSelect_FEStaff : 
	 SelectElementBase<string>
	{
	public StaffSelect_FEStaff() :base("StaffValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class StaffSelectModel : ReportBase {
	public StaffSelectModel() {
					Staff  = new StaffSelect_FEStaff();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(Staff);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<StaffSelectModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_StaffSelect_cshtml));
    }
	
				public StaffSelect_FEStaff Staff  { get;set;}
	
	public string StaffValue { 
		get { return Staff.DataValue;}
		set{ Staff.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/StaffSelect.cshtml";
			}
}
public class StaffSelectController : ScreenController<StaffSelectModel> {
			public ActionResult AutoCompleteStaff(string q) {
			var mdl = new StaffSelectModel();
			SC.GetManager<StaffSelectModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Staff.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/StaffSelect.cshtml")]
    public partial class IQ6_Views_StaffSelect_cshtml : System.Web.Mvc.WebViewPage<FTL.StaffSelectModel>
    {
        public IQ6_Views_StaffSelect_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "StaffSelect";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<StaffSelectModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/StaffSelect_StaffSelect.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/StaffSelect_StaffSelect.cshtml")]
    public partial class IQ6_Views_StaffSelect_StaffSelect_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_StaffSelect_StaffSelect_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 109)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel405611", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.Staff.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#StaffValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">From:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Staff.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Staff.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/StaffSelect/Callback/?fname=Staff\',$(th" +
"is));\"  \r\n\t\t   name=\'StaffValue\'  style=\'position: absolute; left:210px;height:2" +
"1px;width:80px;top:3px;\'>\r\n");
             foreach(var itm in Model.Staff.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 657), Tuple.Create("\'", 678)
, Tuple.Create(Tuple.Create("", 665), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 665), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.StaffValue != null ? Model.StaffValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                          Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'StaffOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 872), Tuple.Create("", 1029)
, Tuple.Create(Tuple.Create("", 880), Tuple.Create("position:", 880), true)
, Tuple.Create(Tuple.Create(" ", 889), Tuple.Create("absolute;", 890), true)
, Tuple.Create(Tuple.Create(" ", 899), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 900), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 943), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.StaffOperator))
, 950), false)
, Tuple.Create(Tuple.Create("\t\t", 1015), Tuple.Create("</select>", 1017), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1026), Tuple.Create("", 1026), true)
);
        }
    }
}
 

public class SummaryDetail_FEType : 
	 SelectElementBase<string>
	{
	public SummaryDetail_FEType() :base("TypeValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class SummaryDetailModel : ReportBase {
	public SummaryDetailModel() {
					Type  = new SummaryDetail_FEType();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(Type);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<SummaryDetailModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_SummaryDetail_cshtml));
    }
	
				public SummaryDetail_FEType Type  { get;set;}
	
	public string TypeValue { 
		get { return Type.DataValue;}
		set{ Type.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/SummaryDetail.cshtml";
			}
}
public class SummaryDetailController : ScreenController<SummaryDetailModel> {
			public ActionResult AutoCompleteType(string q) {
			var mdl = new SummaryDetailModel();
			SC.GetManager<SummaryDetailModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Type.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/SummaryDetail.cshtml")]
    public partial class IQ6_Views_SummaryDetail_cshtml : System.Web.Mvc.WebViewPage<FTL.SummaryDetailModel>
    {
        public IQ6_Views_SummaryDetail_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "SummaryDetail";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<SummaryDetailModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/SummaryDetail_SummaryDetail.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/SummaryDetail_SummaryDetail.cshtml")]
    public partial class IQ6_Views_SummaryDetail_SummaryDetail_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_SummaryDetail_SummaryDetail_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 108)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406711", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.Type.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#TypeValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Type:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Type.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Type.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/SummaryDetail/Callback/?fname=Type\',$(t" +
"his));\"  \r\n\t\t   name=\'TypeValue\'  style=\'position: absolute; left:210px;height:2" +
"1px;width:80px;top:3px;\'>\r\n");
             foreach(var itm in Model.Type.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 652), Tuple.Create("\'", 673)
, Tuple.Create(Tuple.Create("", 660), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 660), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.TypeValue != null ? Model.TypeValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                        Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'TypeOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 864), Tuple.Create("", 1020)
, Tuple.Create(Tuple.Create("", 872), Tuple.Create("position:", 872), true)
, Tuple.Create(Tuple.Create(" ", 881), Tuple.Create("absolute;", 882), true)
, Tuple.Create(Tuple.Create(" ", 891), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 892), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 935), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.TypeOperator))
, 942), false)
, Tuple.Create(Tuple.Create("\t\t", 1006), Tuple.Create("</select>", 1008), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1017), Tuple.Create("", 1017), true)
);
        }
    }
}
 

public class TransportCharges_FEType : 
	 SelectElementBase<string>
	{
	public TransportCharges_FEType() :base("TypeValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class TransportCharges_FEMonth : 
	 SelectElementBase<string>
	{
	public TransportCharges_FEMonth() :base("MonthValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class TransportCharges_FEJobNo : 
	 ElementBase<string>{
	public TransportCharges_FEJobNo() :base("JobNoValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class TransportChargesModel : ReportBase {
	public TransportChargesModel() {
					Type  = new TransportCharges_FEType();
					Month  = new TransportCharges_FEMonth();
					JobNo  = new TransportCharges_FEJobNo();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(Type);
					action(Month);
					action(JobNo);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<TransportChargesModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_TransportCharges_cshtml));
    }
	
				public TransportCharges_FEType Type  { get;set;}
	
	public string TypeValue { 
		get { return Type.DataValue;}
		set{ Type.Value = value; }
	}
			public TransportCharges_FEMonth Month  { get;set;}
	
	public string MonthValue { 
		get { return Month.DataValue;}
		set{ Month.Value = value; }
	}
			public TransportCharges_FEJobNo JobNo  { get;set;}
	
	public string JobNoValue { 
		get { return JobNo.DataValue;}
		set{ JobNo.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/TransportCharges.cshtml";
			}
}
public class TransportChargesController : ScreenController<TransportChargesModel> {
			public ActionResult AutoCompleteType(string q) {
			var mdl = new TransportChargesModel();
			SC.GetManager<TransportChargesModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Type.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
			public ActionResult AutoCompleteMonth(string q) {
			var mdl = new TransportChargesModel();
			SC.GetManager<TransportChargesModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Month.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/TransportCharges.cshtml")]
    public partial class IQ6_Views_TransportCharges_cshtml : System.Web.Mvc.WebViewPage<FTL.TransportChargesModel>
    {
        public IQ6_Views_TransportCharges_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "TransportCharges";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<TransportChargesModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:74px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/TransportCharges_TransportCharges.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/TransportCharges_TransportCharges.cshtml")]
    public partial class IQ6_Views_TransportCharges_TransportCharges_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_TransportCharges_TransportCharges_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 108)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel405811", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.Type.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#TypeValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Type:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Type.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Type.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/TransportCharges/Callback/?fname=Type\'," +
"$(this));\"  \r\n\t\t   name=\'TypeValue\'  style=\'position: absolute; left:210px;heigh" +
"t:21px;width:80px;top:3px;\'>\r\n");
             foreach(var itm in Model.Type.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 655), Tuple.Create("\'", 676)
, Tuple.Create(Tuple.Create("", 663), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 663), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.TypeValue != null ? Model.TypeValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                        Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'TypeOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 867), Tuple.Create("\'", 1036)
, Tuple.Create(Tuple.Create("", 875), Tuple.Create("position:", 875), true)
, Tuple.Create(Tuple.Create(" ", 884), Tuple.Create("absolute;", 885), true)
, Tuple.Create(Tuple.Create(" ", 894), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 895), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 938), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.TypeOperator))
, 945), false)
, Tuple.Create(Tuple.Create("\t\t", 1009), Tuple.Create("</select>", 1011), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1020), Tuple.Create("<label", 1023), true)
, Tuple.Create(Tuple.Create(" ", 1029), Tuple.Create("class=", 1030), true)
);
WriteLiteral("IQLabel405812 ");
                            Write(!Model.Month.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#MonthValue-Popover\" style=\'position:absolute;font-size:12px;text" +
"-align:right;left:5px;height:21px;width:120px;top:28px;\'>Month:\r\n\t\t</label><sele" +
"ct multiple=\"multiple\"  ");
                                         Write(!Model.Month.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Month.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("TransportCharges/Callback/?fname=Month");
WriteLiteral("\',$(this));\"  \r\n\t\t   name=\'MonthValue\'  style=\'position: absolute; left:210px;hei" +
"ght:21px;width:80px;top:28px;\'>\r\n");
             foreach(var itm in Model.Month.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 1651), Tuple.Create("\'", 1672)
, Tuple.Create(Tuple.Create("", 1659), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 1659), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.MonthValue != null ? Model.MonthValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                          Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select class=\'form-control\' name=\'MonthOperator\' style=\'position: a" +
"bsolute; left:130px;height:21px;width:80px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetComboOperators(Model.MonthOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 2030), Tuple.Create("\'", 2096)
, Tuple.Create(Tuple.Create("", 2038), Tuple.Create("IQLabel405813", 2038), true)
, Tuple.Create(Tuple.Create(" ", 2051), Tuple.Create<System.Object, System.Int32>(!Model.JobNo.LabelVisible ? " hide " : ""
, 2052), false)
);
WriteLiteral("  data-target=\"#JobNoValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:53px;\'");
WriteLiteral(">Job No:\r\n\t\t</label><input ");
                   Write(!Model.JobNo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t\tclass=\'form-control  ");
                             Write(!Model.JobNo.Visible ? " hide " : "");
WriteLiteral("\' \r\n\t\t\tonchange=\"javascript:IQDirtyCallback(\'/TransportCharges/Callback/?fname=Jo" +
"bNo\',$(this));\" \r\n\t\t\ttype=\'text\' \r\n\t\t\tname=\'JobNoValue\' \r\n\t\t\tvalue=\'");
              Write(Model.JobNo.ValueFormatted);
WriteLiteral("\' \r\n\t\t\tstyle=\'position: absolute; left:210px;height:21px;width:80px;top:53px;\'/>\t" +
"\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'JobNoOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2683), Tuple.Create("", 2840)
, Tuple.Create(Tuple.Create("", 2691), Tuple.Create("position:", 2691), true)
, Tuple.Create(Tuple.Create(" ", 2700), Tuple.Create("absolute;", 2701), true)
, Tuple.Create(Tuple.Create(" ", 2710), Tuple.Create("left:130px;height:21px;width:80px;top:53px;>", 2711), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2755), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetTextOperators(Model.JobNoOperator))
, 2762), false)
, Tuple.Create(Tuple.Create("\t\t", 2826), Tuple.Create("</select>", 2828), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2837), Tuple.Create("", 2837), true)
);
        }
    }
}
 

public class TransportDet_FEStaff : 
	 SelectElementBase<string>
	{
	public TransportDet_FEStaff() :base("StaffValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class TransportDet_FEType : 
	 SelectElementBase<string>
	{
	public TransportDet_FEType() :base("TypeValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class TransportDetModel : ReportBase {
	public TransportDetModel() {
					Staff  = new TransportDet_FEStaff();
					Type  = new TransportDet_FEType();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(Staff);
					action(Type);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<TransportDetModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_TransportDet_cshtml));
    }
	
				public TransportDet_FEStaff Staff  { get;set;}
	
	public string StaffValue { 
		get { return Staff.DataValue;}
		set{ Staff.Value = value; }
	}
			public TransportDet_FEType Type  { get;set;}
	
	public string TypeValue { 
		get { return Type.DataValue;}
		set{ Type.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/TransportDet.cshtml";
			}
}
public class TransportDetController : ScreenController<TransportDetModel> {
			public ActionResult AutoCompleteStaff(string q) {
			var mdl = new TransportDetModel();
			SC.GetManager<TransportDetModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Staff.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
			public ActionResult AutoCompleteType(string q) {
			var mdl = new TransportDetModel();
			SC.GetManager<TransportDetModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Type.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/TransportDet.cshtml")]
    public partial class IQ6_Views_TransportDet_cshtml : System.Web.Mvc.WebViewPage<FTL.TransportDetModel>
    {
        public IQ6_Views_TransportDet_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "TransportDet";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<TransportDetModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:49px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/TransportDet_TransportDet.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/TransportDet_TransportDet.cshtml")]
    public partial class IQ6_Views_TransportDet_TransportDet_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_TransportDet_TransportDet_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 109)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel405711", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.Staff.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#StaffValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Staff:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Staff.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Staff.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/TransportDet/Callback/?fname=Staff\',$(t" +
"his));\"  \r\n\t\t   name=\'StaffValue\'  style=\'position: absolute; left:210px;height:" +
"21px;width:80px;top:3px;\'>\r\n");
             foreach(var itm in Model.Staff.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 659), Tuple.Create("\'", 680)
, Tuple.Create(Tuple.Create("", 667), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 667), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.StaffValue != null ? Model.StaffValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                          Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'StaffOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 874), Tuple.Create("\'", 1044)
, Tuple.Create(Tuple.Create("", 882), Tuple.Create("position:", 882), true)
, Tuple.Create(Tuple.Create(" ", 891), Tuple.Create("absolute;", 892), true)
, Tuple.Create(Tuple.Create(" ", 901), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 902), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 945), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.StaffOperator))
, 952), false)
, Tuple.Create(Tuple.Create("\t\t", 1017), Tuple.Create("</select>", 1019), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1028), Tuple.Create("<label", 1031), true)
, Tuple.Create(Tuple.Create(" ", 1037), Tuple.Create("class=", 1038), true)
);
WriteLiteral("IQLabel405712 ");
                            Write(!Model.Type.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#TypeValue-Popover\" style=\'position:absolute;font-size:12px;text-" +
"align:right;left:5px;height:21px;width:120px;top:28px;\'>Type:\r\n\t\t</label><select" +
" multiple=\"multiple\"  ");
                                         Write(!Model.Type.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Type.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("TransportDet/Callback/?fname=Type");
WriteLiteral("\',$(this));\"  \r\n\t\t   name=\'TypeValue\'  style=\'position: absolute; left:210px;heig" +
"ht:21px;width:80px;top:28px;\'>\r\n");
             foreach(var itm in Model.Type.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 1647), Tuple.Create("\'", 1668)
, Tuple.Create(Tuple.Create("", 1655), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 1655), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.TypeValue != null ? Model.TypeValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                        Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select class=\'form-control\' name=\'TypeOperator\' style=\'position: ab" +
"solute; left:130px;height:21px;width:80px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetComboOperators(Model.TypeOperator)));
WriteLiteral("\t\t</select>\r\n\t");
        }
    }
}
 

public class UnDecWithDates_FEUnDecOnly : 
	 ElementBase<bool>{
	public UnDecWithDates_FEUnDecOnly() :base("UnDecOnlyValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class UnDecWithDates_FEDateFrom : 
	 DateElementBase
	{
	public UnDecWithDates_FEDateFrom() :base("DateFromValue", ""
		)
	{
		Enabled = true;
	}
		
}
public class UnDecWithDates_FEDateTo : 
	 DateElementBase
	{
	public UnDecWithDates_FEDateTo() :base("DateToValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class UnDecWithDatesModel : ReportBase {
	public UnDecWithDatesModel() {
					UnDecOnly  = new UnDecWithDates_FEUnDecOnly();
					DateFrom  = new UnDecWithDates_FEDateFrom();
					DateTo  = new UnDecWithDates_FEDateTo();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(UnDecOnly);
					action(DateFrom);
					action(DateTo);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<UnDecWithDatesModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_UnDecWithDates_cshtml));
    }
	
				public UnDecWithDates_FEUnDecOnly UnDecOnly  { get;set;}
	
	public bool UnDecOnlyValue { 
		get { return UnDecOnly.DataValue;}
		set{ UnDecOnly.Value = value; }
	}
			public UnDecWithDates_FEDateFrom DateFrom  { get;set;}
	
	public DateTime DateFromValue { 
		get { return DateFrom.DataValue;}
		set{ DateFrom.Value = value; }
	}
			public UnDecWithDates_FEDateTo DateTo  { get;set;}
	
	public DateTime DateToValue { 
		get { return DateTo.DataValue;}
		set{ DateTo.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/UnDecWithDates.cshtml";
			}
}
public class UnDecWithDatesController : ScreenController<UnDecWithDatesModel> {
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/UnDecWithDates.cshtml")]
    public partial class IQ6_Views_UnDecWithDates_cshtml : System.Web.Mvc.WebViewPage<FTL.UnDecWithDatesModel>
    {
        public IQ6_Views_UnDecWithDates_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "UnDecWithDates";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<UnDecWithDatesModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:74px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/UnDecWithDates_UnDecWithDates.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/UnDecWithDates_UnDecWithDates.cshtml")]
    public partial class IQ6_Views_UnDecWithDates_UnDecWithDates_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_UnDecWithDates_UnDecWithDates_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 113)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel407111", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.UnDecOnly.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#UnDecOnlyValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:35px;height:21px;w" +
"idth:250px;top:53px;\'");
WriteLiteral(">Undeclared records only\r\n\t\t</label>\t\t\t\r\n\t\t<input");
WriteAttribute("class", Tuple.Create("  class=\'", 304), Tuple.Create("\'", 358)
, Tuple.Create(Tuple.Create("  ", 313), Tuple.Create<System.Object, System.Int32>(!Model.UnDecOnly.Visible ? " hide " : ""
, 315), false)
);
WriteLiteral(" \r\n\t\t ");
     Write(!Model.UnDecOnly.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/UnDecWithDa" +
"tes/Callback/?fname=UnDecOnly\',$(this));\"  style=\'position: absolute; left:17px;" +
"height:21px;width:12px;top:53px;\' name=\'UnDecOnlyValue\'   ");
                                                                                                                                                                                                                                                                                      Write(Model.UnDecOnlyValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input");
WriteLiteral(" type=\'hidden\'");
WriteLiteral(" name=\'UnDecOnlyValue\'");
WriteLiteral(" value=\'false\'");
WriteLiteral(" ");
                                                             Write(!Model.UnDecOnlyValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'UnDecOnlyOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 868), Tuple.Create("\'", 1043)
, Tuple.Create(Tuple.Create("", 876), Tuple.Create("position:", 876), true)
, Tuple.Create(Tuple.Create(" ", 885), Tuple.Create("absolute;", 886), true)
, Tuple.Create(Tuple.Create(" ", 895), Tuple.Create("left:5px;height:21px;width:12px;top:53px;>", 896), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 938), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.UnDecOnlyOperator))
, 945), false)
, Tuple.Create(Tuple.Create("\t\t", 1016), Tuple.Create("</select>", 1018), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1027), Tuple.Create("<label", 1030), true)
, Tuple.Create(Tuple.Create(" ", 1036), Tuple.Create("class=", 1037), true)
);
WriteLiteral("IQLabel407112 ");
                            Write(!Model.DateFrom.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#DateFromValue-Popover\" style=\'position:absolute;font-size:12px;t" +
"ext-align:right;left:5px;height:21px;width:120px;top:3px;\'>Date From:\r\n\t\t</label" +
"><input   ");
                     Write(!Model.DateFrom.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateFrom.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("UnDecWithDates/Callback/?fname=DateFrom");
WriteLiteral("\',$(this));\"  type=\'text\' name=\'DateFromValue\' value=\'");
                                                                                                                                                                                                                                                     Write(Model.DateFrom.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:3px;\'/>\t\t<sele" +
"ct class=\'form-control\' name=\'DateFromOperator\' style=\'position: absolute; left:" +
"130px;height:21px;width:57px;top:3px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateFromOperator)));
WriteLiteral("\t\t</select>\r\n\t<label");
WriteAttribute("class", Tuple.Create(" class=\'", 1901), Tuple.Create("\'", 1968)
, Tuple.Create(Tuple.Create("", 1909), Tuple.Create("IQLabel407113", 1909), true)
, Tuple.Create(Tuple.Create(" ", 1922), Tuple.Create<System.Object, System.Int32>(!Model.DateTo.LabelVisible ? " hide " : ""
, 1923), false)
);
WriteLiteral("  data-target=\"#DateToValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:28px;\'");
WriteLiteral(">Date To:\r\n\t\t</label><input   ");
                     Write(!Model.DateTo.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\tdata-date-format=\'ddd DD-MMM-YYYY\' class=\'form-control dateBox   ");
                                                                     Write(!Model.DateTo.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/UnDecWithDates/Callback/?fname=DateTo\'," +
"$(this));\"  type=\'text\' name=\'DateToValue\' value=\'");
                                                                                                                                                                                                                                               Write(Model.DateTo.ValueFormatted);
WriteLiteral("\' style=\'position: absolute; left:187px;height:21px;width:57px;top:28px;\'/>\t\t<sel" +
"ect");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'DateToOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 2583), Tuple.Create("", 2743)
, Tuple.Create(Tuple.Create("", 2591), Tuple.Create("position:", 2591), true)
, Tuple.Create(Tuple.Create(" ", 2600), Tuple.Create("absolute;", 2601), true)
, Tuple.Create(Tuple.Create(" ", 2610), Tuple.Create("left:130px;height:21px;width:57px;top:28px;>", 2611), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 2655), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetNumberOperators(Model.DateToOperator))
, 2662), false)
, Tuple.Create(Tuple.Create("\t\t", 2729), Tuple.Create("</select>", 2731), true)
, Tuple.Create(Tuple.Create("\r\n\t", 2740), Tuple.Create("", 2740), true)
);
        }
    }
}
 

public class UnDecWithMonth_FEMonth : 
	 SelectElementBase<string>
	{
	public UnDecWithMonth_FEMonth() :base("MonthValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}
public class UnDecWithMonth_FEUnDecOnly : 
	 ElementBase<bool>{
	public UnDecWithMonth_FEUnDecOnly() :base("UnDecOnlyValue", ""
		)
	{
		Enabled = true;
	}
		
}

public class UnDecWithMonthModel : ReportBase {
	public UnDecWithMonthModel() {
					Month  = new UnDecWithMonth_FEMonth();
					UnDecOnly  = new UnDecWithMonth_FEUnDecOnly();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(Month);
					action(UnDecOnly);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<UnDecWithMonthModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_UnDecWithMonth_cshtml));
    }
	
				public UnDecWithMonth_FEMonth Month  { get;set;}
	
	public string MonthValue { 
		get { return Month.DataValue;}
		set{ Month.Value = value; }
	}
			public UnDecWithMonth_FEUnDecOnly UnDecOnly  { get;set;}
	
	public bool UnDecOnlyValue { 
		get { return UnDecOnly.DataValue;}
		set{ UnDecOnly.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/UnDecWithMonth.cshtml";
			}
}
public class UnDecWithMonthController : ScreenController<UnDecWithMonthModel> {
			public ActionResult AutoCompleteMonth(string q) {
			var mdl = new UnDecWithMonthModel();
			SC.GetManager<UnDecWithMonthModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Month.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/UnDecWithMonth.cshtml")]
    public partial class IQ6_Views_UnDecWithMonth_cshtml : System.Web.Mvc.WebViewPage<FTL.UnDecWithMonthModel>
    {
        public IQ6_Views_UnDecWithMonth_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "UnDecWithMonth";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<UnDecWithMonthModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:49px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/UnDecWithMonth_UnDecWithMonth.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/UnDecWithMonth_UnDecWithMonth.cshtml")]
    public partial class IQ6_Views_UnDecWithMonth_UnDecWithMonth_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_UnDecWithMonth_UnDecWithMonth_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 109)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel407211", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.Month.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#MonthValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Month:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Month.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Month.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/UnDecWithMonth/Callback/?fname=Month\',$" +
"(this));\"  \r\n\t\t   name=\'MonthValue\'  style=\'position: absolute; left:210px;heigh" +
"t:21px;width:80px;top:3px;\'>\r\n");
             foreach(var itm in Model.Month.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 661), Tuple.Create("\'", 682)
, Tuple.Create(Tuple.Create("", 669), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 669), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.MonthValue != null ? Model.MonthValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                          Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'MonthOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 876), Tuple.Create("\'", 1046)
, Tuple.Create(Tuple.Create("", 884), Tuple.Create("position:", 884), true)
, Tuple.Create(Tuple.Create(" ", 893), Tuple.Create("absolute;", 894), true)
, Tuple.Create(Tuple.Create(" ", 903), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 904), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 947), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.MonthOperator))
, 954), false)
, Tuple.Create(Tuple.Create("\t\t", 1019), Tuple.Create("</select>", 1021), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1030), Tuple.Create("<label", 1033), true)
, Tuple.Create(Tuple.Create(" ", 1039), Tuple.Create("class=", 1040), true)
);
WriteLiteral("IQLabel407212 ");
                            Write(!Model.UnDecOnly.LabelVisible ? " hide " : "");
WriteLiteral("\'  data-target=\"#UnDecOnlyValue-Popover\" style=\'position:absolute;font-size:12px;" +
"text-align:right;left:35px;height:21px;width:250px;top:28px;\'>Undeclared records" +
" only\r\n\t\t</label>\t\t\t\r\n\t\t<input  class=\'  ");
                     Write(!Model.UnDecOnly.Visible ? " hide " : "");
WriteLiteral("\' \r\n");
WriteLiteral("\t\t ");
     Write(!Model.UnDecOnly.Enabled ? "disabled=disabled" : "");
WriteLiteral("  type=\'checkbox\' value=\'true\' onchange=\"javascript:IQDirtyCallback(\'/");
WriteLiteral("UnDecWithMonth/Callback/?fname=UnDecOnly");
WriteLiteral("\',$(this));\"  style=\'position: absolute; left:17px;height:21px;width:12px;top:28p" +
"x;\' name=\'UnDecOnlyValue\'   ");
                                                                                                                                                                                                                                                                                      Write(Model.UnDecOnlyValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t\t\r\n\t\t<input type=\'hidden\' name=\'UnDecOnlyValue\' value=\'false\' ");
                                                             Write(!Model.UnDecOnlyValue ? "checked=checked" : "");
WriteLiteral(" />\r\n\t\t\t\t<select class=\'form-control\' name=\'UnDecOnlyOperator\' style=\'position: a" +
"bsolute; left:5px;height:21px;width:12px;top:28px;>\r\n");
WriteLiteral("\t\t\t\t\t");
               Write(Html.Raw(IQApp.Operators.GetBooleanOperators(Model.UnDecOnlyOperator)));
WriteLiteral("\t\t</select>\r\n\t");
        }
    }
}
 

public class Zone_FEZone : 
	 SelectElementBase<string>
	{
	public Zone_FEZone() :base("ZoneValue", ""
		,"")
	{
		Enabled = true;
	}
		public override string GetDataSource() => DataSource;
		
}

public class ZoneModel : ReportBase {
	public ZoneModel() {
					Zone  = new Zone_FEZone();
			}
	public override void ForEachElement(Action<IElementBase> action) {
					action(Zone);
			}
	
		public override string ExecuteView()
	{
        SC.GetManager<ZoneModel>().OnLoad.ForEach(f => f(this));
        return WebUtil.GetView(this,GetView(), 
		typeof (FTL.ASP.IQ6_Views_Zone_cshtml));
    }
	
				public Zone_FEZone Zone  { get;set;}
	
	public string ZoneValue { 
		get { return Zone.DataValue;}
		set{ Zone.Value = value; }
	}
		public override string GetView() {
				return "~/IQ6/Views/Zone.cshtml";
			}
}
public class ZoneController : ScreenController<ZoneModel> {
			public ActionResult AutoCompleteZone(string q) {
			var mdl = new ZoneModel();
			SC.GetManager<ZoneModel>().OnLoad.ForEach(g=> g(mdl));
			
			var result = new {
					results = IQApp.DB.Load<Pair<string, string>>(
					"select * from (" + mdl.Zone.DataSource + ") IQD where [Description] like @query",
						new { query = q + "%"}).Select(f=> new { id = f.KeyValue, text= f.Description}),
				more = false } ;
		
			return Json(result);
		}
	}
namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/Zone.cshtml")]
    public partial class IQ6_Views_Zone_cshtml : System.Web.Mvc.WebViewPage<FTL.ZoneModel>
    {
        public IQ6_Views_Zone_cshtml()
        {
        }
        public override void Execute()
        {
	ViewBag.Title = "Zone";
WriteLiteral("\r\n");
WriteLiteral("<div");
WriteLiteral(" class=\"btn-toolbar\"");
WriteLiteral(" role=\"toolbar\"");
WriteLiteral(" >\r\n\t<div");
WriteLiteral(" class=\"btn-group\"");
WriteLiteral(" role=\"group\"");
WriteLiteral(">\r\n");
         foreach(var itm in SC.GetManager<ZoneModel>().OnDrawSingleToolbar) {
			foreach(var elm in itm(Model)) {
WriteLiteral("\t\t\t\t");
                 Write(Html.Raw(elm.HTML));
WriteLiteral("\r\n");
			}
		}
WriteLiteral("\t</div>\r\n\t</div>\r\n\r\n<div");
WriteLiteral(" class=\'row\'");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\'col-sm-12\'");
WriteLiteral("> \r\n\r\n\t\t\t\t\t<div");
WriteLiteral(" style=\'position:relative;height:24px\'");
WriteLiteral(">\r\n");
				Html.RenderPartial("~/IQ6/Views/Zone_Zone.cshtml", Model);
WriteLiteral("\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n</div>");
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using IQ6.Core;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/IQ6/Views/Zone_Zone.cshtml")]
    public partial class IQ6_Views_Zone_Zone_cshtml : IQ6.Core.IQWebPageView<dynamic>
    {
        public IQ6_Views_Zone_Zone_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n<label");
WriteAttribute("class", Tuple.Create(" class=\'", 43), Tuple.Create("\'", 108)
, Tuple.Create(Tuple.Create("", 51), Tuple.Create("IQLabel406611", 51), true)
, Tuple.Create(Tuple.Create(" ", 64), Tuple.Create<System.Object, System.Int32>(!Model.Zone.LabelVisible ? " hide " : ""
, 65), false)
);
WriteLiteral("  data-target=\"#ZoneValue-Popover\"");
WriteLiteral(" style=\'position:absolute;font-size:12px;text-align:right;left:5px;height:21px;wi" +
"dth:120px;top:3px;\'");
WriteLiteral(">Zone:\r\n\t\t</label><select");
WriteLiteral(" multiple=\"multiple\"");
WriteLiteral("  ");
                                         Write(!Model.Zone.Enabled ? "disabled=disabled" : "");
WriteLiteral(" \r\n\t\t class=\'form-control  \r\n");
WriteLiteral("\t\t  ");
      Write(!Model.Zone.Visible ? " hide " : "");
WriteLiteral("\'  onchange=\"javascript:IQDirtyCallback(\'/Zone/Callback/?fname=Zone\',$(this));\"  " +
"\r\n\t\t   name=\'ZoneValue\'  style=\'position: absolute; left:210px;height:21px;width" +
":80px;top:3px;\'>\r\n");
             foreach(var itm in Model.Zone.Data) {
WriteLiteral("\t\t\t\t<option");
WriteAttribute("value", Tuple.Create(" value=\'", 643), Tuple.Create("\'", 664)
, Tuple.Create(Tuple.Create("", 651), Tuple.Create<System.Object, System.Int32>(itm.KeyValue
, 651), false)
);
WriteLiteral(" ");
                                          Write(itm.KeyValue == (Model.ZoneValue != null ? Model.ZoneValue : "") ? "selected=selected" : "");
WriteLiteral(">");
                                                                                                                                        Write(itm.Description);
WriteLiteral("</option>\r\n");
			}
WriteLiteral("\t\t</select>\t\t<select");
WriteLiteral(" class=\'form-control\'");
WriteLiteral(" name=\'ZoneOperator\'");
WriteAttribute("style", Tuple.Create(" style=\'", 855), Tuple.Create("", 1011)
, Tuple.Create(Tuple.Create("", 863), Tuple.Create("position:", 863), true)
, Tuple.Create(Tuple.Create(" ", 872), Tuple.Create("absolute;", 873), true)
, Tuple.Create(Tuple.Create(" ", 882), Tuple.Create("left:130px;height:21px;width:80px;top:3px;>", 883), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 926), Tuple.Create<System.Object, System.Int32>(Html.Raw(IQApp.Operators.GetComboOperators(Model.ZoneOperator))
, 933), false)
, Tuple.Create(Tuple.Create("\t\t", 997), Tuple.Create("</select>", 999), true)
, Tuple.Create(Tuple.Create("\r\n\t", 1008), Tuple.Create("", 1008), true)
);
        }
    }
}
 

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/.IQ6Modules/Views/Jobs.cshtml")]
    public partial class @__IQ6Modules_Views_Jobs_cshtml : System.Web.Mvc.WebViewPage<Page<FTL.Job>>
    {
        public @__IQ6Modules_Views_Jobs_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("<div");
WriteLiteral(" class=\"row-fluid\"");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>Total Results:</b>\r\n\t\t<span");
WriteLiteral(" id=\"TotalResults\"");
WriteLiteral(">");
                           Write(Model.TotalItems);
WriteLiteral("</span>, \r\n\t\t<b>Total Selected:</b><span");
WriteLiteral(" id=\"TotalSelected\"");
WriteLiteral(">0</span></div>\r\n");
     if(Model.TotalItems ==0) {
WriteLiteral("\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>No Results</b></div> \r\n");
	} else {
WriteLiteral("\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>Showing Page:</b>\r\n");
WriteLiteral("\t ");
 Write(Model.CurrentPage);
WriteLiteral(" of ");
                         Write(Model.TotalPages);
WriteLiteral("\r\n\t </div>\r\n");
	}
WriteLiteral("\t<div");
WriteLiteral(" class=\'col-sm-3\'");
WriteLiteral(">\r\n");
         if(Model.CurrentPage>1) {
WriteLiteral("\t\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" value=\"<< Previous\"");
WriteLiteral(" \r\n\t\t\t\tclass=\"search btn btn-info btn-sm\"");
WriteAttribute("onclick", Tuple.Create(" \r\n\t\t\t\tonclick=\'", 586), Tuple.Create("\'", 688)
, Tuple.Create(Tuple.Create("", 602), Tuple.Create("$(\"input[name=start]\").val(", 602), true)
, Tuple.Create(Tuple.Create("", 629), Tuple.Create<System.Object, System.Int32>(Model.CurrentPage-1
, 629), false)
, Tuple.Create(Tuple.Create("", 651), Tuple.Create(");DSSearch_RunSearch(\"", 651), true)
                 , Tuple.Create(Tuple.Create("", 673), Tuple.Create<System.Object, System.Int32>(ViewBag.Url
, 673), false)
, Tuple.Create(Tuple.Create("", 685), Tuple.Create("\");", 685), true)
);
WriteLiteral(" />\r\n");
		}
WriteLiteral("\r\n");
         if(Model.TotalPages > Model.CurrentPage) {
WriteLiteral("\t\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" value=\"Next >>\"");
WriteLiteral(" \r\n\t\t\t\tclass=\"search btn btn-info btn-sm\"");
WriteAttribute("onclick", Tuple.Create(" \r\n\t\t\t\t\tonclick=\'", 828), Tuple.Create("\'", 936)
, Tuple.Create(Tuple.Create("", 845), Tuple.Create("$(\"input[name=start]\").val(", 845), true)
, Tuple.Create(Tuple.Create("", 872), Tuple.Create<System.Object, System.Int32>(Model.CurrentPage
, 872), false)
, Tuple.Create(Tuple.Create("", 890), Tuple.Create("+1);", 890), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 894), Tuple.Create("DSSearch_RunSearch(\"", 901), true)
, Tuple.Create(Tuple.Create("", 921), Tuple.Create<System.Object, System.Int32>(ViewBag.Url
, 921), false)
, Tuple.Create(Tuple.Create("", 933), Tuple.Create("\");", 933), true)
);
WriteLiteral(" />\r\n");
		}
WriteLiteral("\t</div>\r\n</div>\r\n<table");
WriteLiteral(" class=\'table table-striped\'");
WriteLiteral(">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t\t<th");
WriteLiteral(" style=\'width:100px;\'");
WriteLiteral("></th>\r\n\t\t\t\t<th");
WriteLiteral(" style=\'width:20px;\'");
WriteLiteral("></th>\r\n\t\t<th>Job Number</th><th>Transporter</th><th>Vehicle Number</th><th>Trail" +
"er Number</th>\t\t</tr>\r\n\t</thead>\r\n");
     foreach(var itm in Model.Items) {
WriteLiteral("\t\t");
WriteLiteral("\r\n\t\t\t<tr>\r\n\t\t\t\t\t\t<td><a");
WriteLiteral(" class=\'pjax btn btn-primary btn-xs\'");
WriteAttribute("href", Tuple.Create(" href=\"", 1301), Tuple.Create("\"", 1338)
, Tuple.Create(Tuple.Create("", 1308), Tuple.Create("/Job/Load/?RecId=", 1308), true)
          , Tuple.Create(Tuple.Create("", 1325), Tuple.Create<System.Object, System.Int32>(itm.RecordID
, 1325), false)
);
WriteLiteral("><img");
WriteLiteral(" src=\"/IQ6/viewrecord.png\"");
WriteLiteral(" style=\'max-height:21px;\'");
WriteLiteral(" />View Record</a></td>\r\n\t\t\t\t\t\t<td><input");
WriteLiteral(" type=\"checkbox\"");
WriteLiteral(" name=\"RecordIDs\"");
WriteLiteral(" onchange=\'DSSearch_RecordIDChange()\'");
WriteAttribute("value", Tuple.Create("  value=\"", 1506), Tuple.Create("\"", 1528)
                                 , Tuple.Create(Tuple.Create("", 1515), Tuple.Create<System.Object, System.Int32>(itm.RecordID
, 1515), false)
);
WriteLiteral(" /></td>\r\n\t\t\t\t\t\t\t\t\t\t<td>");
                                       Write(itm.JobNo.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.JobTransp.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.JobVehNo.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.JobTrailerNo.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t");
WriteLiteral("\r\n");
	}
WriteLiteral("</table>");
        }
    }
}

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/.IQ6Modules/Views/Orders.cshtml")]
    public partial class @__IQ6Modules_Views_Orders_cshtml : System.Web.Mvc.WebViewPage<Page<FTL.Orders>>
    {
        public @__IQ6Modules_Views_Orders_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("<div");
WriteLiteral(" class=\"row-fluid\"");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>Total Results:</b>\r\n\t\t<span");
WriteLiteral(" id=\"TotalResults\"");
WriteLiteral(">");
                           Write(Model.TotalItems);
WriteLiteral("</span>, \r\n\t\t<b>Total Selected:</b><span");
WriteLiteral(" id=\"TotalSelected\"");
WriteLiteral(">0</span></div>\r\n");
     if(Model.TotalItems ==0) {
WriteLiteral("\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>No Results</b></div> \r\n");
	} else {
WriteLiteral("\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>Showing Page:</b>\r\n");
WriteLiteral("\t ");
 Write(Model.CurrentPage);
WriteLiteral(" of ");
                         Write(Model.TotalPages);
WriteLiteral("\r\n\t </div>\r\n");
	}
WriteLiteral("\t<div");
WriteLiteral(" class=\'col-sm-3\'");
WriteLiteral(">\r\n");
         if(Model.CurrentPage>1) {
WriteLiteral("\t\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" value=\"<< Previous\"");
WriteLiteral(" \r\n\t\t\t\tclass=\"search btn btn-info btn-sm\"");
WriteAttribute("onclick", Tuple.Create(" \r\n\t\t\t\tonclick=\'", 589), Tuple.Create("\'", 691)
, Tuple.Create(Tuple.Create("", 605), Tuple.Create("$(\"input[name=start]\").val(", 605), true)
, Tuple.Create(Tuple.Create("", 632), Tuple.Create<System.Object, System.Int32>(Model.CurrentPage-1
, 632), false)
, Tuple.Create(Tuple.Create("", 654), Tuple.Create(");DSSearch_RunSearch(\"", 654), true)
                 , Tuple.Create(Tuple.Create("", 676), Tuple.Create<System.Object, System.Int32>(ViewBag.Url
, 676), false)
, Tuple.Create(Tuple.Create("", 688), Tuple.Create("\");", 688), true)
);
WriteLiteral(" />\r\n");
		}
WriteLiteral("\r\n");
         if(Model.TotalPages > Model.CurrentPage) {
WriteLiteral("\t\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" value=\"Next >>\"");
WriteLiteral(" \r\n\t\t\t\tclass=\"search btn btn-info btn-sm\"");
WriteAttribute("onclick", Tuple.Create(" \r\n\t\t\t\t\tonclick=\'", 831), Tuple.Create("\'", 939)
, Tuple.Create(Tuple.Create("", 848), Tuple.Create("$(\"input[name=start]\").val(", 848), true)
, Tuple.Create(Tuple.Create("", 875), Tuple.Create<System.Object, System.Int32>(Model.CurrentPage
, 875), false)
, Tuple.Create(Tuple.Create("", 893), Tuple.Create("+1);", 893), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 897), Tuple.Create("DSSearch_RunSearch(\"", 904), true)
, Tuple.Create(Tuple.Create("", 924), Tuple.Create<System.Object, System.Int32>(ViewBag.Url
, 924), false)
, Tuple.Create(Tuple.Create("", 936), Tuple.Create("\");", 936), true)
);
WriteLiteral(" />\r\n");
		}
WriteLiteral("\t</div>\r\n</div>\r\n<table");
WriteLiteral(" class=\'table table-striped\'");
WriteLiteral(">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t\t<th");
WriteLiteral(" style=\'width:100px;\'");
WriteLiteral("></th>\r\n\t\t\t\t<th");
WriteLiteral(" style=\'width:20px;\'");
WriteLiteral("></th>\r\n\t\t<th>Client Order No</th><th>Status</th><th>Order Number</th><th>Order D" +
"ate</th>\t\t</tr>\r\n\t</thead>\r\n");
     foreach(var itm in Model.Items) {
WriteLiteral("\t\t");
WriteLiteral("\r\n\t\t\t<tr>\r\n\t\t\t\t\t\t<td><a");
WriteLiteral(" class=\'pjax btn btn-primary btn-xs\'");
WriteAttribute("href", Tuple.Create(" href=\"", 1298), Tuple.Create("\"", 1338)
, Tuple.Create(Tuple.Create("", 1305), Tuple.Create("/Orders/Load/?RecId=", 1305), true)
             , Tuple.Create(Tuple.Create("", 1325), Tuple.Create<System.Object, System.Int32>(itm.RecordID
, 1325), false)
);
WriteLiteral("><img");
WriteLiteral(" src=\"/IQ6/viewrecord.png\"");
WriteLiteral(" style=\'max-height:21px;\'");
WriteLiteral(" />View Record</a></td>\r\n\t\t\t\t\t\t<td><input");
WriteLiteral(" type=\"checkbox\"");
WriteLiteral(" name=\"RecordIDs\"");
WriteLiteral(" onchange=\'DSSearch_RecordIDChange()\'");
WriteAttribute("value", Tuple.Create("  value=\"", 1506), Tuple.Create("\"", 1528)
                                 , Tuple.Create(Tuple.Create("", 1515), Tuple.Create<System.Object, System.Int32>(itm.RecordID
, 1515), false)
);
WriteLiteral(" /></td>\r\n\t\t\t\t\t\t\t\t\t\t<td>");
                                       Write(itm.OrdCustOrd.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.OrdStatus.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.OrdId.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.OrdDate.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t");
WriteLiteral("\r\n");
	}
WriteLiteral("</table>");
        }
    }
}

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/.IQ6Modules/Views/Customer.cshtml")]
    public partial class @__IQ6Modules_Views_Customer_cshtml : System.Web.Mvc.WebViewPage<Page<FTL.Customer>>
    {
        public @__IQ6Modules_Views_Customer_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("<div");
WriteLiteral(" class=\"row-fluid\"");
WriteLiteral(">\r\n\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>Total Results:</b>\r\n\t\t<span");
WriteLiteral(" id=\"TotalResults\"");
WriteLiteral(">");
                           Write(Model.TotalItems);
WriteLiteral("</span>, \r\n\t\t<b>Total Selected:</b><span");
WriteLiteral(" id=\"TotalSelected\"");
WriteLiteral(">0</span></div>\r\n");
     if(Model.TotalItems ==0) {
WriteLiteral("\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>No Results</b></div> \r\n");
	} else {
WriteLiteral("\t<div");
WriteLiteral(" class=\"col-sm-3\"");
WriteLiteral("><b>Showing Page:</b>\r\n");
WriteLiteral("\t ");
 Write(Model.CurrentPage);
WriteLiteral(" of ");
                         Write(Model.TotalPages);
WriteLiteral("\r\n\t </div>\r\n");
	}
WriteLiteral("\t<div");
WriteLiteral(" class=\'col-sm-3\'");
WriteLiteral(">\r\n");
         if(Model.CurrentPage>1) {
WriteLiteral("\t\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" value=\"<< Previous\"");
WriteLiteral(" \r\n\t\t\t\tclass=\"search btn btn-info btn-sm\"");
WriteAttribute("onclick", Tuple.Create(" \r\n\t\t\t\tonclick=\'", 591), Tuple.Create("\'", 693)
, Tuple.Create(Tuple.Create("", 607), Tuple.Create("$(\"input[name=start]\").val(", 607), true)
, Tuple.Create(Tuple.Create("", 634), Tuple.Create<System.Object, System.Int32>(Model.CurrentPage-1
, 634), false)
, Tuple.Create(Tuple.Create("", 656), Tuple.Create(");DSSearch_RunSearch(\"", 656), true)
                 , Tuple.Create(Tuple.Create("", 678), Tuple.Create<System.Object, System.Int32>(ViewBag.Url
, 678), false)
, Tuple.Create(Tuple.Create("", 690), Tuple.Create("\");", 690), true)
);
WriteLiteral(" />\r\n");
		}
WriteLiteral("\r\n");
         if(Model.TotalPages > Model.CurrentPage) {
WriteLiteral("\t\t\t<input");
WriteLiteral(" type=\"button\"");
WriteLiteral(" value=\"Next >>\"");
WriteLiteral(" \r\n\t\t\t\tclass=\"search btn btn-info btn-sm\"");
WriteAttribute("onclick", Tuple.Create(" \r\n\t\t\t\t\tonclick=\'", 833), Tuple.Create("\'", 941)
, Tuple.Create(Tuple.Create("", 850), Tuple.Create("$(\"input[name=start]\").val(", 850), true)
, Tuple.Create(Tuple.Create("", 877), Tuple.Create<System.Object, System.Int32>(Model.CurrentPage
, 877), false)
, Tuple.Create(Tuple.Create("", 895), Tuple.Create("+1);", 895), true)
, Tuple.Create(Tuple.Create("\r\n\t\t\t\t\t", 899), Tuple.Create("DSSearch_RunSearch(\"", 906), true)
, Tuple.Create(Tuple.Create("", 926), Tuple.Create<System.Object, System.Int32>(ViewBag.Url
, 926), false)
, Tuple.Create(Tuple.Create("", 938), Tuple.Create("\");", 938), true)
);
WriteLiteral(" />\r\n");
		}
WriteLiteral("\t</div>\r\n</div>\r\n<table");
WriteLiteral(" class=\'table table-striped\'");
WriteLiteral(">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t\t<th");
WriteLiteral(" style=\'width:100px;\'");
WriteLiteral("></th>\r\n\t\t\t\t<th");
WriteLiteral(" style=\'width:20px;\'");
WriteLiteral("></th>\r\n\t\t<th>Company ID</th><th>Town</th><th>Company Name</th><th>County</th>\t\t<" +
"/tr>\r\n\t</thead>\r\n");
     foreach(var itm in Model.Items) {
WriteLiteral("\t\t");
WriteLiteral("\r\n\t\t\t<tr>\r\n\t\t\t\t\t\t<td><a");
WriteLiteral(" class=\'pjax btn btn-primary btn-xs\'");
WriteAttribute("href", Tuple.Create(" href=\"", 1289), Tuple.Create("\"", 1331)
, Tuple.Create(Tuple.Create("", 1296), Tuple.Create("/Customer/Load/?RecId=", 1296), true)
               , Tuple.Create(Tuple.Create("", 1318), Tuple.Create<System.Object, System.Int32>(itm.RecordID
, 1318), false)
);
WriteLiteral("><img");
WriteLiteral(" src=\"/IQ6/viewrecord.png\"");
WriteLiteral(" style=\'max-height:21px;\'");
WriteLiteral(" />View Record</a></td>\r\n\t\t\t\t\t\t<td><input");
WriteLiteral(" type=\"checkbox\"");
WriteLiteral(" name=\"RecordIDs\"");
WriteLiteral(" onchange=\'DSSearch_RecordIDChange()\'");
WriteAttribute("value", Tuple.Create("  value=\"", 1499), Tuple.Create("\"", 1521)
                                 , Tuple.Create(Tuple.Create("", 1508), Tuple.Create<System.Object, System.Int32>(itm.RecordID
, 1508), false)
);
WriteLiteral(" /></td>\r\n\t\t\t\t\t\t\t\t\t\t<td>");
                                       Write(itm.CustId.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.CustTown.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.CustName.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td>");
                                           Write(itm.CustCounty.DisplayValue);
WriteLiteral("</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t");
WriteLiteral("\r\n");
	}
WriteLiteral("</table>");
        }
    }
}

}
